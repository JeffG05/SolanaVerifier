// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at src/lib.rs:9:10: 9:24>::serialize(_1: &GreetingAccount, _2: &mut W) -> Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _4: std::result::Result<(), std::io::Error>;
    let _5: &u32;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }

    bb0: {
        _5 = &((*_1).0: u32);
        _4 = <u32 as BorshSerialize>::serialize::<W>(_5, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<(), std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb4, otherwise: bb6];
    }

    bb3: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        goto -> bb5;
    }

    bb4: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6: {
        unreachable;
    }
}

fn <impl at src/lib.rs:9:26: 9:42>::deserialize(_1: &mut &[u8]) -> Result<GreetingAccount, std::io::Error> {
    debug buf => _1;
    let mut _0: std::result::Result<GreetingAccount, std::io::Error>;
    let mut _2: GreetingAccount;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u32>;
    let mut _4: std::result::Result<u32, std::io::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _7: u32;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <u32 as BorshDeserialize>::deserialize(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<u32, std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb4, otherwise: bb6];
    }

    bb3: {
        _7 = ((_3 as Continue).0: u32);
        _2 = GreetingAccount { counter: _7 };
        _0 = Result::<GreetingAccount, std::io::Error>::Ok(move _2);
        goto -> bb5;
    }

    bb4: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<GreetingAccount, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _6) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6: {
        unreachable;
    }
}

fn <impl at src/lib.rs:9:44: 9:49>::fmt(_1: &GreetingAccount, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&u32;
    let _7: &u32;

    bb0: {
        _3 = const "GreetingAccount";
        _4 = const "counter";
        _7 = &((*_1).0: u32);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn entrypoint(_1: *mut u8) -> u64 {
    debug input => _1;
    let mut _0: u64;
    let _2: &solana_program::pubkey::Pubkey;
    let _3: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _4: &[u8];
    let mut _5: (&solana_program::pubkey::Pubkey, std::vec::Vec<solana_program::account_info::AccountInfo<'_>>, &[u8]);
    let mut _6: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _7: &&solana_program::pubkey::Pubkey;
    let _8: &[solana_program::account_info::AccountInfo<'_>];
    let _9: &std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _10: &&[u8];
    let mut _11: isize;
    let mut _13: &solana_program::pubkey::Pubkey;
    let mut _14: &[u8];
    scope 1 {
        debug program_id => _2;
        debug accounts => _3;
        debug instruction_data => _4;
        let _12: solana_program::program_error::ProgramError;
        scope 3 {
            debug error => _12;
        }
    }
    scope 2 {
    }

    bb0: {
        _5 = solana_program::entrypoint::deserialize::<'_>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = (_5.0: &solana_program::pubkey::Pubkey);
        _3 = move (_5.1: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>);
        _4 = (_5.2: &[u8]);
        _7 = &_2;
        _13 = deref_copy (*_7);
        _9 = &_3;
        _8 = <Vec<AccountInfo<'_>> as Deref>::deref(_9) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _10 = &_4;
        _14 = deref_copy (*_10);
        _6 = process_instruction(_13, _8, _14) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb5, 1: bb4, otherwise: bb11];
    }

    bb4: {
        _12 = move ((_6 as Err).0: solana_program::program_error::ProgramError);
        _0 = <ProgramError as Into<u64>>::into(move _12) -> [return: bb12, unwind: bb8];
    }

    bb5: {
        _0 = const _;
        goto -> bb6;
    }

    bb6: {
        drop(_3) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_3) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        unreachable;
    }

    bb12: {
        goto -> bb6;
    }
}

fn process_instruction(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: &[u8]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug instruction_data => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _5: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _7: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _8: isize;
    let mut _11: bool;
    let mut _12: &&solana_program::pubkey::Pubkey;
    let mut _13: &&solana_program::pubkey::Pubkey;
    let mut _14: solana_program::program_error::ProgramError;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, GreetingAccount>;
    let mut _17: std::result::Result<GreetingAccount, std::io::Error>;
    let mut _18: &[u8];
    let _19: &&mut [u8];
    let _20: &std::cell::Ref<'_, &mut [u8]>;
    let _21: std::cell::Ref<'_, &mut [u8]>;
    let _22: &std::cell::RefCell<&mut [u8]>;
    let mut _23: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _24: isize;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _28: std::result::Result<(), std::io::Error>;
    let mut _29: &GreetingAccount;
    let mut _30: &mut &mut [u8];
    let mut _31: &mut [u8];
    let mut _32: &mut [u8];
    let mut _33: &mut &mut [u8];
    let mut _34: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _35: std::cell::RefMut<'_, &mut [u8]>;
    let _36: &std::cell::RefCell<&mut [u8]>;
    let mut _37: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _38: isize;
    let mut _40: &mut [u8];
    let mut _41: &mut [u8];
    scope 1 {
        debug accounts_iter => _4;
        let _9: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _10: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug account => _10;
            let mut _15: GreetingAccount;
            let _25: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _26: GreetingAccount;
            scope 7 {
                debug greeting => _15;
                let _39: std::result::Result<std::convert::Infallible, std::io::Error>;
                scope 12 {
                    debug residual => _39;
                    scope 13 {
                    }
                }
                scope 14 {
                    debug val => const ();
                    scope 15 {
                    }
                }
            }
            scope 8 {
                debug residual => _25;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _26;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _9;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _10;
            scope 6 {
            }
        }
    }

    bb0: {
        _5 = core::slice::<impl [AccountInfo<'_>]>::iter(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _7 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb4, 1: bb5, otherwise: bb32];
    }

    bb4: {
        _10 = ((_6 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _12 = &((*_10).3: &solana_program::pubkey::Pubkey);
        _13 = &_1;
        _11 = <&Pubkey as PartialEq>::ne(move _12, move _13) -> [return: bb6, unwind continue];
    }

    bb5: {
        _9 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _9) -> [return: bb28, unwind continue];
    }

    bb6: {
        switchInt(move _11) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _14 = solana_program::program_error::ProgramError::IncorrectProgramId;
        _0 = Result::<(), ProgramError>::Err(move _14);
        goto -> bb28;
    }

    bb8: {
        _23 = &((*_10).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _22 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _23) -> [return: bb9, unwind continue];
    }

    bb9: {
        _21 = RefCell::<&mut [u8]>::borrow(_22) -> [return: bb10, unwind continue];
    }

    bb10: {
        _20 = &_21;
        _19 = <Ref<'_, &mut [u8]> as Deref>::deref(_20) -> [return: bb11, unwind: bb30];
    }

    bb11: {
        _40 = deref_copy (*_19);
        _18 = &(*_40);
        _17 = <GreetingAccount as BorshDeserialize>::try_from_slice(move _18) -> [return: bb12, unwind: bb30];
    }

    bb12: {
        _16 = <Result<GreetingAccount, std::io::Error> as Try>::branch(move _17) -> [return: bb13, unwind: bb30];
    }

    bb13: {
        _24 = discriminant(_16);
        switchInt(move _24) -> [0: bb14, 1: bb15, otherwise: bb32];
    }

    bb14: {
        _26 = move ((_16 as Continue).0: GreetingAccount);
        _15 = move _26;
        drop(_21) -> [return: bb17, unwind continue];
    }

    bb15: {
        _25 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _25) -> [return: bb16, unwind: bb30];
    }

    bb16: {
        drop(_21) -> [return: bb28, unwind continue];
    }

    bb17: {
        (_15.0: u32) = Add((_15.0: u32), const 1_u32);
        _29 = &_15;
        _37 = &((*_10).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _36 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _37) -> [return: bb18, unwind continue];
    }

    bb18: {
        _35 = RefCell::<&mut [u8]>::borrow_mut(_36) -> [return: bb19, unwind continue];
    }

    bb19: {
        _34 = &mut _35;
        _33 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _34) -> [return: bb20, unwind: bb29];
    }

    bb20: {
        _41 = deref_copy (*_33);
        _32 = <[u8] as IndexMut<RangeFull>>::index_mut(_41, const RangeFull) -> [return: bb21, unwind: bb29];
    }

    bb21: {
        _31 = _32;
        _30 = &mut _31;
        _28 = <GreetingAccount as BorshSerialize>::serialize::<&mut [u8]>(move _29, _30) -> [return: bb22, unwind: bb29];
    }

    bb22: {
        _27 = <Result<(), std::io::Error> as Try>::branch(move _28) -> [return: bb23, unwind: bb29];
    }

    bb23: {
        _38 = discriminant(_27);
        switchInt(move _38) -> [0: bb24, 1: bb25, otherwise: bb32];
    }

    bb24: {
        drop(_35) -> [return: bb27, unwind continue];
    }

    bb25: {
        _39 = move ((_27 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _39) -> [return: bb26, unwind: bb29];
    }

    bb26: {
        drop(_35) -> [return: bb28, unwind continue];
    }

    bb27: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        goto -> bb28;
    }

    bb28: {
        return;
    }

    bb29 (cleanup): {
        drop(_35) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_21) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        resume;
    }

    bb32: {
        unreachable;
    }
}
