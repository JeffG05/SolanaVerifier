// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn entrypoint(_1: *mut u8) -> u64 {
    debug input => _1;
    let mut _0: u64;
    let _2: &solana_program::pubkey::Pubkey;
    let _3: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _4: &[u8];
    let mut _5: (&solana_program::pubkey::Pubkey, std::vec::Vec<solana_program::account_info::AccountInfo<'_>>, &[u8]);
    let mut _6: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _7: &&solana_program::pubkey::Pubkey;
    let _8: &[solana_program::account_info::AccountInfo<'_>];
    let _9: &std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _10: &&[u8];
    let mut _11: isize;
    let mut _13: &solana_program::pubkey::Pubkey;
    let mut _14: &[u8];
    scope 1 {
        debug program_id => _2;
        debug accounts => _3;
        debug instruction_data => _4;
        let _12: solana_program::program_error::ProgramError;
        scope 3 {
            debug error => _12;
        }
    }
    scope 2 {
    }

    bb0: {
        _5 = solana_program::entrypoint::deserialize::<'_>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = (_5.0: &solana_program::pubkey::Pubkey);
        _3 = move (_5.1: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>);
        _4 = (_5.2: &[u8]);
        _7 = &_2;
        _13 = deref_copy (*_7);
        _9 = &_3;
        _8 = <Vec<AccountInfo<'_>> as Deref>::deref(_9) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _10 = &_4;
        _14 = deref_copy (*_10);
        _6 = process_instruction(_13, _8, _14) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb5, 1: bb4, otherwise: bb11];
    }

    bb4: {
        _12 = move ((_6 as Err).0: solana_program::program_error::ProgramError);
        _0 = <ProgramError as Into<u64>>::into(move _12) -> [return: bb12, unwind: bb8];
    }

    bb5: {
        _0 = const _;
        goto -> bb6;
    }

    bb6: {
        drop(_3) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_3) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        unreachable;
    }

    bb12: {
        goto -> bb6;
    }
}

fn process_instruction(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: &[u8]) -> Result<(), ProgramError> {
    debug _program_id => _1;
    debug _accounts => _2;
    debug _instruction_data => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: u64;
    scope 1 {
        debug a => const 5_u64;
        let _5: u64;
        scope 2 {
            debug b => const 3_u64;
            let _6: u64;
            scope 3 {
                debug c => _6;
            }
        }
    }

    bb0: {
        _4 = const 5_u64;
        _5 = const 3_u64;
        _6 = calculate(_4, _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        return;
    }
}

fn calculate(_1: u64, _2: u64) -> u64 {
    debug a => _1;
    debug b => _2;
    let mut _0: u64;
    let mut _3: u64;
    let mut _4: (u64, bool);
    let mut _5: (u64, bool);
    scope 1 {
        debug result => _0;
    }

    bb0: {
        _4 = CheckedAdd(_1, _2);
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        _3 = move (_4.0: u64);
        _5 = CheckedMul(_3, const 2_u64);
        assert(!move (_5.1: bool), "attempt to compute `{} * {}`, which would overflow", move _3, const 2_u64) -> [success: bb2, unwind continue];
    }

    bb2: {
        _0 = move (_5.0: u64);
        return;
    }
}
