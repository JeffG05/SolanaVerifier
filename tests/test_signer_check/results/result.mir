// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at src/lib.rs:10:10: 10:24>::serialize(_1: &ConfigAccount, _2: &mut W) -> Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _4: std::result::Result<(), std::io::Error>;
    let _5: &solana_program::pubkey::Pubkey;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }

    bb0: {
        _5 = &((*_1).0: solana_program::pubkey::Pubkey);
        _4 = <Pubkey as BorshSerialize>::serialize::<W>(_5, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<(), std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb4, otherwise: bb6];
    }

    bb3: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        goto -> bb5;
    }

    bb4: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6: {
        unreachable;
    }
}

fn <impl at src/lib.rs:10:26: 10:42>::deserialize_reader(_1: &mut R) -> Result<ConfigAccount, std::io::Error> {
    debug reader => _1;
    let mut _0: std::result::Result<ConfigAccount, std::io::Error>;
    let mut _2: ConfigAccount;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, solana_program::pubkey::Pubkey>;
    let mut _4: std::result::Result<solana_program::pubkey::Pubkey, std::io::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _7: solana_program::pubkey::Pubkey;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <Pubkey as BorshDeserialize>::deserialize_reader::<R>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<Pubkey, std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb4, otherwise: bb6];
    }

    bb3: {
        _7 = ((_3 as Continue).0: solana_program::pubkey::Pubkey);
        _2 = ConfigAccount { admin: _7 };
        _0 = Result::<ConfigAccount, std::io::Error>::Ok(move _2);
        goto -> bb5;
    }

    bb4: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<ConfigAccount, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _6) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6: {
        unreachable;
    }
}

fn entrypoint(_1: *mut u8) -> u64 {
    debug input => _1;
    let mut _0: u64;
    let _2: &solana_program::pubkey::Pubkey;
    let _3: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _4: &[u8];
    let mut _5: (&solana_program::pubkey::Pubkey, std::vec::Vec<solana_program::account_info::AccountInfo<'_>>, &[u8]);
    let mut _6: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _7: &&solana_program::pubkey::Pubkey;
    let _8: &[solana_program::account_info::AccountInfo<'_>];
    let _9: &std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _10: &&[u8];
    let mut _11: isize;
    let mut _13: &solana_program::pubkey::Pubkey;
    let mut _14: &[u8];
    scope 1 {
        debug program_id => _2;
        debug accounts => _3;
        debug instruction_data => _4;
        let _12: solana_program::program_error::ProgramError;
        scope 3 {
            debug error => _12;
        }
    }
    scope 2 {
    }

    bb0: {
        _5 = solana_program::entrypoint::deserialize::<'_>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = (_5.0: &solana_program::pubkey::Pubkey);
        _3 = move (_5.1: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>);
        _4 = (_5.2: &[u8]);
        _7 = &_2;
        _13 = deref_copy (*_7);
        _9 = &_3;
        _8 = <Vec<AccountInfo<'_>> as Deref>::deref(_9) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _10 = &_4;
        _14 = deref_copy (*_10);
        _6 = process_instruction(_13, _8, _14) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb5, 1: bb4, otherwise: bb11];
    }

    bb4: {
        _12 = move ((_6 as Err).0: solana_program::program_error::ProgramError);
        _0 = <ProgramError as Into<u64>>::into(move _12) -> [return: bb12, unwind: bb8];
    }

    bb5: {
        _0 = const _;
        goto -> bb6;
    }

    bb6: {
        drop(_3) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_3) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        unreachable;
    }

    bb12: {
        goto -> bb6;
    }
}

fn update_admin(_1: &Pubkey, _2: &[AccountInfo<'_>]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _3: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _4: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _6: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _7: isize;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _11: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _12: isize;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, ConfigAccount>;
    let mut _17: std::result::Result<ConfigAccount, std::io::Error>;
    let mut _18: &[u8];
    let _19: &&mut [u8];
    let _20: &std::cell::Ref<'_, &mut [u8]>;
    let _21: std::cell::Ref<'_, &mut [u8]>;
    let _22: &std::cell::RefCell<&mut [u8]>;
    let mut _23: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _24: isize;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _28: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _29: isize;
    let mut _32: bool;
    let mut _33: &&solana_program::pubkey::Pubkey;
    let mut _34: &&solana_program::pubkey::Pubkey;
    let mut _35: solana_program::program_error::ProgramError;
    let mut _36: bool;
    let mut _37: &solana_program::pubkey::Pubkey;
    let mut _38: solana_program::program_error::ProgramError;
    let mut _39: solana_program::pubkey::Pubkey;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _41: std::result::Result<(), std::io::Error>;
    let mut _42: &ConfigAccount;
    let mut _43: &mut &mut [u8];
    let mut _44: &mut [u8];
    let mut _45: &mut [u8];
    let mut _46: &mut &mut [u8];
    let mut _47: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _48: std::cell::RefMut<'_, &mut [u8]>;
    let _49: &std::cell::RefCell<&mut [u8]>;
    let mut _50: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _51: isize;
    let mut _53: &mut [u8];
    let mut _54: &solana_program::pubkey::Pubkey;
    let mut _55: &solana_program::pubkey::Pubkey;
    let mut _56: &mut [u8];
    scope 1 {
        debug account_iter => _3;
        let _8: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _9: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug admin__signer => _9;
            let _13: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _14: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug config => _14;
                let mut _15: ConfigAccount;
                let _25: std::result::Result<std::convert::Infallible, std::io::Error>;
                let _26: ConfigAccount;
                scope 12 {
                    debug config_account => _15;
                    let _30: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _31: &solana_program::account_info::AccountInfo<'_>;
                    scope 17 {
                        debug new_admin => _31;
                        let _52: std::result::Result<std::convert::Infallible, std::io::Error>;
                        scope 22 {
                            debug residual => _52;
                            scope 23 {
                            }
                        }
                        scope 24 {
                            debug val => const ();
                            scope 25 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _30;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _31;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _25;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _26;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _13;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _14;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _8;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _9;
            scope 6 {
            }
        }
    }

    bb0: {
        _4 = core::slice::<impl [AccountInfo<'_>]>::iter(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &mut _4;
        _6 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb4, 1: bb5, otherwise: bb43];
    }

    bb4: {
        _9 = ((_5 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _11 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_3) -> [return: bb6, unwind continue];
    }

    bb5: {
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _8) -> [return: bb39, unwind continue];
    }

    bb6: {
        _10 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _11) -> [return: bb7, unwind continue];
    }

    bb7: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb8, 1: bb9, otherwise: bb43];
    }

    bb8: {
        _14 = ((_10 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _23 = &((*_14).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _22 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _23) -> [return: bb10, unwind continue];
    }

    bb9: {
        _13 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _13) -> [return: bb39, unwind continue];
    }

    bb10: {
        _21 = RefCell::<&mut [u8]>::borrow(_22) -> [return: bb11, unwind continue];
    }

    bb11: {
        _20 = &_21;
        _19 = <Ref<'_, &mut [u8]> as Deref>::deref(_20) -> [return: bb12, unwind: bb41];
    }

    bb12: {
        _53 = deref_copy (*_19);
        _18 = &(*_53);
        _17 = <ConfigAccount as BorshDeserialize>::try_from_slice(move _18) -> [return: bb13, unwind: bb41];
    }

    bb13: {
        _16 = <Result<ConfigAccount, std::io::Error> as Try>::branch(move _17) -> [return: bb14, unwind: bb41];
    }

    bb14: {
        _24 = discriminant(_16);
        switchInt(move _24) -> [0: bb15, 1: bb16, otherwise: bb43];
    }

    bb15: {
        _26 = move ((_16 as Continue).0: ConfigAccount);
        _15 = move _26;
        drop(_21) -> [return: bb18, unwind continue];
    }

    bb16: {
        _25 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _25) -> [return: bb17, unwind: bb41];
    }

    bb17: {
        drop(_21) -> [return: bb39, unwind continue];
    }

    bb18: {
        _28 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_3) -> [return: bb19, unwind continue];
    }

    bb19: {
        _27 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _28) -> [return: bb20, unwind continue];
    }

    bb20: {
        _29 = discriminant(_27);
        switchInt(move _29) -> [0: bb21, 1: bb22, otherwise: bb43];
    }

    bb21: {
        _31 = ((_27 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _33 = &((*_14).3: &solana_program::pubkey::Pubkey);
        _34 = &_1;
        _32 = <&Pubkey as PartialEq>::ne(move _33, move _34) -> [return: bb23, unwind continue];
    }

    bb22: {
        _30 = move ((_27 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _30) -> [return: bb39, unwind continue];
    }

    bb23: {
        switchInt(move _32) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _35 = solana_program::program_error::ProgramError::IncorrectProgramId;
        _0 = Result::<(), ProgramError>::Err(move _35);
        goto -> bb39;
    }

    bb25: {
        _37 = &(_15.0: solana_program::pubkey::Pubkey);
        _54 = deref_copy ((*_9).0: &solana_program::pubkey::Pubkey);
        _36 = <Pubkey as PartialEq>::ne(move _37, _54) -> [return: bb26, unwind continue];
    }

    bb26: {
        switchInt(move _36) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _38 = solana_program::program_error::ProgramError::InvalidAccountOwner;
        _0 = Result::<(), ProgramError>::Err(move _38);
        goto -> bb39;
    }

    bb28: {
        _55 = deref_copy ((*_31).0: &solana_program::pubkey::Pubkey);
        _39 = (*_55);
        (_15.0: solana_program::pubkey::Pubkey) = move _39;
        _42 = &_15;
        _50 = &((*_14).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _49 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _50) -> [return: bb29, unwind continue];
    }

    bb29: {
        _48 = RefCell::<&mut [u8]>::borrow_mut(_49) -> [return: bb30, unwind continue];
    }

    bb30: {
        _47 = &mut _48;
        _46 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _47) -> [return: bb31, unwind: bb40];
    }

    bb31: {
        _56 = deref_copy (*_46);
        _45 = <[u8] as IndexMut<RangeFull>>::index_mut(_56, const RangeFull) -> [return: bb32, unwind: bb40];
    }

    bb32: {
        _44 = _45;
        _43 = &mut _44;
        _41 = <ConfigAccount as BorshSerialize>::serialize::<&mut [u8]>(move _42, _43) -> [return: bb33, unwind: bb40];
    }

    bb33: {
        _40 = <Result<(), std::io::Error> as Try>::branch(move _41) -> [return: bb34, unwind: bb40];
    }

    bb34: {
        _51 = discriminant(_40);
        switchInt(move _51) -> [0: bb35, 1: bb36, otherwise: bb43];
    }

    bb35: {
        drop(_48) -> [return: bb38, unwind continue];
    }

    bb36: {
        _52 = move ((_40 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _52) -> [return: bb37, unwind: bb40];
    }

    bb37: {
        drop(_48) -> [return: bb39, unwind continue];
    }

    bb38: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        goto -> bb39;
    }

    bb39: {
        return;
    }

    bb40 (cleanup): {
        drop(_48) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_21) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        resume;
    }

    bb43: {
        unreachable;
    }
}

fn process_instruction(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: &[u8]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug instruction_data => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;

    bb0: {
        _0 = update_admin(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}
