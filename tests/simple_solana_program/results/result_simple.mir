// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn process_instruction(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: &[u8]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug instruction_data => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _5: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _7: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _8: isize;
    let mut _11: bool;
    let mut _12: &&solana_program::pubkey::Pubkey;
    let mut _13: &&solana_program::pubkey::Pubkey;
    let mut _14: solana_program::program_error::ProgramError;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, GreetingAccount>;
    let mut _17: std::result::Result<GreetingAccount, std::io::Error>;
    let mut _18: &[u8];
    let _19: &&mut [u8];
    let _20: &std::cell::Ref<'_, &mut [u8]>;
    let _21: std::cell::Ref<'_, &mut [u8]>;
    let _22: &std::cell::RefCell<&mut [u8]>;
    let mut _23: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _24: isize;
    let mut _27: (u32, bool);
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _29: std::result::Result<(), std::io::Error>;
    let mut _30: &GreetingAccount;
    let mut _31: &mut &mut [u8];
    let mut _32: &mut [u8];
    let mut _33: &mut [u8];
    let mut _34: &mut &mut [u8];
    let mut _35: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _36: std::cell::RefMut<'_, &mut [u8]>;
    let _37: &std::cell::RefCell<&mut [u8]>;
    let mut _38: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _39: isize;
    let mut _41: &mut [u8];
    let mut _42: &mut [u8];
    scope 1 {
        debug accounts_iter => _4;
        let _9: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _10: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug account => _10;
            let mut _15: GreetingAccount;
            let _25: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _26: GreetingAccount;
            scope 7 {
                debug greeting => _15;
                let _40: std::result::Result<std::convert::Infallible, std::io::Error>;
                scope 12 {
                    debug residual => _40;
                    scope 13 {
                    }
                }
                scope 14 {
                    debug val => const ();
                    scope 15 {
                    }
                }
            }
            scope 8 {
                debug residual => _25;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _26;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _9;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _10;
            scope 6 {
            }
        }
    }

    bb0: {
        _5 = core::slice::<impl [AccountInfo<'_>]>::iter(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _7 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb4, 1: bb5, otherwise: bb33];
    }

    bb4: {
        _10 = ((_6 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _12 = &((*_10).3: &solana_program::pubkey::Pubkey);
        _13 = &_1;
        _11 = <&Pubkey as PartialEq>::ne(move _12, move _13) -> [return: bb6, unwind continue];
    }

    bb5: {
        _9 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _9) -> [return: bb29, unwind continue];
    }

    bb6: {
        switchInt(move _11) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _14 = solana_program::program_error::ProgramError::IncorrectProgramId;
        _0 = Result::<(), ProgramError>::Err(move _14);
        goto -> bb29;
    }

    bb8: {
        _23 = &((*_10).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _22 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _23) -> [return: bb9, unwind continue];
    }

    bb9: {
        _21 = RefCell::<&mut [u8]>::borrow(_22) -> [return: bb10, unwind continue];
    }

    bb10: {
        _20 = &_21;
        _19 = <Ref<'_, &mut [u8]> as Deref>::deref(_20) -> [return: bb11, unwind: bb31];
    }

    bb11: {
        _41 = deref_copy (*_19);
        _18 = &(*_41);
        _17 = <GreetingAccount as BorshDeserialize>::try_from_slice(move _18) -> [return: bb12, unwind: bb31];
    }

    bb12: {
        _16 = <Result<GreetingAccount, std::io::Error> as Try>::branch(move _17) -> [return: bb13, unwind: bb31];
    }

    bb13: {
        _24 = discriminant(_16);
        switchInt(move _24) -> [0: bb14, 1: bb15, otherwise: bb33];
    }

    bb14: {
        _26 = move ((_16 as Continue).0: GreetingAccount);
        _15 = move _26;
        drop(_21) -> [return: bb17, unwind continue];
    }

    bb15: {
        _25 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _25) -> [return: bb16, unwind: bb31];
    }

    bb16: {
        drop(_21) -> [return: bb29, unwind continue];
    }

    bb17: {
        _27 = CheckedAdd((_15.0: u32), const 1_u32);
        assert(!move (_27.1: bool), "attempt to compute `{} + {}`, which would overflow", (_15.0: u32), const 1_u32) -> [success: bb18, unwind continue];
    }

    bb18: {
        (_15.0: u32) = move (_27.0: u32);
        _30 = &_15;
        _38 = &((*_10).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _37 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _38) -> [return: bb19, unwind continue];
    }

    bb19: {
        _36 = RefCell::<&mut [u8]>::borrow_mut(_37) -> [return: bb20, unwind continue];
    }

    bb20: {
        _35 = &mut _36;
        _34 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _35) -> [return: bb21, unwind: bb30];
    }

    bb21: {
        _42 = deref_copy (*_34);
        _33 = <[u8] as IndexMut<RangeFull>>::index_mut(_42, const RangeFull) -> [return: bb22, unwind: bb30];
    }

    bb22: {
        _32 = _33;
        _31 = &mut _32;
        _29 = <GreetingAccount as BorshSerialize>::serialize::<&mut [u8]>(move _30, _31) -> [return: bb23, unwind: bb30];
    }

    bb23: {
        _28 = <Result<(), std::io::Error> as Try>::branch(move _29) -> [return: bb24, unwind: bb30];
    }

    bb24: {
        _39 = discriminant(_28);
        switchInt(move _39) -> [0: bb25, 1: bb26, otherwise: bb33];
    }

    bb25: {
        drop(_36) -> [return: bb28, unwind continue];
    }

    bb26: {
        _40 = move ((_28 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _40) -> [return: bb27, unwind: bb30];
    }

    bb27: {
        drop(_36) -> [return: bb29, unwind continue];
    }

    bb28: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        goto -> bb29;
    }

    bb29: {
        return;
    }

    bb30 (cleanup): {
        drop(_36) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_21) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        resume;
    }

    bb33: {
        unreachable;
    }
}
