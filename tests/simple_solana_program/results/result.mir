// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at src/lib.rs:11:10: 11:24>::serialize(_1: &GreetingAccount, _2: &mut W) -> Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _4: std::result::Result<(), std::io::Error>;
    let _5: &i32;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }

    bb0: {
        _5 = &((*_1).0: i32);
        _4 = <i32 as BorshSerialize>::serialize::<W>(_5, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<(), std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb4, otherwise: bb6];
    }

    bb3: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        goto -> bb5;
    }

    bb4: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6: {
        unreachable;
    }
}

fn <impl at src/lib.rs:11:26: 11:42>::deserialize(_1: &mut &[u8]) -> Result<GreetingAccount, std::io::Error> {
    debug buf => _1;
    let mut _0: std::result::Result<GreetingAccount, std::io::Error>;
    let mut _2: GreetingAccount;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, i32>;
    let mut _4: std::result::Result<i32, std::io::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _7: i32;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <i32 as BorshDeserialize>::deserialize(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<i32, std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb4, otherwise: bb6];
    }

    bb3: {
        _7 = ((_3 as Continue).0: i32);
        _2 = GreetingAccount { counter: _7 };
        _0 = Result::<GreetingAccount, std::io::Error>::Ok(move _2);
        goto -> bb5;
    }

    bb4: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<GreetingAccount, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _6) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6: {
        unreachable;
    }
}

fn <impl at src/lib.rs:11:44: 11:49>::fmt(_1: &GreetingAccount, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&i32;
    let _7: &i32;

    bb0: {
        _3 = const "GreetingAccount";
        _4 = const "counter";
        _7 = &((*_1).0: i32);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn entrypoint(_1: *mut u8) -> u64 {
    debug input => _1;
    let mut _0: u64;
    let _2: &solana_program::pubkey::Pubkey;
    let _3: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _4: &[u8];
    let mut _5: (&solana_program::pubkey::Pubkey, std::vec::Vec<solana_program::account_info::AccountInfo<'_>>, &[u8]);
    let mut _6: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _7: &&solana_program::pubkey::Pubkey;
    let _8: &[solana_program::account_info::AccountInfo<'_>];
    let _9: &std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _10: &&[u8];
    let mut _11: isize;
    let mut _13: &solana_program::pubkey::Pubkey;
    let mut _14: &[u8];
    scope 1 {
        debug program_id => _2;
        debug accounts => _3;
        debug instruction_data => _4;
        let _12: solana_program::program_error::ProgramError;
        scope 3 {
            debug error => _12;
        }
    }
    scope 2 {
    }

    bb0: {
        _5 = solana_program::entrypoint::deserialize::<'_>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = (_5.0: &solana_program::pubkey::Pubkey);
        _3 = move (_5.1: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>);
        _4 = (_5.2: &[u8]);
        _7 = &_2;
        _13 = deref_copy (*_7);
        _9 = &_3;
        _8 = <Vec<AccountInfo<'_>> as Deref>::deref(_9) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _10 = &_4;
        _14 = deref_copy (*_10);
        _6 = process_instruction(_13, _8, _14) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb5, 1: bb4, otherwise: bb11];
    }

    bb4: {
        _12 = move ((_6 as Err).0: solana_program::program_error::ProgramError);
        _0 = <ProgramError as Into<u64>>::into(move _12) -> [return: bb12, unwind: bb8];
    }

    bb5: {
        _0 = const _;
        goto -> bb6;
    }

    bb6: {
        drop(_3) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_3) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        unreachable;
    }

    bb12: {
        goto -> bb6;
    }
}

fn process_instruction(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: &[u8]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug instruction_data => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _5: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _7: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _8: isize;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, GreetingAccount>;
    let mut _13: std::result::Result<GreetingAccount, std::io::Error>;
    let mut _14: &[u8];
    let _15: &&mut [u8];
    let _16: &std::cell::Ref<'_, &mut [u8]>;
    let _17: std::cell::Ref<'_, &mut [u8]>;
    let _18: &std::cell::RefCell<&mut [u8]>;
    let mut _19: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _20: isize;
    let mut _23: bool;
    let mut _24: i32;
    let mut _25: i32;
    let mut _26: bool;
    let mut _27: i32;
    let mut _28: i32;
    let mut _29: bool;
    let mut _30: i32;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _36: std::result::Result<(), std::io::Error>;
    let mut _37: &GreetingAccount;
    let mut _38: &mut &mut [u8];
    let mut _39: &mut [u8];
    let mut _40: &mut [u8];
    let mut _41: &mut &mut [u8];
    let mut _42: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _43: std::cell::RefMut<'_, &mut [u8]>;
    let _44: &std::cell::RefCell<&mut [u8]>;
    let mut _45: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _46: isize;
    let mut _48: &mut [u8];
    let mut _49: &mut [u8];
    scope 1 {
        debug accounts_iter => _4;
        let _9: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _10: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug account => _10;
            let mut _11: GreetingAccount;
            let _21: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _22: GreetingAccount;
            scope 7 {
                debug greeting => _11;
                let _47: std::result::Result<std::convert::Infallible, std::io::Error>;
                scope 12 {
                    debug residual => _47;
                    scope 13 {
                    }
                }
                scope 14 {
                    debug val => const ();
                    scope 15 {
                    }
                }
            }
            scope 8 {
                debug residual => _21;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _22;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _9;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _10;
            scope 6 {
            }
        }
    }

    bb0: {
        _5 = core::slice::<impl [AccountInfo<'_>]>::iter(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _7 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb4, 1: bb5, otherwise: bb37];
    }

    bb4: {
        _10 = ((_6 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _19 = &((*_10).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _18 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _19) -> [return: bb6, unwind continue];
    }

    bb5: {
        _9 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _9) -> [return: bb33, unwind continue];
    }

    bb6: {
        _17 = RefCell::<&mut [u8]>::borrow(_18) -> [return: bb7, unwind continue];
    }

    bb7: {
        _16 = &_17;
        _15 = <Ref<'_, &mut [u8]> as Deref>::deref(_16) -> [return: bb8, unwind: bb35];
    }

    bb8: {
        _48 = deref_copy (*_15);
        _14 = &(*_48);
        _13 = <GreetingAccount as BorshDeserialize>::try_from_slice(move _14) -> [return: bb9, unwind: bb35];
    }

    bb9: {
        _12 = <Result<GreetingAccount, std::io::Error> as Try>::branch(move _13) -> [return: bb10, unwind: bb35];
    }

    bb10: {
        _20 = discriminant(_12);
        switchInt(move _20) -> [0: bb11, 1: bb12, otherwise: bb37];
    }

    bb11: {
        _22 = move ((_12 as Continue).0: GreetingAccount);
        _11 = move _22;
        drop(_17) -> [return: bb14, unwind continue];
    }

    bb12: {
        _21 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _21) -> [return: bb13, unwind: bb35];
    }

    bb13: {
        drop(_17) -> [return: bb33, unwind continue];
    }

    bb14: {
        _24 = (_11.0: i32);
        _25 = Sub(const i32::MAX, const 1_i32);
        _23 = Le(move _24, move _25);
        switchInt(move _23) -> [0: bb17, otherwise: bb15];
    }

    bb15: {
        _27 = (_11.0: i32);
        _26 = Gt(move _27, const i32::MIN);
        switchInt(move _26) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _28 = (_11.0: i32);
        (_11.0: i32) = Neg(move _28);
        goto -> bb22;
    }

    bb17: {
        _30 = (_11.0: i32);
        _29 = Ge(move _30, const i32::MAX);
        switchInt(move _29) -> [0: bb21, otherwise: bb18];
    }

    bb18: {
        _31 = Eq(const 2_i32, const 0_i32);
        assert(!move _31, "attempt to divide `{}` by zero", (_11.0: i32)) -> [success: bb19, unwind continue];
    }

    bb19: {
        _32 = Eq(const 2_i32, const -1_i32);
        _33 = Eq((_11.0: i32), const i32::MIN);
        _34 = BitAnd(move _32, move _33);
        assert(!move _34, "attempt to compute `{} / {}`, which would overflow", (_11.0: i32), const 2_i32) -> [success: bb20, unwind continue];
    }

    bb20: {
        (_11.0: i32) = Div((_11.0: i32), const 2_i32);
        goto -> bb22;
    }

    bb21: {
        (_11.0: i32) = Add((_11.0: i32), const 203_i32);
        goto -> bb22;
    }

    bb22: {
        _37 = &_11;
        _45 = &((*_10).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _44 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _45) -> [return: bb23, unwind continue];
    }

    bb23: {
        _43 = RefCell::<&mut [u8]>::borrow_mut(_44) -> [return: bb24, unwind continue];
    }

    bb24: {
        _42 = &mut _43;
        _41 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _42) -> [return: bb25, unwind: bb34];
    }

    bb25: {
        _49 = deref_copy (*_41);
        _40 = <[u8] as IndexMut<RangeFull>>::index_mut(_49, const RangeFull) -> [return: bb26, unwind: bb34];
    }

    bb26: {
        _39 = _40;
        _38 = &mut _39;
        _36 = <GreetingAccount as BorshSerialize>::serialize::<&mut [u8]>(move _37, _38) -> [return: bb27, unwind: bb34];
    }

    bb27: {
        _35 = <Result<(), std::io::Error> as Try>::branch(move _36) -> [return: bb28, unwind: bb34];
    }

    bb28: {
        _46 = discriminant(_35);
        switchInt(move _46) -> [0: bb29, 1: bb30, otherwise: bb37];
    }

    bb29: {
        drop(_43) -> [return: bb32, unwind continue];
    }

    bb30: {
        _47 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _47) -> [return: bb31, unwind: bb34];
    }

    bb31: {
        drop(_43) -> [return: bb33, unwind continue];
    }

    bb32: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        goto -> bb33;
    }

    bb33: {
        return;
    }

    bb34 (cleanup): {
        drop(_43) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_17) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        resume;
    }

    bb37: {
        unreachable;
    }
}
