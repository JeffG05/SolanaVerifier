// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn create_address_info(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: address_info::AddressInfo) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug address_info => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _5: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _7: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _8: isize;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _12: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _13: isize;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _17: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _18: isize;
    let mut _22: &std::vec::Vec<u8>;
    let _23: std::vec::Vec<u8>;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::vec::Vec<u8>>;
    let mut _25: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _26: &state::address_info::AddressInfo;
    let mut _27: isize;
    let mut _31: &solana_program::rent::Rent;
    let _32: solana_program::rent::Rent;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::rent::Rent>;
    let mut _34: std::result::Result<solana_program::rent::Rent, solana_program::program_error::ProgramError>;
    let mut _35: isize;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _39: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _40: &solana_program::instruction::Instruction;
    let _41: solana_program::instruction::Instruction;
    let mut _42: u64;
    let mut _43: &[solana_program::account_info::AccountInfo<'_>];
    let _44: &[solana_program::account_info::AccountInfo<'_>; 3];
    let _45: [solana_program::account_info::AccountInfo<'_>; 3];
    let mut _46: solana_program::account_info::AccountInfo<'_>;
    let mut _47: solana_program::account_info::AccountInfo<'_>;
    let mut _48: solana_program::account_info::AccountInfo<'_>;
    let mut _49: isize;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _52: std::result::Result<(), std::io::Error>;
    let mut _53: &state::address_info::AddressInfo;
    let mut _54: &mut &mut [u8];
    let mut _55: &mut [u8];
    let mut _56: &mut [u8];
    let mut _57: &mut &mut [u8];
    let mut _58: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _59: std::cell::RefMut<'_, &mut [u8]>;
    let _60: &std::cell::RefCell<&mut [u8]>;
    let mut _61: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _62: isize;
    let mut _64: &solana_program::pubkey::Pubkey;
    let mut _65: &solana_program::pubkey::Pubkey;
    let mut _66: &mut [u8];
    scope 1 {
        debug accounts_iter => _4;
        let _9: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _10: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug address_info_account => _10;
            let _14: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _15: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug payer => _15;
                let _19: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _20: &solana_program::account_info::AccountInfo<'_>;
                scope 12 {
                    debug system_program => _20;
                    let _21: usize;
                    let _28: std::result::Result<std::convert::Infallible, std::io::Error>;
                    let _29: std::vec::Vec<u8>;
                    scope 17 {
                        debug account_span => _21;
                        let _30: u64;
                        let _36: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _37: solana_program::rent::Rent;
                        scope 22 {
                            debug lamports_required => _30;
                            let _50: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _63: std::result::Result<std::convert::Infallible, std::io::Error>;
                            scope 27 {
                                debug residual => _50;
                                scope 28 {
                                }
                            }
                            scope 29 {
                                debug val => const ();
                                scope 30 {
                                }
                            }
                            scope 31 {
                                debug residual => _63;
                                scope 32 {
                                }
                            }
                            scope 33 {
                                debug val => const ();
                                scope 34 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _36;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _37;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _28;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _29;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _19;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _20;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _14;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _15;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _9;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _10;
            scope 6 {
            }
        }
    }

    bb0: {
        _5 = core::slice::<impl [AccountInfo<'_>]>::iter(_2) -> [return: bb1, unwind: bb55];
    }

    bb1: {
        _4 = &mut _5;
        _7 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb2, unwind: bb55];
    }

    bb2: {
        _6 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _7) -> [return: bb3, unwind: bb55];
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _10 = ((_6 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _12 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb7, unwind: bb55];
    }

    bb6: {
        _9 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _9) -> [return: bb58, unwind: bb55];
    }

    bb7: {
        _11 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _12) -> [return: bb8, unwind: bb55];
    }

    bb8: {
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _15 = ((_11 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _17 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb11, unwind: bb55];
    }

    bb10: {
        _14 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _14) -> [return: bb59, unwind: bb55];
    }

    bb11: {
        _16 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _17) -> [return: bb12, unwind: bb55];
    }

    bb12: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        _20 = ((_16 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _26 = &_3;
        _25 = <address_info::AddressInfo as BorshSerialize>::try_to_vec(move _26) -> [return: bb15, unwind: bb55];
    }

    bb14: {
        _19 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _19) -> [return: bb60, unwind: bb55];
    }

    bb15: {
        _24 = <Result<Vec<u8>, std::io::Error> as Try>::branch(move _25) -> [return: bb16, unwind: bb55];
    }

    bb16: {
        _27 = discriminant(_24);
        switchInt(move _27) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        _29 = move ((_24 as Continue).0: std::vec::Vec<u8>);
        _23 = move _29;
        _22 = &_23;
        _21 = Vec::<u8>::len(move _22) -> [return: bb19, unwind: bb54];
    }

    bb18: {
        _28 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _28) -> [return: bb61, unwind: bb55];
    }

    bb19: {
        drop(_23) -> [return: bb57, unwind: bb55];
    }

    bb20: {
        _33 = <Result<Rent, ProgramError> as Try>::branch(move _34) -> [return: bb21, unwind: bb55];
    }

    bb21: {
        _35 = discriminant(_33);
        switchInt(move _35) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        _37 = move ((_33 as Continue).0: solana_program::rent::Rent);
        _32 = move _37;
        _31 = &_32;
        _30 = Rent::minimum_balance(move _31, _21) -> [return: bb24, unwind: bb55];
    }

    bb23: {
        _36 = move ((_33 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _36) -> [return: bb62, unwind: bb55];
    }

    bb24: {
        _64 = deref_copy ((*_15).0: &solana_program::pubkey::Pubkey);
        _65 = deref_copy ((*_10).0: &solana_program::pubkey::Pubkey);
        _42 = _21 as u64 (IntToInt);
        _41 = solana_program::system_instruction::create_account(_64, _65, _30, move _42, _1) -> [return: bb25, unwind: bb55];
    }

    bb25: {
        _40 = &_41;
        _46 = <AccountInfo<'_> as Clone>::clone(_15) -> [return: bb26, unwind: bb53];
    }

    bb26: {
        _47 = <AccountInfo<'_> as Clone>::clone(_10) -> [return: bb27, unwind: bb52];
    }

    bb27: {
        _48 = <AccountInfo<'_> as Clone>::clone(_20) -> [return: bb28, unwind: bb51];
    }

    bb28: {
        _45 = [move _46, move _47, move _48];
        _44 = &_45;
        _43 = _44 as &[solana_program::account_info::AccountInfo<'_>] (PointerCoercion(Unsize));
        _39 = invoke(_40, move _43) -> [return: bb29, unwind: bb50];
    }

    bb29: {
        _38 = <Result<(), ProgramError> as Try>::branch(move _39) -> [return: bb30, unwind: bb50];
    }

    bb30: {
        _49 = discriminant(_38);
        switchInt(move _49) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        drop(_45) -> [return: bb34, unwind: bb53];
    }

    bb32: {
        _50 = move ((_38 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _50) -> [return: bb33, unwind: bb50];
    }

    bb33: {
        drop(_45) -> [return: bb46, unwind: bb53];
    }

    bb34: {
        drop(_41) -> [return: bb35, unwind: bb55];
    }

    bb35: {
        _53 = &_3;
        _61 = &((*_10).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _60 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _61) -> [return: bb36, unwind: bb55];
    }

    bb36: {
        _59 = RefCell::<&mut [u8]>::borrow_mut(_60) -> [return: bb37, unwind: bb55];
    }

    bb37: {
        _58 = &mut _59;
        _57 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _58) -> [return: bb38, unwind: bb49];
    }

    bb38: {
        _66 = deref_copy (*_57);
        _56 = <[u8] as IndexMut<RangeFull>>::index_mut(_66, const RangeFull) -> [return: bb39, unwind: bb49];
    }

    bb39: {
        _55 = _56;
        _54 = &mut _55;
        _52 = <address_info::AddressInfo as BorshSerialize>::serialize::<&mut [u8]>(move _53, _54) -> [return: bb40, unwind: bb49];
    }

    bb40: {
        _51 = <Result<(), std::io::Error> as Try>::branch(move _52) -> [return: bb41, unwind: bb49];
    }

    bb41: {
        _62 = discriminant(_51);
        switchInt(move _62) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        drop(_59) -> [return: bb45, unwind: bb55];
    }

    bb43: {
        _63 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _63) -> [return: bb44, unwind: bb49];
    }

    bb44: {
        drop(_59) -> [return: bb47, unwind: bb55];
    }

    bb45: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        drop(_3) -> [return: bb48, unwind continue];
    }

    bb46: {
        drop(_41) -> [return: bb47, unwind: bb55];
    }

    bb47: {
        drop(_3) -> [return: bb48, unwind continue];
    }

    bb48: {
        return;
    }

    bb49 (cleanup): {
        drop(_59) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_45) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_47) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_46) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_41) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_23) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_3) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        resume;
    }

    bb57: {
        _34 = <Rent as Sysvar>::get() -> [return: bb20, unwind: bb55];
    }

    bb58: {
        goto -> bb47;
    }

    bb59: {
        goto -> bb47;
    }

    bb60: {
        goto -> bb47;
    }

    bb61: {
        goto -> bb47;
    }

    bb62: {
        goto -> bb47;
    }
}

fn process_instruction(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: &[u8]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug instruction_data => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _4: std::result::Result<state::address_info::AddressInfo, std::io::Error>;
    let mut _5: isize;
    let mut _7: solana_program::program_error::ProgramError;
    let mut _8: isize;
    let mut _9: isize;
    scope 1 {
        debug address_info => _6;
        let _6: state::address_info::AddressInfo;
    }

    bb0: {
        _4 = <address_info::AddressInfo as BorshDeserialize>::try_from_slice(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = discriminant(_4);
        switchInt(move _5) -> [0: bb2, 1: bb4, otherwise: bb11];
    }

    bb2: {
        _6 = move ((_4 as Ok).0: state::address_info::AddressInfo);
        _0 = create_address_info(_1, _2, move _6) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb6, 1: bb8, otherwise: bb11];
    }

    bb4: {
        drop(_4) -> [return: bb5, unwind continue];
    }

    bb5: {
        _7 = solana_program::program_error::ProgramError::InvalidInstructionData;
        _0 = Result::<(), ProgramError>::Err(move _7);
        goto -> bb6;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        resume;
    }

    bb8: {
        drop(_4) -> [return: bb6, unwind continue];
    }

    bb9 (cleanup): {
        drop(_4) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        _9 = discriminant(_4);
        switchInt(move _9) -> [0: bb7, otherwise: bb9];
    }

    bb11: {
        unreachable;
    }
}

fn address_info::<impl at src/state/address_info.rs:3:10: 3:26>::deserialize(_1: &mut &[u8]) -> Result<address_info::AddressInfo, std::io::Error> {
    debug buf => _1;
    let mut _0: std::result::Result<state::address_info::AddressInfo, std::io::Error>;
    let mut _2: state::address_info::AddressInfo;
    let mut _3: std::string::String;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::string::String>;
    let mut _5: std::result::Result<std::string::String, std::io::Error>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _8: std::string::String;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u8>;
    let mut _10: std::result::Result<u8, std::io::Error>;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _13: u8;
    let mut _14: std::string::String;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::string::String>;
    let mut _16: std::result::Result<std::string::String, std::io::Error>;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _19: std::string::String;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::string::String>;
    let mut _21: std::result::Result<std::string::String, std::io::Error>;
    let mut _22: isize;
    let _23: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _24: std::string::String;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _8;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _12;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _13;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _18;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _19;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _23;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _24;
        scope 16 {
        }
    }

    bb0: {
        _5 = <String as BorshDeserialize>::deserialize(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <Result<String, std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _8 = move ((_4 as Continue).0: std::string::String);
        _3 = move _8;
        _10 = <u8 as BorshDeserialize>::deserialize(_1) -> [return: bb6, unwind: bb28];
    }

    bb5: {
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<address_info::AddressInfo, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> [return: bb22, unwind continue];
    }

    bb6: {
        _9 = <Result<u8, std::io::Error> as Try>::branch(move _10) -> [return: bb7, unwind: bb28];
    }

    bb7: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb8, 1: bb9, otherwise: bb3];
    }

    bb8: {
        _13 = ((_9 as Continue).0: u8);
        _16 = <String as BorshDeserialize>::deserialize(_1) -> [return: bb11, unwind: bb27];
    }

    bb9: {
        _12 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<address_info::AddressInfo, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb10, unwind: bb27];
    }

    bb10: {
        drop(_3) -> [return: bb22, unwind continue];
    }

    bb11: {
        _15 = <Result<String, std::io::Error> as Try>::branch(move _16) -> [return: bb12, unwind: bb27];
    }

    bb12: {
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb13, 1: bb14, otherwise: bb3];
    }

    bb13: {
        _19 = move ((_15 as Continue).0: std::string::String);
        _14 = move _19;
        _21 = <String as BorshDeserialize>::deserialize(_1) -> [return: bb16, unwind: bb25];
    }

    bb14: {
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<address_info::AddressInfo, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _18) -> [return: bb15, unwind: bb26];
    }

    bb15: {
        drop(_3) -> [return: bb22, unwind continue];
    }

    bb16: {
        _20 = <Result<String, std::io::Error> as Try>::branch(move _21) -> [return: bb17, unwind: bb25];
    }

    bb17: {
        _22 = discriminant(_20);
        switchInt(move _22) -> [0: bb18, 1: bb19, otherwise: bb3];
    }

    bb18: {
        _24 = move ((_20 as Continue).0: std::string::String);
        _2 = address_info::AddressInfo { name: move _3, house_number: _13, street: move _14, city: move _24 };
        _0 = Result::<address_info::AddressInfo, std::io::Error>::Ok(move _2);
        goto -> bb22;
    }

    bb19: {
        _23 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<address_info::AddressInfo, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _23) -> [return: bb20, unwind: bb23];
    }

    bb20: {
        drop(_14) -> [return: bb21, unwind: bb24];
    }

    bb21: {
        drop(_3) -> [return: bb22, unwind continue];
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        drop(_14) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_3) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_14) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_3) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_3) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_3) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        resume;
    }
}

fn address_info::<impl at src/state/address_info.rs:3:28: 3:42>::serialize(_1: &address_info::AddressInfo, _2: &mut W) -> Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _4: std::result::Result<(), std::io::Error>;
    let _5: &std::string::String;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _9: std::result::Result<(), std::io::Error>;
    let _10: &u8;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _14: std::result::Result<(), std::io::Error>;
    let _15: &std::string::String;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _19: std::result::Result<(), std::io::Error>;
    let _20: &std::string::String;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, std::io::Error>;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _12;
        scope 6 {
        }
    }
    scope 7 {
        debug val => const ();
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _17;
        scope 10 {
        }
    }
    scope 11 {
        debug val => const ();
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _22;
        scope 14 {
        }
    }
    scope 15 {
        debug val => const ();
        scope 16 {
        }
    }

    bb0: {
        _5 = &((*_1).0: std::string::String);
        _4 = <String as BorshSerialize>::serialize::<W>(_5, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<(), std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _10 = &((*_1).1: u8);
        _9 = <u8 as BorshSerialize>::serialize::<W>(_10, _2) -> [return: bb6, unwind continue];
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> [return: bb18, unwind continue];
    }

    bb6: {
        _8 = <Result<(), std::io::Error> as Try>::branch(move _9) -> [return: bb7, unwind continue];
    }

    bb7: {
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb8, 1: bb9, otherwise: bb3];
    }

    bb8: {
        _15 = &((*_1).2: std::string::String);
        _14 = <String as BorshSerialize>::serialize::<W>(_15, _2) -> [return: bb10, unwind continue];
    }

    bb9: {
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb18, unwind continue];
    }

    bb10: {
        _13 = <Result<(), std::io::Error> as Try>::branch(move _14) -> [return: bb11, unwind continue];
    }

    bb11: {
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb12, 1: bb13, otherwise: bb3];
    }

    bb12: {
        _20 = &((*_1).3: std::string::String);
        _19 = <String as BorshSerialize>::serialize::<W>(_20, _2) -> [return: bb14, unwind continue];
    }

    bb13: {
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _17) -> [return: bb18, unwind continue];
    }

    bb14: {
        _18 = <Result<(), std::io::Error> as Try>::branch(move _19) -> [return: bb15, unwind continue];
    }

    bb15: {
        _21 = discriminant(_18);
        switchInt(move _21) -> [0: bb16, 1: bb17, otherwise: bb3];
    }

    bb16: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        goto -> bb18;
    }

    bb17: {
        _22 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _22) -> [return: bb18, unwind continue];
    }

    bb18: {
        return;
    }
}

fn address_info::<impl at src/state/address_info.rs:3:44: 3:49>::fmt(_1: &address_info::AddressInfo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::string::String;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &u8;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &std::string::String;
    let _13: &str;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &&std::string::String;
    let _16: &std::string::String;

    bb0: {
        _3 = const "AddressInfo";
        _4 = const "name";
        _6 = &((*_1).0: std::string::String);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "house_number";
        _9 = &((*_1).1: u8);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "street";
        _12 = &((*_1).2: std::string::String);
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = const "city";
        _16 = &((*_1).3: std::string::String);
        _15 = &_16;
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field4_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11, _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn address_info::<impl at src/state/address_info.rs:11:1: 11:17>::new(_1: String, _2: u8, _3: String, _4: String) -> address_info::AddressInfo {
    debug name => _1;
    debug house_number => _2;
    debug street => _3;
    debug city => _4;
    let mut _0: state::address_info::AddressInfo;

    bb0: {
        _0 = address_info::AddressInfo { name: move _1, house_number: _2, street: move _3, city: move _4 };
        return;
    }
}

fn entrypoint(_1: *mut u8) -> u64 {
    debug input => _1;
    let mut _0: u64;
    let _2: &solana_program::pubkey::Pubkey;
    let _3: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _4: &[u8];
    let mut _5: (&solana_program::pubkey::Pubkey, std::vec::Vec<solana_program::account_info::AccountInfo<'_>>, &[u8]);
    let mut _6: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _7: &&solana_program::pubkey::Pubkey;
    let _8: &[solana_program::account_info::AccountInfo<'_>];
    let _9: &std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _10: &&[u8];
    let mut _11: isize;
    let mut _13: &solana_program::pubkey::Pubkey;
    let mut _14: &[u8];
    scope 1 {
        debug program_id => _2;
        debug accounts => _3;
        debug instruction_data => _4;
        let _12: solana_program::program_error::ProgramError;
        scope 3 {
            debug error => _12;
        }
    }
    scope 2 {
    }

    bb0: {
        _5 = solana_program::entrypoint::deserialize::<'_>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = (_5.0: &solana_program::pubkey::Pubkey);
        _3 = move (_5.1: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>);
        _4 = (_5.2: &[u8]);
        _7 = &_2;
        _13 = deref_copy (*_7);
        _9 = &_3;
        _8 = <Vec<AccountInfo<'_>> as Deref>::deref(_9) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _10 = &_4;
        _14 = deref_copy (*_10);
        _6 = process_instruction(_13, _8, _14) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb6, 1: bb5, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _12 = move ((_6 as Err).0: solana_program::program_error::ProgramError);
        _0 = <ProgramError as Into<u64>>::into(move _12) -> [return: bb12, unwind: bb9];
    }

    bb6: {
        _0 = const solana_program::entrypoint::SUCCESS;
        goto -> bb7;
    }

    bb7: {
        drop(_3) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        goto -> bb7;
    }
}
