// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at src/lib.rs:9:10: 9:15>::fmt(_1: &TipInstruction, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &u8;
    let _5: &f64;
    let _6: &solana_program::pubkey::Pubkey;
    let _7: &str;
    let _8: &str;
    let mut _9: &dyn std::fmt::Debug;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &str;
    let mut _13: &dyn std::fmt::Debug;
    let _14: &&solana_program::pubkey::Pubkey;
    let _15: &str;
    let _16: &u64;
    let _17: &str;
    let _18: &str;
    let mut _19: &dyn std::fmt::Debug;
    let _20: &&u64;
    let _21: &u64;
    let _22: &str;
    let _23: &str;
    let mut _24: &dyn std::fmt::Debug;
    let _25: &&u64;
    scope 1 {
        debug __self_0 => _4;
        debug __self_1 => _5;
        debug __self_2 => _6;
    }
    scope 2 {
        debug __self_0 => _16;
    }
    scope 3 {
        debug __self_0 => _21;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb2, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _21 = &(((*_1) as Withdraw).0: u64);
        _22 = const "Withdraw";
        _23 = const "amount";
        _25 = &_21;
        _24 = _25 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _22, _23, move _24) -> [return: bb6, unwind continue];
    }

    bb3: {
        _4 = &(((*_1) as Initialize).0: u8);
        _5 = &(((*_1) as Initialize).1: f64);
        _6 = &(((*_1) as Initialize).2: solana_program::pubkey::Pubkey);
        _7 = const "Initialize";
        _8 = const "seed";
        _9 = _4 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "fee";
        _11 = _5 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _12 = const "fee_recipient";
        _14 = &_6;
        _13 = _14 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _7, _8, move _9, _10, move _11, _12, move _13) -> [return: bb6, unwind continue];
    }

    bb4: {
        _15 = const "CreatePool";
        _0 = Formatter::<'_>::write_str(_2, _15) -> [return: bb6, unwind continue];
    }

    bb5: {
        _16 = &(((*_1) as Tip).0: u64);
        _17 = const "Tip";
        _18 = const "amount";
        _20 = &_16;
        _19 = _20 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _17, _18, move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn <impl at src/lib.rs:9:17: 9:33>::deserialize(_1: &mut &[u8]) -> Result<TipInstruction, std::io::Error> {
    debug buf => _1;
    let mut _0: std::result::Result<TipInstruction, std::io::Error>;
    let _2: u8;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u8>;
    let mut _4: std::result::Result<u8, std::io::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _7: u8;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u8>;
    let mut _10: std::result::Result<u8, std::io::Error>;
    let mut _11: isize;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, f64>;
    let mut _15: std::result::Result<f64, std::io::Error>;
    let mut _16: isize;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, solana_program::pubkey::Pubkey>;
    let mut _20: std::result::Result<solana_program::pubkey::Pubkey, std::io::Error>;
    let mut _21: isize;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _25: std::result::Result<u64, std::io::Error>;
    let mut _26: isize;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _30: std::result::Result<u64, std::io::Error>;
    let mut _31: isize;
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let mut _37: &[core::fmt::rt::Argument<'_>];
    let _38: &[core::fmt::rt::Argument<'_>; 1];
    let _39: [core::fmt::rt::Argument<'_>; 1];
    let mut _40: core::fmt::rt::Argument<'_>;
    let _41: &u8;
    let mut _42: std::io::Error;
    let mut _43: std::io::ErrorKind;
    let mut _44: TipInstruction;
    scope 1 {
        debug variant_idx => _2;
        let _8: TipInstruction;
        let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _13: u8;
        let _17: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _18: f64;
        let _22: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _23: solana_program::pubkey::Pubkey;
        let _27: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _28: u64;
        let _32: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _33: u64;
        let _34: std::string::String;
        let mut _45: &[&str; 1];
        scope 6 {
            debug return_value => _8;
        }
        scope 7 {
            debug residual => _12;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _13;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _17;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _18;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _22;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _23;
            scope 18 {
            }
        }
        scope 19 {
            debug residual => _27;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _28;
            scope 22 {
            }
        }
        scope 23 {
            debug residual => _32;
            scope 24 {
            }
        }
        scope 25 {
            debug val => _33;
            scope 26 {
            }
        }
        scope 27 {
            debug msg => _34;
        }
        scope 28 {
            debug res => _34;
        }
    }
    scope 2 {
        debug residual => _6;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;
        scope 5 {
        }
    }

    bb0: {
        _4 = <u8 as BorshDeserialize>::deserialize(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<u8, std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = ((_3 as Continue).0: u8);
        _2 = _7;
        switchInt(_2) -> [0: bb7, 1: bb20, 2: bb21, 3: bb26, otherwise: bb6];
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<TipInstruction, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _6) -> [return: bb36, unwind continue];
    }

    bb6: {
        _45 = const <TipInstruction as borsh::BorshDeserialize>::deserialize::promoted[0];
        _36 = _45 as &[&str] (PointerCoercion(Unsize));
        _41 = &_2;
        _40 = core::fmt::rt::Argument::<'_>::new_debug::<u8>(_41) -> [return: bb31, unwind continue];
    }

    bb7: {
        _10 = <u8 as BorshDeserialize>::deserialize(_1) -> [return: bb8, unwind continue];
    }

    bb8: {
        _9 = <Result<u8, std::io::Error> as Try>::branch(move _10) -> [return: bb9, unwind continue];
    }

    bb9: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb10, 1: bb11, otherwise: bb3];
    }

    bb10: {
        _13 = ((_9 as Continue).0: u8);
        _15 = <f64 as BorshDeserialize>::deserialize(_1) -> [return: bb12, unwind continue];
    }

    bb11: {
        _12 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<TipInstruction, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb36, unwind continue];
    }

    bb12: {
        _14 = <Result<f64, std::io::Error> as Try>::branch(move _15) -> [return: bb13, unwind continue];
    }

    bb13: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb14, 1: bb15, otherwise: bb3];
    }

    bb14: {
        _18 = ((_14 as Continue).0: f64);
        _20 = <Pubkey as BorshDeserialize>::deserialize(_1) -> [return: bb16, unwind continue];
    }

    bb15: {
        _17 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<TipInstruction, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _17) -> [return: bb36, unwind continue];
    }

    bb16: {
        _19 = <Result<Pubkey, std::io::Error> as Try>::branch(move _20) -> [return: bb17, unwind continue];
    }

    bb17: {
        _21 = discriminant(_19);
        switchInt(move _21) -> [0: bb18, 1: bb19, otherwise: bb3];
    }

    bb18: {
        _23 = ((_19 as Continue).0: solana_program::pubkey::Pubkey);
        _8 = TipInstruction::Initialize { seed: _13, fee: _18, fee_recipient: _23 };
        goto -> bb35;
    }

    bb19: {
        _22 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<TipInstruction, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _22) -> [return: bb36, unwind continue];
    }

    bb20: {
        _8 = TipInstruction::CreatePool;
        goto -> bb35;
    }

    bb21: {
        _25 = <u64 as BorshDeserialize>::deserialize(_1) -> [return: bb22, unwind continue];
    }

    bb22: {
        _24 = <Result<u64, std::io::Error> as Try>::branch(move _25) -> [return: bb23, unwind continue];
    }

    bb23: {
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb24, 1: bb25, otherwise: bb3];
    }

    bb24: {
        _28 = ((_24 as Continue).0: u64);
        _8 = TipInstruction::Tip { amount: _28 };
        goto -> bb35;
    }

    bb25: {
        _27 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<TipInstruction, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _27) -> [return: bb36, unwind continue];
    }

    bb26: {
        _30 = <u64 as BorshDeserialize>::deserialize(_1) -> [return: bb27, unwind continue];
    }

    bb27: {
        _29 = <Result<u64, std::io::Error> as Try>::branch(move _30) -> [return: bb28, unwind continue];
    }

    bb28: {
        _31 = discriminant(_29);
        switchInt(move _31) -> [0: bb29, 1: bb30, otherwise: bb3];
    }

    bb29: {
        _33 = ((_29 as Continue).0: u64);
        _8 = TipInstruction::Withdraw { amount: _33 };
        goto -> bb35;
    }

    bb30: {
        _32 = move ((_29 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<TipInstruction, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _32) -> [return: bb36, unwind continue];
    }

    bb31: {
        _39 = [move _40];
        _38 = &_39;
        _37 = _38 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _35 = Arguments::<'_>::new_v1(move _36, move _37) -> [return: bb32, unwind continue];
    }

    bb32: {
        _34 = format(move _35) -> [return: bb33, unwind continue];
    }

    bb33: {
        _43 = InvalidInput;
        _42 = std::io::Error::new::<String>(move _43, move _34) -> [return: bb34, unwind continue];
    }

    bb34: {
        _0 = Result::<TipInstruction, std::io::Error>::Err(move _42);
        goto -> bb36;
    }

    bb35: {
        _44 = move _8;
        _0 = Result::<TipInstruction, std::io::Error>::Ok(move _44);
        goto -> bb36;
    }

    bb36: {
        return;
    }
}

const <impl at src/lib.rs:9:17: 9:33>::deserialize::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Unexpected variant index: "];
        _0 = &_1;
        return;
    }
}

fn <impl at src/lib.rs:9:35: 9:49>::serialize(_1: &TipInstruction, _2: &mut W) -> Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let _3: u8;
    let mut _4: isize;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _6: std::result::Result<(), std::io::Error>;
    let mut _7: &[u8];
    let _8: &[u8; 1];
    let _9: [u8; 1];
    let mut _10: u8;
    let mut _11: isize;
    let mut _13: isize;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _18: std::result::Result<(), std::io::Error>;
    let mut _19: isize;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _22: std::result::Result<(), std::io::Error>;
    let mut _23: isize;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _26: std::result::Result<(), std::io::Error>;
    let mut _27: isize;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _31: std::result::Result<(), std::io::Error>;
    let mut _32: isize;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _36: std::result::Result<(), std::io::Error>;
    let mut _37: isize;
    scope 1 {
        debug variant_idx => _3;
        let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _14: &u8;
        let _15: &f64;
        let _16: &solana_program::pubkey::Pubkey;
        let _29: &u64;
        let _34: &u64;
        scope 2 {
            debug residual => _12;
            scope 3 {
            }
        }
        scope 4 {
            debug val => const ();
            scope 5 {
            }
        }
        scope 6 {
            debug seed => _14;
            debug fee => _15;
            debug fee_recipient => _16;
            let _20: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _24: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _28: std::result::Result<std::convert::Infallible, std::io::Error>;
            scope 7 {
                debug residual => _20;
                scope 8 {
                }
            }
            scope 9 {
                debug val => const ();
                scope 10 {
                }
            }
            scope 11 {
                debug residual => _24;
                scope 12 {
                }
            }
            scope 13 {
                debug val => const ();
                scope 14 {
                }
            }
            scope 15 {
                debug residual => _28;
                scope 16 {
                }
            }
            scope 17 {
                debug val => const ();
                scope 18 {
                }
            }
        }
        scope 19 {
            debug amount => _29;
            let _33: std::result::Result<std::convert::Infallible, std::io::Error>;
            scope 20 {
                debug residual => _33;
                scope 21 {
                }
            }
            scope 22 {
                debug val => const ();
                scope 23 {
                }
            }
        }
        scope 24 {
            debug amount => _34;
            let _38: std::result::Result<std::convert::Infallible, std::io::Error>;
            scope 25 {
                debug residual => _38;
                scope 26 {
                }
            }
            scope 27 {
                debug val => const ();
                scope 28 {
                }
            }
        }
    }

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb2, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _3 = const 3_u8;
        goto -> bb6;
    }

    bb3: {
        _3 = const 0_u8;
        goto -> bb6;
    }

    bb4: {
        _3 = const 1_u8;
        goto -> bb6;
    }

    bb5: {
        _3 = const 2_u8;
        goto -> bb6;
    }

    bb6: {
        _10 = _3;
        _9 = core::num::<impl u8>::to_le_bytes(move _10) -> [return: bb7, unwind continue];
    }

    bb7: {
        _8 = &_9;
        _7 = _8 as &[u8] (PointerCoercion(Unsize));
        _6 = <W as std::io::Write>::write_all(_2, move _7) -> [return: bb8, unwind continue];
    }

    bb8: {
        _5 = <Result<(), std::io::Error> as Try>::branch(move _6) -> [return: bb9, unwind continue];
    }

    bb9: {
        _11 = discriminant(_5);
        switchInt(move _11) -> [0: bb10, 1: bb11, otherwise: bb1];
    }

    bb10: {
        _13 = discriminant((*_1));
        switchInt(move _13) -> [0: bb13, 1: bb32, 2: bb25, 3: bb12, otherwise: bb1];
    }

    bb11: {
        _12 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb33, unwind continue];
    }

    bb12: {
        _34 = &(((*_1) as Withdraw).0: u64);
        _36 = <u64 as BorshSerialize>::serialize::<W>(_34, _2) -> [return: bb29, unwind continue];
    }

    bb13: {
        _14 = &(((*_1) as Initialize).0: u8);
        _15 = &(((*_1) as Initialize).1: f64);
        _16 = &(((*_1) as Initialize).2: solana_program::pubkey::Pubkey);
        _18 = <u8 as BorshSerialize>::serialize::<W>(_14, _2) -> [return: bb14, unwind continue];
    }

    bb14: {
        _17 = <Result<(), std::io::Error> as Try>::branch(move _18) -> [return: bb15, unwind continue];
    }

    bb15: {
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb16, 1: bb17, otherwise: bb1];
    }

    bb16: {
        _22 = <f64 as BorshSerialize>::serialize::<W>(_15, _2) -> [return: bb18, unwind continue];
    }

    bb17: {
        _20 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _20) -> [return: bb33, unwind continue];
    }

    bb18: {
        _21 = <Result<(), std::io::Error> as Try>::branch(move _22) -> [return: bb19, unwind continue];
    }

    bb19: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb20, 1: bb21, otherwise: bb1];
    }

    bb20: {
        _26 = <Pubkey as BorshSerialize>::serialize::<W>(_16, _2) -> [return: bb22, unwind continue];
    }

    bb21: {
        _24 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _24) -> [return: bb33, unwind continue];
    }

    bb22: {
        _25 = <Result<(), std::io::Error> as Try>::branch(move _26) -> [return: bb23, unwind continue];
    }

    bb23: {
        _27 = discriminant(_25);
        switchInt(move _27) -> [0: bb32, 1: bb24, otherwise: bb1];
    }

    bb24: {
        _28 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _28) -> [return: bb33, unwind continue];
    }

    bb25: {
        _29 = &(((*_1) as Tip).0: u64);
        _31 = <u64 as BorshSerialize>::serialize::<W>(_29, _2) -> [return: bb26, unwind continue];
    }

    bb26: {
        _30 = <Result<(), std::io::Error> as Try>::branch(move _31) -> [return: bb27, unwind continue];
    }

    bb27: {
        _32 = discriminant(_30);
        switchInt(move _32) -> [0: bb32, 1: bb28, otherwise: bb1];
    }

    bb28: {
        _33 = move ((_30 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _33) -> [return: bb33, unwind continue];
    }

    bb29: {
        _35 = <Result<(), std::io::Error> as Try>::branch(move _36) -> [return: bb30, unwind continue];
    }

    bb30: {
        _37 = discriminant(_35);
        switchInt(move _37) -> [0: bb32, 1: bb31, otherwise: bb1];
    }

    bb31: {
        _38 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _38) -> [return: bb33, unwind continue];
    }

    bb32: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        goto -> bb33;
    }

    bb33: {
        return;
    }
}

fn <impl at src/lib.rs:52:10: 52:15>::clone(_1: &TipPool) -> TipPool {
    debug self => _1;
    let mut _0: TipPool;
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at src/lib.rs:52:23: 52:28>::fmt(_1: &TipPool, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &solana_program::pubkey::Pubkey;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &u64;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &&solana_program::pubkey::Pubkey;
    let _13: &solana_program::pubkey::Pubkey;

    bb0: {
        _3 = const "TipPool";
        _4 = const "withdraw_authority";
        _6 = &((*_1).0: solana_program::pubkey::Pubkey);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "value";
        _9 = &((*_1).1: u64);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "vault";
        _13 = &((*_1).2: solana_program::pubkey::Pubkey);
        _12 = &_13;
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/lib.rs:52:30: 52:37>::default() -> TipPool {
    let mut _0: TipPool;
    let mut _1: solana_program::pubkey::Pubkey;
    let mut _2: u64;
    let mut _3: solana_program::pubkey::Pubkey;

    bb0: {
        _1 = <Pubkey as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <u64 as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = <Pubkey as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = TipPool { withdraw_authority: move _1, value: move _2, vault: move _3 };
        return;
    }
}

fn <impl at src/lib.rs:52:39: 52:48>::eq(_1: &TipPool, _2: &TipPool) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &solana_program::pubkey::Pubkey;
    let mut _5: &solana_program::pubkey::Pubkey;
    let mut _6: bool;
    let mut _7: u64;
    let mut _8: u64;
    let mut _9: &solana_program::pubkey::Pubkey;
    let mut _10: &solana_program::pubkey::Pubkey;

    bb0: {
        _4 = &((*_1).0: solana_program::pubkey::Pubkey);
        _5 = &((*_2).0: solana_program::pubkey::Pubkey);
        _3 = <Pubkey as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        _7 = ((*_1).1: u64);
        _8 = ((*_2).1: u64);
        _6 = Eq(move _7, move _8);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _9 = &((*_1).2: solana_program::pubkey::Pubkey);
        _10 = &((*_2).2: solana_program::pubkey::Pubkey);
        _0 = <Pubkey as PartialEq>::eq(move _9, move _10) -> [return: bb5, unwind continue];
    }

    bb4: {
        _0 = const false;
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn <impl at src/lib.rs:52:50: 52:64>::serialize(_1: &TipPool, _2: &mut W) -> Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _4: std::result::Result<(), std::io::Error>;
    let _5: &solana_program::pubkey::Pubkey;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _9: std::result::Result<(), std::io::Error>;
    let _10: &u64;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _14: std::result::Result<(), std::io::Error>;
    let _15: &solana_program::pubkey::Pubkey;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, std::io::Error>;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _12;
        scope 6 {
        }
    }
    scope 7 {
        debug val => const ();
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _17;
        scope 10 {
        }
    }
    scope 11 {
        debug val => const ();
        scope 12 {
        }
    }

    bb0: {
        _5 = &((*_1).0: solana_program::pubkey::Pubkey);
        _4 = <Pubkey as BorshSerialize>::serialize::<W>(_5, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<(), std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _10 = &((*_1).1: u64);
        _9 = <u64 as BorshSerialize>::serialize::<W>(_10, _2) -> [return: bb6, unwind continue];
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> [return: bb14, unwind continue];
    }

    bb6: {
        _8 = <Result<(), std::io::Error> as Try>::branch(move _9) -> [return: bb7, unwind continue];
    }

    bb7: {
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb8, 1: bb9, otherwise: bb3];
    }

    bb8: {
        _15 = &((*_1).2: solana_program::pubkey::Pubkey);
        _14 = <Pubkey as BorshSerialize>::serialize::<W>(_15, _2) -> [return: bb10, unwind continue];
    }

    bb9: {
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb14, unwind continue];
    }

    bb10: {
        _13 = <Result<(), std::io::Error> as Try>::branch(move _14) -> [return: bb11, unwind continue];
    }

    bb11: {
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb12, 1: bb13, otherwise: bb3];
    }

    bb12: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        goto -> bb14;
    }

    bb13: {
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _17) -> [return: bb14, unwind continue];
    }

    bb14: {
        return;
    }
}

fn <impl at src/lib.rs:52:66: 52:82>::deserialize(_1: &mut &[u8]) -> Result<TipPool, std::io::Error> {
    debug buf => _1;
    let mut _0: std::result::Result<TipPool, std::io::Error>;
    let mut _2: TipPool;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, solana_program::pubkey::Pubkey>;
    let mut _4: std::result::Result<solana_program::pubkey::Pubkey, std::io::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _7: solana_program::pubkey::Pubkey;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _9: std::result::Result<u64, std::io::Error>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _12: u64;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, solana_program::pubkey::Pubkey>;
    let mut _14: std::result::Result<solana_program::pubkey::Pubkey, std::io::Error>;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _17: solana_program::pubkey::Pubkey;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _11;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _12;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _16;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _17;
        scope 12 {
        }
    }

    bb0: {
        _4 = <Pubkey as BorshDeserialize>::deserialize(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<Pubkey, std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = ((_3 as Continue).0: solana_program::pubkey::Pubkey);
        _9 = <u64 as BorshDeserialize>::deserialize(_1) -> [return: bb6, unwind continue];
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<TipPool, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _6) -> [return: bb14, unwind continue];
    }

    bb6: {
        _8 = <Result<u64, std::io::Error> as Try>::branch(move _9) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb8, 1: bb9, otherwise: bb3];
    }

    bb8: {
        _12 = ((_8 as Continue).0: u64);
        _14 = <Pubkey as BorshDeserialize>::deserialize(_1) -> [return: bb10, unwind continue];
    }

    bb9: {
        _11 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<TipPool, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _11) -> [return: bb14, unwind continue];
    }

    bb10: {
        _13 = <Result<Pubkey, std::io::Error> as Try>::branch(move _14) -> [return: bb11, unwind continue];
    }

    bb11: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb12, 1: bb13, otherwise: bb3];
    }

    bb12: {
        _17 = ((_13 as Continue).0: solana_program::pubkey::Pubkey);
        _2 = TipPool { withdraw_authority: _7, value: _12, vault: _17 };
        _0 = Result::<TipPool, std::io::Error>::Ok(move _2);
        goto -> bb14;
    }

    bb13: {
        _16 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<TipPool, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _16) -> [return: bb14, unwind continue];
    }

    bb14: {
        return;
    }
}

const TIP_POOL_LEN: u64 = {
    let mut _0: u64;
    let mut _1: u64;
    let mut _2: (u64, bool);
    let mut _3: (u64, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedAdd(const 32_u64, const 8_u64);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const 32_u64, const 8_u64) -> [success: bb1, unwind continue];
    }

    bb1: {
        _1 = move (_2.0: u64);
        _3 = CheckedAdd(_1, const 32_u64);
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", move _1, const 32_u64) -> [success: bb2, unwind continue];
    }

    bb2: {
        _0 = move (_3.0: u64);
        StorageDead(_1);
        return;
    }
}

fn <impl at src/lib.rs:62:10: 62:15>::clone(_1: &Vault) -> Vault {
    debug self => _1;
    let mut _0: Vault;
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at src/lib.rs:62:23: 62:28>::fmt(_1: &Vault, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &solana_program::pubkey::Pubkey;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &f64;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &solana_program::pubkey::Pubkey;
    let _13: &str;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &&u8;
    let _16: &u8;

    bb0: {
        _3 = const "Vault";
        _4 = const "creator";
        _6 = &((*_1).0: solana_program::pubkey::Pubkey);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "fee";
        _9 = &((*_1).1: f64);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "fee_recipient";
        _12 = &((*_1).2: solana_program::pubkey::Pubkey);
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = const "seed";
        _16 = &((*_1).3: u8);
        _15 = &_16;
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field4_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11, _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/lib.rs:62:30: 62:37>::default() -> Vault {
    let mut _0: Vault;
    let mut _1: solana_program::pubkey::Pubkey;
    let mut _2: f64;
    let mut _3: solana_program::pubkey::Pubkey;
    let mut _4: u8;

    bb0: {
        _1 = <Pubkey as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <f64 as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = <Pubkey as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = <u8 as Default>::default() -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Vault { creator: move _1, fee: move _2, fee_recipient: move _3, seed: move _4 };
        return;
    }
}

fn <impl at src/lib.rs:62:39: 62:48>::eq(_1: &Vault, _2: &Vault) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &solana_program::pubkey::Pubkey;
    let mut _5: &solana_program::pubkey::Pubkey;
    let mut _6: bool;
    let mut _7: f64;
    let mut _8: f64;
    let mut _9: bool;
    let mut _10: &solana_program::pubkey::Pubkey;
    let mut _11: &solana_program::pubkey::Pubkey;
    let mut _12: u8;
    let mut _13: u8;

    bb0: {
        _4 = &((*_1).0: solana_program::pubkey::Pubkey);
        _5 = &((*_2).0: solana_program::pubkey::Pubkey);
        _3 = <Pubkey as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb6, otherwise: bb2];
    }

    bb2: {
        _7 = ((*_1).1: f64);
        _8 = ((*_2).1: f64);
        _6 = Eq(move _7, move _8);
        switchInt(move _6) -> [0: bb6, otherwise: bb3];
    }

    bb3: {
        _10 = &((*_1).2: solana_program::pubkey::Pubkey);
        _11 = &((*_2).2: solana_program::pubkey::Pubkey);
        _9 = <Pubkey as PartialEq>::eq(move _10, move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _9) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _12 = ((*_1).3: u8);
        _13 = ((*_2).3: u8);
        _0 = Eq(move _12, move _13);
        goto -> bb7;
    }

    bb6: {
        _0 = const false;
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn <impl at src/lib.rs:62:50: 62:64>::serialize(_1: &Vault, _2: &mut W) -> Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _4: std::result::Result<(), std::io::Error>;
    let _5: &solana_program::pubkey::Pubkey;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _9: std::result::Result<(), std::io::Error>;
    let _10: &f64;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _14: std::result::Result<(), std::io::Error>;
    let _15: &solana_program::pubkey::Pubkey;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _19: std::result::Result<(), std::io::Error>;
    let _20: &u8;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, std::io::Error>;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _12;
        scope 6 {
        }
    }
    scope 7 {
        debug val => const ();
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _17;
        scope 10 {
        }
    }
    scope 11 {
        debug val => const ();
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _22;
        scope 14 {
        }
    }
    scope 15 {
        debug val => const ();
        scope 16 {
        }
    }

    bb0: {
        _5 = &((*_1).0: solana_program::pubkey::Pubkey);
        _4 = <Pubkey as BorshSerialize>::serialize::<W>(_5, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<(), std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _10 = &((*_1).1: f64);
        _9 = <f64 as BorshSerialize>::serialize::<W>(_10, _2) -> [return: bb6, unwind continue];
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> [return: bb18, unwind continue];
    }

    bb6: {
        _8 = <Result<(), std::io::Error> as Try>::branch(move _9) -> [return: bb7, unwind continue];
    }

    bb7: {
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb8, 1: bb9, otherwise: bb3];
    }

    bb8: {
        _15 = &((*_1).2: solana_program::pubkey::Pubkey);
        _14 = <Pubkey as BorshSerialize>::serialize::<W>(_15, _2) -> [return: bb10, unwind continue];
    }

    bb9: {
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb18, unwind continue];
    }

    bb10: {
        _13 = <Result<(), std::io::Error> as Try>::branch(move _14) -> [return: bb11, unwind continue];
    }

    bb11: {
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb12, 1: bb13, otherwise: bb3];
    }

    bb12: {
        _20 = &((*_1).3: u8);
        _19 = <u8 as BorshSerialize>::serialize::<W>(_20, _2) -> [return: bb14, unwind continue];
    }

    bb13: {
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _17) -> [return: bb18, unwind continue];
    }

    bb14: {
        _18 = <Result<(), std::io::Error> as Try>::branch(move _19) -> [return: bb15, unwind continue];
    }

    bb15: {
        _21 = discriminant(_18);
        switchInt(move _21) -> [0: bb16, 1: bb17, otherwise: bb3];
    }

    bb16: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        goto -> bb18;
    }

    bb17: {
        _22 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _22) -> [return: bb18, unwind continue];
    }

    bb18: {
        return;
    }
}

fn <impl at src/lib.rs:62:66: 62:82>::deserialize(_1: &mut &[u8]) -> Result<Vault, std::io::Error> {
    debug buf => _1;
    let mut _0: std::result::Result<Vault, std::io::Error>;
    let mut _2: Vault;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, solana_program::pubkey::Pubkey>;
    let mut _4: std::result::Result<solana_program::pubkey::Pubkey, std::io::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _7: solana_program::pubkey::Pubkey;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, f64>;
    let mut _9: std::result::Result<f64, std::io::Error>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _12: f64;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, solana_program::pubkey::Pubkey>;
    let mut _14: std::result::Result<solana_program::pubkey::Pubkey, std::io::Error>;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _17: solana_program::pubkey::Pubkey;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u8>;
    let mut _19: std::result::Result<u8, std::io::Error>;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _22: u8;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _11;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _12;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _16;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _17;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _21;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _22;
        scope 16 {
        }
    }

    bb0: {
        _4 = <Pubkey as BorshDeserialize>::deserialize(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<Pubkey, std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = ((_3 as Continue).0: solana_program::pubkey::Pubkey);
        _9 = <f64 as BorshDeserialize>::deserialize(_1) -> [return: bb6, unwind continue];
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<Vault, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _6) -> [return: bb18, unwind continue];
    }

    bb6: {
        _8 = <Result<f64, std::io::Error> as Try>::branch(move _9) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb8, 1: bb9, otherwise: bb3];
    }

    bb8: {
        _12 = ((_8 as Continue).0: f64);
        _14 = <Pubkey as BorshDeserialize>::deserialize(_1) -> [return: bb10, unwind continue];
    }

    bb9: {
        _11 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<Vault, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _11) -> [return: bb18, unwind continue];
    }

    bb10: {
        _13 = <Result<Pubkey, std::io::Error> as Try>::branch(move _14) -> [return: bb11, unwind continue];
    }

    bb11: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb12, 1: bb13, otherwise: bb3];
    }

    bb12: {
        _17 = ((_13 as Continue).0: solana_program::pubkey::Pubkey);
        _19 = <u8 as BorshDeserialize>::deserialize(_1) -> [return: bb14, unwind continue];
    }

    bb13: {
        _16 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<Vault, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _16) -> [return: bb18, unwind continue];
    }

    bb14: {
        _18 = <Result<u8, std::io::Error> as Try>::branch(move _19) -> [return: bb15, unwind continue];
    }

    bb15: {
        _20 = discriminant(_18);
        switchInt(move _20) -> [0: bb16, 1: bb17, otherwise: bb3];
    }

    bb16: {
        _22 = ((_18 as Continue).0: u8);
        _2 = Vault { creator: _7, fee: _12, fee_recipient: _17, seed: _22 };
        _0 = Result::<Vault, std::io::Error>::Ok(move _2);
        goto -> bb18;
    }

    bb17: {
        _21 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<Vault, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _21) -> [return: bb18, unwind continue];
    }

    bb18: {
        return;
    }
}

const VAULT_LEN: u64 = {
    let mut _0: u64;
    let mut _1: u64;
    let mut _2: u64;
    let mut _3: (u64, bool);
    let mut _4: (u64, bool);
    let mut _5: (u64, bool);

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _3 = CheckedAdd(const 32_u64, const 8_u64);
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", const 32_u64, const 8_u64) -> [success: bb1, unwind continue];
    }

    bb1: {
        _2 = move (_3.0: u64);
        _4 = CheckedAdd(_2, const 32_u64);
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, const 32_u64) -> [success: bb2, unwind continue];
    }

    bb2: {
        _1 = move (_4.0: u64);
        StorageDead(_2);
        _5 = CheckedAdd(_1, const 1_u64);
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _1, const 1_u64) -> [success: bb3, unwind continue];
    }

    bb3: {
        _0 = move (_5.0: u64);
        StorageDead(_1);
        return;
    }
}

fn process_instruction(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: &[u8]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug instruction_data => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, TipInstruction>;
    let mut _5: std::result::Result<TipInstruction, std::io::Error>;
    let mut _6: &mut &[u8];
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _9: TipInstruction;
    let mut _10: isize;
    let _11: u8;
    let _12: f64;
    let _13: solana_program::pubkey::Pubkey;
    let _14: u64;
    let _15: u64;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _9;
        scope 4 {
        }
    }
    scope 5 {
        debug seed => _11;
        debug fee => _12;
        debug fee_recipient => _13;
    }
    scope 6 {
        debug amount => _14;
    }
    scope 7 {
        debug amount => _15;
    }

    bb0: {
        _6 = &mut _3;
        _5 = <TipInstruction as BorshDeserialize>::deserialize(_6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <Result<TipInstruction, std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _9 = move ((_4 as Continue).0: TipInstruction);
        _10 = discriminant(_9);
        switchInt(move _10) -> [0: bb7, 1: bb6, 2: bb8, 3: bb9, otherwise: bb3];
    }

    bb5: {
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _8) -> [return: bb10, unwind continue];
    }

    bb6: {
        _0 = processor::create_pool(_1, _2) -> [return: bb10, unwind continue];
    }

    bb7: {
        _11 = ((_9 as Initialize).0: u8);
        _12 = ((_9 as Initialize).1: f64);
        _13 = ((_9 as Initialize).2: solana_program::pubkey::Pubkey);
        _0 = processor::initialize(_1, _2, _11, _12, _13) -> [return: bb10, unwind continue];
    }

    bb8: {
        _14 = ((_9 as Tip).0: u64);
        _0 = processor::tip(_1, _2, _14) -> [return: bb10, unwind continue];
    }

    bb9: {
        _15 = ((_9 as Withdraw).0: u64);
        _0 = processor::withdraw(_1, _2, _15) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }
}

fn processor::initialize(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: u8, _4: f64, _5: Pubkey) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug seed => _3;
    debug fee => _4;
    debug fee_recipient => _5;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _6: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _7: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _9: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _10: isize;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _14: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _15: isize;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _19: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _20: isize;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::rent::Rent>;
    let mut _24: std::result::Result<solana_program::rent::Rent, solana_program::program_error::ProgramError>;
    let mut _25: isize;
    let mut _29: std::result::Result<solana_program::pubkey::Pubkey, solana_program::pubkey::PubkeyError>;
    let mut _30: &[&[u8]];
    let _31: &[&[u8]; 1];
    let _32: [&[u8]; 1];
    let mut _33: &[u8];
    let _34: &[u8; 1];
    let _35: [u8; 1];
    let mut _36: bool;
    let mut _37: &solana_program::pubkey::Pubkey;
    let mut _38: !;
    let mut _39: bool;
    let _40: !;
    let mut _41: bool;
    let mut _42: !;
    let mut _44: solana_program::pubkey::Pubkey;
    let _45: ();
    let mut _46: std::result::Result<(), std::io::Error>;
    let mut _47: &Vault;
    let mut _48: &mut &mut [u8];
    let mut _49: &mut [u8];
    let mut _50: &mut [u8];
    let mut _51: &mut &mut [u8];
    let mut _52: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _53: std::cell::RefMut<'_, &mut [u8]>;
    let _54: &std::cell::RefCell<&mut [u8]>;
    let mut _55: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _56: &solana_program::pubkey::Pubkey;
    let mut _57: &solana_program::pubkey::Pubkey;
    let mut _58: &mut [u8];
    scope 1 {
        debug account_info_iter => _6;
        let _11: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _12: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug vault_info => _12;
            let _16: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _17: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug initializer_info => _17;
                let _21: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _22: &solana_program::account_info::AccountInfo<'_>;
                scope 12 {
                    debug rent_info => _22;
                    let _26: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _27: solana_program::rent::Rent;
                    scope 17 {
                        debug rent => _27;
                        let _28: solana_program::pubkey::Pubkey;
                        scope 22 {
                            debug vault_address => _28;
                            let _43: Vault;
                            scope 23 {
                                debug vault => _43;
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _26;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _27;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _21;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _22;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _16;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _17;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _11;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _12;
            scope 6 {
            }
        }
    }

    bb0: {
        _7 = core::slice::<impl [AccountInfo<'_>]>::iter(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &mut _7;
        _9 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb5, 1: bb6, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _12 = ((_8 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _14 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _11 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _11) -> [return: bb36, unwind continue];
    }

    bb7: {
        _13 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _14) -> [return: bb8, unwind continue];
    }

    bb8: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _17 = ((_13 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _19 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_6) -> [return: bb11, unwind continue];
    }

    bb10: {
        _16 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _16) -> [return: bb36, unwind continue];
    }

    bb11: {
        _18 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _19) -> [return: bb12, unwind continue];
    }

    bb12: {
        _20 = discriminant(_18);
        switchInt(move _20) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        _22 = ((_18 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _24 = <Rent as Sysvar>::from_account_info(_22) -> [return: bb15, unwind continue];
    }

    bb14: {
        _21 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _21) -> [return: bb36, unwind continue];
    }

    bb15: {
        _23 = <Result<Rent, ProgramError> as Try>::branch(move _24) -> [return: bb16, unwind continue];
    }

    bb16: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        _27 = move ((_23 as Continue).0: solana_program::rent::Rent);
        _35 = [_3];
        _34 = &_35;
        _33 = _34 as &[u8] (PointerCoercion(Unsize));
        _32 = [move _33];
        _31 = &_32;
        _30 = _31 as &[&[u8]] (PointerCoercion(Unsize));
        _29 = Pubkey::create_program_address(move _30, _1) -> [return: bb19, unwind continue];
    }

    bb18: {
        _26 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _26) -> [return: bb36, unwind continue];
    }

    bb19: {
        _28 = Result::<Pubkey, PubkeyError>::unwrap(move _29) -> [return: bb20, unwind continue];
    }

    bb20: {
        _56 = deref_copy ((*_12).0: &solana_program::pubkey::Pubkey);
        _37 = &_28;
        _36 = <Pubkey as PartialEq>::ne(_56, move _37) -> [return: bb21, unwind continue];
    }

    bb21: {
        switchInt(move _36) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _38 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb23: {
        _39 = AccountInfo::<'_>::data_is_empty(_12) -> [return: bb24, unwind continue];
    }

    bb24: {
        switchInt(move _39) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _41 = ((*_17).5: bool);
        switchInt(move _41) -> [0: bb28, otherwise: bb27];
    }

    bb26: {
        _40 = begin_panic::<&str>(const "vault info must be empty account!") -> unwind continue;
    }

    bb27: {
        _57 = deref_copy ((*_17).0: &solana_program::pubkey::Pubkey);
        _44 = (*_57);
        _43 = Vault { creator: move _44, fee: _4, fee_recipient: _5, seed: _3 };
        _47 = &_43;
        _55 = &((*_12).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _54 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _55) -> [return: bb29, unwind continue];
    }

    bb28: {
        _42 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb29: {
        _53 = RefCell::<&mut [u8]>::borrow_mut(_54) -> [return: bb30, unwind continue];
    }

    bb30: {
        _52 = &mut _53;
        _51 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _52) -> [return: bb31, unwind: bb37];
    }

    bb31: {
        _58 = deref_copy (*_51);
        _50 = <[u8] as IndexMut<RangeFull>>::index_mut(_58, const RangeFull) -> [return: bb32, unwind: bb37];
    }

    bb32: {
        _49 = _50;
        _48 = &mut _49;
        _46 = <Vault as BorshSerialize>::serialize::<&mut [u8]>(move _47, _48) -> [return: bb33, unwind: bb37];
    }

    bb33: {
        _45 = Result::<(), std::io::Error>::unwrap(move _46) -> [return: bb34, unwind: bb37];
    }

    bb34: {
        drop(_53) -> [return: bb35, unwind continue];
    }

    bb35: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        goto -> bb36;
    }

    bb36: {
        return;
    }

    bb37 (cleanup): {
        drop(_53) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        resume;
    }
}

fn processor::create_pool(_1: &Pubkey, _2: &[AccountInfo<'_>]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _3: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _4: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _6: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _7: isize;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _11: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _12: isize;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _16: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _17: isize;
    let mut _20: bool;
    let mut _21: &&solana_program::pubkey::Pubkey;
    let mut _22: &&solana_program::pubkey::Pubkey;
    let mut _23: !;
    let mut _24: bool;
    let _25: !;
    let mut _26: bool;
    let mut _27: &&solana_program::pubkey::Pubkey;
    let mut _28: &&solana_program::pubkey::Pubkey;
    let mut _29: !;
    let mut _30: bool;
    let mut _31: &mut std::slice::IterMut<'_, u8>;
    let mut _32: std::slice::IterMut<'_, u8>;
    let mut _33: &mut &mut [u8];
    let mut _34: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _35: std::cell::RefMut<'_, &mut [u8]>;
    let _36: &std::cell::RefCell<&mut [u8]>;
    let mut _37: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _38: solana_program::program_error::ProgramError;
    let mut _40: solana_program::pubkey::Pubkey;
    let mut _41: solana_program::pubkey::Pubkey;
    let _42: ();
    let mut _43: std::result::Result<(), std::io::Error>;
    let mut _44: &TipPool;
    let mut _45: &mut &mut [u8];
    let mut _46: &mut [u8];
    let mut _47: &mut [u8];
    let mut _48: &mut &mut [u8];
    let mut _49: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _50: std::cell::RefMut<'_, &mut [u8]>;
    let _51: &std::cell::RefCell<&mut [u8]>;
    let mut _52: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _53: &mut [u8];
    let mut _54: &solana_program::pubkey::Pubkey;
    let mut _55: &solana_program::pubkey::Pubkey;
    let mut _56: &mut [u8];
    scope 1 {
        debug account_info_iter => _3;
        let _8: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _9: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug vault_info => _9;
            let _13: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _14: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug withdraw_authority_info => _14;
                let _18: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _19: &solana_program::account_info::AccountInfo<'_>;
                scope 12 {
                    debug pool_info => _19;
                    let _39: TipPool;
                    scope 17 {
                        debug pool => _39;
                    }
                }
                scope 13 {
                    debug residual => _18;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _19;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _13;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _14;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _8;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _9;
            scope 6 {
            }
        }
    }

    bb0: {
        _4 = core::slice::<impl [AccountInfo<'_>]>::iter(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &mut _4;
        _6 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb5, 1: bb6, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _9 = ((_5 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _11 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_3) -> [return: bb7, unwind continue];
    }

    bb6: {
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _8) -> [return: bb39, unwind continue];
    }

    bb7: {
        _10 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _11) -> [return: bb8, unwind continue];
    }

    bb8: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _14 = ((_10 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _16 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_3) -> [return: bb11, unwind continue];
    }

    bb10: {
        _13 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _13) -> [return: bb39, unwind continue];
    }

    bb11: {
        _15 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _16) -> [return: bb12, unwind continue];
    }

    bb12: {
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        _19 = ((_15 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _21 = &((*_9).3: &solana_program::pubkey::Pubkey);
        _22 = &_1;
        _20 = <&Pubkey as PartialEq>::ne(move _21, move _22) -> [return: bb15, unwind continue];
    }

    bb14: {
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _18) -> [return: bb39, unwind continue];
    }

    bb15: {
        switchInt(move _20) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _23 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb17: {
        _24 = ((*_14).5: bool);
        switchInt(move _24) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _27 = &((*_19).3: &solana_program::pubkey::Pubkey);
        _28 = &_1;
        _26 = <&Pubkey as PartialEq>::ne(move _27, move _28) -> [return: bb20, unwind continue];
    }

    bb19: {
        _25 = begin_panic::<&str>(const "withdraw authority must sign!") -> unwind continue;
    }

    bb20: {
        switchInt(move _26) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _29 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb22: {
        _37 = &((*_19).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _36 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _37) -> [return: bb23, unwind continue];
    }

    bb23: {
        _35 = RefCell::<&mut [u8]>::borrow_mut(_36) -> [return: bb24, unwind continue];
    }

    bb24: {
        _34 = &mut _35;
        _33 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _34) -> [return: bb25, unwind: bb41];
    }

    bb25: {
        _53 = deref_copy (*_33);
        _32 = <&mut [u8] as IntoIterator>::into_iter(_53) -> [return: bb26, unwind: bb41];
    }

    bb26: {
        _31 = &mut _32;
        _30 = <std::slice::IterMut<'_, u8> as Iterator>::any::<{closure@src/processor.rs:92:52: 92:55}>(move _31, const ZeroSized: {closure@src/processor.rs:92:52: 92:55}) -> [return: bb27, unwind: bb41];
    }

    bb27: {
        switchInt(move _30) -> [0: bb30, otherwise: bb28];
    }

    bb28: {
        drop(_35) -> [return: bb29, unwind continue];
    }

    bb29: {
        _38 = solana_program::program_error::ProgramError::AccountAlreadyInitialized;
        _0 = Result::<(), ProgramError>::Err(move _38);
        goto -> bb39;
    }

    bb30: {
        drop(_35) -> [return: bb31, unwind continue];
    }

    bb31: {
        _54 = deref_copy ((*_14).0: &solana_program::pubkey::Pubkey);
        _40 = (*_54);
        _55 = deref_copy ((*_9).0: &solana_program::pubkey::Pubkey);
        _41 = (*_55);
        _39 = TipPool { withdraw_authority: move _40, value: const 0_u64, vault: move _41 };
        _44 = &_39;
        _52 = &((*_19).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _51 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _52) -> [return: bb32, unwind continue];
    }

    bb32: {
        _50 = RefCell::<&mut [u8]>::borrow_mut(_51) -> [return: bb33, unwind continue];
    }

    bb33: {
        _49 = &mut _50;
        _48 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _49) -> [return: bb34, unwind: bb40];
    }

    bb34: {
        _56 = deref_copy (*_48);
        _47 = <[u8] as IndexMut<RangeFull>>::index_mut(_56, const RangeFull) -> [return: bb35, unwind: bb40];
    }

    bb35: {
        _46 = _47;
        _45 = &mut _46;
        _43 = <TipPool as BorshSerialize>::serialize::<&mut [u8]>(move _44, _45) -> [return: bb36, unwind: bb40];
    }

    bb36: {
        _42 = Result::<(), std::io::Error>::unwrap(move _43) -> [return: bb37, unwind: bb40];
    }

    bb37: {
        drop(_50) -> [return: bb38, unwind continue];
    }

    bb38: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        goto -> bb39;
    }

    bb39: {
        return;
    }

    bb40 (cleanup): {
        drop(_50) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_35) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        resume;
    }
}

fn processor::create_pool::{closure#0}(_1: &mut {closure@src/processor.rs:92:52: 92:55}, _2: &mut u8) -> bool {
    debug b => _2;
    let mut _0: bool;
    let mut _3: u8;

    bb0: {
        _3 = (*_2);
        _0 = Ne(move _3, const 0_u8);
        return;
    }
}

fn processor::tip(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: u64) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug amount => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _5: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _7: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _8: isize;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _12: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _13: isize;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _17: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _18: isize;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, TipPool>;
    let mut _23: std::result::Result<TipPool, std::io::Error>;
    let mut _24: &mut &[u8];
    let mut _25: &[u8];
    let _26: &[u8];
    let mut _27: &[u8];
    let _28: &&mut [u8];
    let mut _29: &std::cell::RefMut<'_, &mut [u8]>;
    let _30: std::cell::RefMut<'_, &mut [u8]>;
    let _31: &std::cell::RefCell<&mut [u8]>;
    let mut _32: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _33: isize;
    let mut _36: bool;
    let mut _37: &&solana_program::pubkey::Pubkey;
    let mut _38: &&solana_program::pubkey::Pubkey;
    let mut _39: !;
    let mut _40: bool;
    let mut _41: &&solana_program::pubkey::Pubkey;
    let mut _42: &&solana_program::pubkey::Pubkey;
    let mut _43: !;
    let mut _44: bool;
    let mut _45: &solana_program::pubkey::Pubkey;
    let mut _46: !;
    let mut _47: std::option::Option<u64>;
    let mut _48: u64;
    let mut _49: isize;
    let mut _51: solana_program::program_error::ProgramError;
    let _52: ();
    let mut _53: std::result::Result<(), std::io::Error>;
    let mut _54: &TipPool;
    let mut _55: &mut &mut [u8];
    let mut _56: &mut [u8];
    let mut _57: &mut [u8];
    let mut _58: &mut &mut [u8];
    let mut _59: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _60: std::cell::RefMut<'_, &mut [u8]>;
    let _61: &std::cell::RefCell<&mut [u8]>;
    let mut _62: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _63: &mut [u8];
    let mut _64: &solana_program::pubkey::Pubkey;
    let mut _65: &mut [u8];
    scope 1 {
        debug account_info_iter => _4;
        let _9: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _10: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug vault_info => _10;
            let _14: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _15: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug pool_info => _15;
                let _19: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _20: &solana_program::account_info::AccountInfo<'_>;
                scope 12 {
                    debug source_info => _20;
                    let mut _21: TipPool;
                    let _34: std::result::Result<std::convert::Infallible, std::io::Error>;
                    let _35: TipPool;
                    scope 17 {
                        debug pool => _21;
                        let _50: u64;
                        scope 22 {
                            debug v => _50;
                        }
                    }
                    scope 18 {
                        debug residual => _34;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _35;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _19;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _20;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _14;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _15;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _9;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _10;
            scope 6 {
            }
        }
    }

    bb0: {
        _5 = core::slice::<impl [AccountInfo<'_>]>::iter(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _7 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _10 = ((_6 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _12 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb7, unwind continue];
    }

    bb6: {
        _9 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _9) -> [return: bb44, unwind continue];
    }

    bb7: {
        _11 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _12) -> [return: bb8, unwind continue];
    }

    bb8: {
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _15 = ((_11 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _17 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb11, unwind continue];
    }

    bb10: {
        _14 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _14) -> [return: bb44, unwind continue];
    }

    bb11: {
        _16 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _17) -> [return: bb12, unwind continue];
    }

    bb12: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        _20 = ((_16 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _32 = &((*_15).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _31 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _32) -> [return: bb15, unwind continue];
    }

    bb14: {
        _19 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _19) -> [return: bb44, unwind continue];
    }

    bb15: {
        _30 = RefCell::<&mut [u8]>::borrow_mut(_31) -> [return: bb16, unwind continue];
    }

    bb16: {
        _29 = &_30;
        _28 = <RefMut<'_, &mut [u8]> as Deref>::deref(move _29) -> [return: bb17, unwind: bb46];
    }

    bb17: {
        _63 = deref_copy (*_28);
        _27 = &(*_63);
        _26 = <[u8] as Index<RangeFull>>::index(move _27, const RangeFull) -> [return: bb18, unwind: bb46];
    }

    bb18: {
        _25 = _26;
        _24 = &mut _25;
        _23 = <TipPool as BorshDeserialize>::deserialize(_24) -> [return: bb19, unwind: bb46];
    }

    bb19: {
        _22 = <Result<TipPool, std::io::Error> as Try>::branch(move _23) -> [return: bb20, unwind: bb46];
    }

    bb20: {
        _33 = discriminant(_22);
        switchInt(move _33) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        _35 = ((_22 as Continue).0: TipPool);
        _21 = _35;
        drop(_30) -> [return: bb24, unwind continue];
    }

    bb22: {
        _34 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _34) -> [return: bb23, unwind: bb46];
    }

    bb23: {
        drop(_30) -> [return: bb44, unwind continue];
    }

    bb24: {
        _37 = &((*_10).3: &solana_program::pubkey::Pubkey);
        _38 = &_1;
        _36 = <&Pubkey as PartialEq>::ne(move _37, move _38) -> [return: bb25, unwind continue];
    }

    bb25: {
        switchInt(move _36) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _39 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb27: {
        _41 = &((*_15).3: &solana_program::pubkey::Pubkey);
        _42 = &_1;
        _40 = <&Pubkey as PartialEq>::ne(move _41, move _42) -> [return: bb28, unwind continue];
    }

    bb28: {
        switchInt(move _40) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _43 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb30: {
        _45 = &(_21.2: solana_program::pubkey::Pubkey);
        _64 = deref_copy ((*_10).0: &solana_program::pubkey::Pubkey);
        _44 = <Pubkey as PartialEq>::ne(move _45, _64) -> [return: bb31, unwind continue];
    }

    bb31: {
        switchInt(move _44) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _46 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb33: {
        _48 = (_21.1: u64);
        _47 = core::num::<impl u64>::checked_add(move _48, _3) -> [return: bb34, unwind continue];
    }

    bb34: {
        _49 = discriminant(_47);
        switchInt(move _49) -> [0: bb35, 1: bb36, otherwise: bb4];
    }

    bb35: {
        _51 = solana_program::program_error::ProgramError::InvalidArgument;
        _0 = Result::<(), ProgramError>::Err(move _51);
        goto -> bb44;
    }

    bb36: {
        _50 = ((_47 as Some).0: u64);
        (_21.1: u64) = _50;
        _54 = &_21;
        _62 = &((*_15).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _61 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _62) -> [return: bb37, unwind continue];
    }

    bb37: {
        _60 = RefCell::<&mut [u8]>::borrow_mut(_61) -> [return: bb38, unwind continue];
    }

    bb38: {
        _59 = &mut _60;
        _58 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _59) -> [return: bb39, unwind: bb45];
    }

    bb39: {
        _65 = deref_copy (*_58);
        _57 = <[u8] as IndexMut<RangeFull>>::index_mut(_65, const RangeFull) -> [return: bb40, unwind: bb45];
    }

    bb40: {
        _56 = _57;
        _55 = &mut _56;
        _53 = <TipPool as BorshSerialize>::serialize::<&mut [u8]>(move _54, _55) -> [return: bb41, unwind: bb45];
    }

    bb41: {
        _52 = Result::<(), std::io::Error>::unwrap(move _53) -> [return: bb42, unwind: bb45];
    }

    bb42: {
        drop(_60) -> [return: bb43, unwind continue];
    }

    bb43: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        goto -> bb44;
    }

    bb44: {
        return;
    }

    bb45 (cleanup): {
        drop(_60) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_30) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        resume;
    }
}

fn processor::withdraw(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: u64) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug amount => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _5: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _7: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _8: isize;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _12: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _13: isize;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _17: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _18: isize;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, TipPool>;
    let mut _23: std::result::Result<TipPool, std::io::Error>;
    let mut _24: &mut &[u8];
    let mut _25: &[u8];
    let _26: &[u8];
    let mut _27: &[u8];
    let _28: &&mut [u8];
    let mut _29: &std::cell::RefMut<'_, &mut [u8]>;
    let _30: std::cell::RefMut<'_, &mut [u8]>;
    let _31: &std::cell::RefCell<&mut [u8]>;
    let mut _32: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _33: isize;
    let mut _36: bool;
    let mut _37: &&solana_program::pubkey::Pubkey;
    let mut _38: &&solana_program::pubkey::Pubkey;
    let mut _39: !;
    let mut _40: bool;
    let mut _41: &&solana_program::pubkey::Pubkey;
    let mut _42: &&solana_program::pubkey::Pubkey;
    let mut _43: !;
    let mut _44: bool;
    let _45: !;
    let mut _46: bool;
    let mut _47: &solana_program::pubkey::Pubkey;
    let mut _48: !;
    let mut _49: bool;
    let mut _50: &solana_program::pubkey::Pubkey;
    let mut _51: !;
    let mut _52: std::option::Option<u64>;
    let mut _53: u64;
    let mut _54: isize;
    let mut _56: solana_program::program_error::ProgramError;
    let mut _57: &mut &mut u64;
    let mut _58: &mut std::cell::RefMut<'_, &mut u64>;
    let mut _59: std::cell::RefMut<'_, &mut u64>;
    let _60: &std::cell::RefCell<&mut u64>;
    let mut _61: &std::rc::Rc<std::cell::RefCell<&mut u64>>;
    let mut _62: &mut &mut u64;
    let mut _63: &mut std::cell::RefMut<'_, &mut u64>;
    let mut _64: std::cell::RefMut<'_, &mut u64>;
    let _65: &std::cell::RefCell<&mut u64>;
    let mut _66: &std::rc::Rc<std::cell::RefCell<&mut u64>>;
    let _67: ();
    let mut _68: std::result::Result<(), std::io::Error>;
    let mut _69: &TipPool;
    let mut _70: &mut &mut [u8];
    let mut _71: &mut [u8];
    let mut _72: &mut [u8];
    let mut _73: &mut &mut [u8];
    let mut _74: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _75: std::cell::RefMut<'_, &mut [u8]>;
    let _76: &std::cell::RefCell<&mut [u8]>;
    let mut _77: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _78: &mut [u8];
    let mut _79: &solana_program::pubkey::Pubkey;
    let mut _80: &solana_program::pubkey::Pubkey;
    let mut _81: &mut u64;
    let mut _82: &mut u64;
    let mut _83: &mut u64;
    let mut _84: &mut u64;
    let mut _85: &mut [u8];
    scope 1 {
        debug account_info_iter => _4;
        let _9: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _10: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug vault_info => _10;
            let _14: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _15: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug pool_info => _15;
                let _19: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _20: &solana_program::account_info::AccountInfo<'_>;
                scope 12 {
                    debug withdraw_authority_info => _20;
                    let mut _21: TipPool;
                    let _34: std::result::Result<std::convert::Infallible, std::io::Error>;
                    let _35: TipPool;
                    scope 17 {
                        debug pool => _21;
                        let _55: u64;
                        scope 22 {
                            debug v => _55;
                        }
                    }
                    scope 18 {
                        debug residual => _34;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _35;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _19;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _20;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _14;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _15;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _9;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _10;
            scope 6 {
            }
        }
    }

    bb0: {
        _5 = core::slice::<impl [AccountInfo<'_>]>::iter(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _7 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _10 = ((_6 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _12 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb7, unwind continue];
    }

    bb6: {
        _9 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _9) -> [return: bb57, unwind continue];
    }

    bb7: {
        _11 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _12) -> [return: bb8, unwind continue];
    }

    bb8: {
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _15 = ((_11 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _17 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb11, unwind continue];
    }

    bb10: {
        _14 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _14) -> [return: bb57, unwind continue];
    }

    bb11: {
        _16 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _17) -> [return: bb12, unwind continue];
    }

    bb12: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        _20 = ((_16 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _32 = &((*_15).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _31 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _32) -> [return: bb15, unwind continue];
    }

    bb14: {
        _19 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _19) -> [return: bb57, unwind continue];
    }

    bb15: {
        _30 = RefCell::<&mut [u8]>::borrow_mut(_31) -> [return: bb16, unwind continue];
    }

    bb16: {
        _29 = &_30;
        _28 = <RefMut<'_, &mut [u8]> as Deref>::deref(move _29) -> [return: bb17, unwind: bb61];
    }

    bb17: {
        _78 = deref_copy (*_28);
        _27 = &(*_78);
        _26 = <[u8] as Index<RangeFull>>::index(move _27, const RangeFull) -> [return: bb18, unwind: bb61];
    }

    bb18: {
        _25 = _26;
        _24 = &mut _25;
        _23 = <TipPool as BorshDeserialize>::deserialize(_24) -> [return: bb19, unwind: bb61];
    }

    bb19: {
        _22 = <Result<TipPool, std::io::Error> as Try>::branch(move _23) -> [return: bb20, unwind: bb61];
    }

    bb20: {
        _33 = discriminant(_22);
        switchInt(move _33) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        _35 = ((_22 as Continue).0: TipPool);
        _21 = _35;
        drop(_30) -> [return: bb24, unwind continue];
    }

    bb22: {
        _34 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _34) -> [return: bb23, unwind: bb61];
    }

    bb23: {
        drop(_30) -> [return: bb57, unwind continue];
    }

    bb24: {
        _37 = &((*_10).3: &solana_program::pubkey::Pubkey);
        _38 = &_1;
        _36 = <&Pubkey as PartialEq>::ne(move _37, move _38) -> [return: bb25, unwind continue];
    }

    bb25: {
        switchInt(move _36) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _39 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb27: {
        _41 = &((*_15).3: &solana_program::pubkey::Pubkey);
        _42 = &_1;
        _40 = <&Pubkey as PartialEq>::ne(move _41, move _42) -> [return: bb28, unwind continue];
    }

    bb28: {
        switchInt(move _40) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _43 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb30: {
        _44 = ((*_20).5: bool);
        switchInt(move _44) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _47 = &(_21.2: solana_program::pubkey::Pubkey);
        _79 = deref_copy ((*_10).0: &solana_program::pubkey::Pubkey);
        _46 = <Pubkey as PartialEq>::ne(move _47, _79) -> [return: bb33, unwind continue];
    }

    bb32: {
        _45 = begin_panic::<&str>(const "withdraw authority must sign") -> unwind continue;
    }

    bb33: {
        switchInt(move _46) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _48 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb35: {
        _80 = deref_copy ((*_20).0: &solana_program::pubkey::Pubkey);
        _50 = &(_21.0: solana_program::pubkey::Pubkey);
        _49 = <Pubkey as PartialEq>::ne(_80, move _50) -> [return: bb36, unwind continue];
    }

    bb36: {
        switchInt(move _49) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _51 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb38: {
        _53 = (_21.1: u64);
        _52 = core::num::<impl u64>::checked_sub(move _53, _3) -> [return: bb39, unwind continue];
    }

    bb39: {
        _54 = discriminant(_52);
        switchInt(move _54) -> [0: bb40, 1: bb41, otherwise: bb4];
    }

    bb40: {
        _56 = solana_program::program_error::ProgramError::InvalidArgument;
        _0 = Result::<(), ProgramError>::Err(move _56);
        goto -> bb57;
    }

    bb41: {
        _55 = ((_52 as Some).0: u64);
        (_21.1: u64) = _55;
        _61 = &((*_10).1: std::rc::Rc<std::cell::RefCell<&mut u64>>);
        _60 = <Rc<RefCell<&mut u64>> as Deref>::deref(move _61) -> [return: bb42, unwind continue];
    }

    bb42: {
        _59 = RefCell::<&mut u64>::borrow_mut(_60) -> [return: bb43, unwind continue];
    }

    bb43: {
        _58 = &mut _59;
        _57 = <RefMut<'_, &mut u64> as DerefMut>::deref_mut(move _58) -> [return: bb44, unwind: bb60];
    }

    bb44: {
        _81 = deref_copy (*_57);
        _82 = deref_copy (*_57);
        (*_81) = Sub((*_82), _3);
        drop(_59) -> [return: bb45, unwind continue];
    }

    bb45: {
        _66 = &((*_20).1: std::rc::Rc<std::cell::RefCell<&mut u64>>);
        _65 = <Rc<RefCell<&mut u64>> as Deref>::deref(move _66) -> [return: bb46, unwind continue];
    }

    bb46: {
        _64 = RefCell::<&mut u64>::borrow_mut(_65) -> [return: bb47, unwind continue];
    }

    bb47: {
        _63 = &mut _64;
        _62 = <RefMut<'_, &mut u64> as DerefMut>::deref_mut(move _63) -> [return: bb48, unwind: bb59];
    }

    bb48: {
        _83 = deref_copy (*_62);
        _84 = deref_copy (*_62);
        (*_83) = Add((*_84), _3);
        drop(_64) -> [return: bb49, unwind continue];
    }

    bb49: {
        _69 = &_21;
        _77 = &((*_15).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _76 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _77) -> [return: bb50, unwind continue];
    }

    bb50: {
        _75 = RefCell::<&mut [u8]>::borrow_mut(_76) -> [return: bb51, unwind continue];
    }

    bb51: {
        _74 = &mut _75;
        _73 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _74) -> [return: bb52, unwind: bb58];
    }

    bb52: {
        _85 = deref_copy (*_73);
        _72 = <[u8] as IndexMut<RangeFull>>::index_mut(_85, const RangeFull) -> [return: bb53, unwind: bb58];
    }

    bb53: {
        _71 = _72;
        _70 = &mut _71;
        _68 = <TipPool as BorshSerialize>::serialize::<&mut [u8]>(move _69, _70) -> [return: bb54, unwind: bb58];
    }

    bb54: {
        _67 = Result::<(), std::io::Error>::unwrap(move _68) -> [return: bb55, unwind: bb58];
    }

    bb55: {
        drop(_75) -> [return: bb56, unwind continue];
    }

    bb56: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        goto -> bb57;
    }

    bb57: {
        return;
    }

    bb58 (cleanup): {
        drop(_75) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_64) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_59) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_30) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        resume;
    }
}

fn entrypoint(_1: *mut u8) -> u64 {
    debug input => _1;
    let mut _0: u64;
    let _2: &solana_program::pubkey::Pubkey;
    let _3: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _4: &[u8];
    let mut _5: (&solana_program::pubkey::Pubkey, std::vec::Vec<solana_program::account_info::AccountInfo<'_>>, &[u8]);
    let mut _6: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _7: &&solana_program::pubkey::Pubkey;
    let _8: &[solana_program::account_info::AccountInfo<'_>];
    let _9: &std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _10: &&[u8];
    let mut _11: isize;
    let mut _13: &solana_program::pubkey::Pubkey;
    let mut _14: &[u8];
    scope 1 {
        debug program_id => _2;
        debug accounts => _3;
        debug instruction_data => _4;
        let _12: solana_program::program_error::ProgramError;
        scope 3 {
            debug error => _12;
        }
    }
    scope 2 {
    }

    bb0: {
        _5 = solana_program::entrypoint::deserialize::<'_>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = (_5.0: &solana_program::pubkey::Pubkey);
        _3 = move (_5.1: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>);
        _4 = (_5.2: &[u8]);
        _7 = &_2;
        _13 = deref_copy (*_7);
        _9 = &_3;
        _8 = <Vec<AccountInfo<'_>> as Deref>::deref(_9) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _10 = &_4;
        _14 = deref_copy (*_10);
        _6 = process_instruction(_13, _8, _14) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb6, 1: bb5, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _12 = move ((_6 as Err).0: solana_program::program_error::ProgramError);
        _0 = <ProgramError as Into<u64>>::into(move _12) -> [return: bb12, unwind: bb9];
    }

    bb6: {
        _0 = const solana_program::entrypoint::SUCCESS;
        goto -> bb7;
    }

    bb7: {
        drop(_3) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        goto -> bb7;
    }
}

fn initialize(_1: Pubkey, _2: Pubkey, _3: Pubkey, _4: u8, _5: f64, _6: Pubkey) -> Instruction {
    debug tip_program => _1;
    debug vault_address => _2;
    debug initializer_address => _3;
    debug seed => _4;
    debug fee => _5;
    debug fee_recipient => _6;
    let mut _0: solana_program::instruction::Instruction;
    let mut _7: std::vec::Vec<solana_program::instruction::AccountMeta>;
    let mut _8: std::boxed::Box<[solana_program::instruction::AccountMeta]>;
    let mut _9: std::boxed::Box<[solana_program::instruction::AccountMeta; 4]>;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: *mut u8;
    let mut _13: std::boxed::Box<[solana_program::instruction::AccountMeta; 4]>;
    let mut _14: solana_program::instruction::AccountMeta;
    let mut _15: solana_program::instruction::AccountMeta;
    let mut _16: solana_program::instruction::AccountMeta;
    let mut _17: solana_program::pubkey::Pubkey;
    let mut _18: solana_program::instruction::AccountMeta;
    let mut _19: solana_program::pubkey::Pubkey;
    let mut _20: std::vec::Vec<u8>;
    let mut _21: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _22: &TipInstruction;
    let _23: TipInstruction;
    let mut _24: *const [solana_program::instruction::AccountMeta; 4];
    scope 1 {
    }

    bb0: {
        _10 = SizeOf([solana_program::instruction::AccountMeta; 4]);
        _11 = AlignOf([solana_program::instruction::AccountMeta; 4]);
        _12 = alloc::alloc::exchange_malloc(move _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _13 = ShallowInitBox(move _12, [solana_program::instruction::AccountMeta; 4]);
        _14 = AccountMeta::new(_2, const false) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _15 = AccountMeta::new(_3, const true) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _17 = solana_program::sysvar::rent::id() -> [return: bb4, unwind: bb12];
    }

    bb4: {
        _16 = AccountMeta::new_readonly(move _17, const false) -> [return: bb5, unwind: bb12];
    }

    bb5: {
        _19 = solana_program::system_program::id() -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _18 = AccountMeta::new_readonly(move _19, const false) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _24 = (((_13.0: std::ptr::Unique<[solana_program::instruction::AccountMeta; 4]>).0: std::ptr::NonNull<[solana_program::instruction::AccountMeta; 4]>).0: *const [solana_program::instruction::AccountMeta; 4]);
        (*_24) = [move _14, move _15, move _16, move _18];
        _9 = move _13;
        _8 = move _9 as std::boxed::Box<[solana_program::instruction::AccountMeta]> (PointerCoercion(Unsize));
        _7 = std::slice::<impl [AccountMeta]>::into_vec::<std::alloc::Global>(move _8) -> [return: bb8, unwind continue];
    }

    bb8: {
        _23 = TipInstruction::Initialize { seed: _4, fee: _5, fee_recipient: _6 };
        _22 = &_23;
        _21 = <TipInstruction as BorshSerialize>::try_to_vec(move _22) -> [return: bb9, unwind: bb11];
    }

    bb9: {
        _20 = Result::<Vec<u8>, std::io::Error>::unwrap(move _21) -> [return: bb10, unwind: bb11];
    }

    bb10: {
        _0 = Instruction { program_id: _1, accounts: move _7, data: move _20 };
        return;
    }

    bb11 (cleanup): {
        drop(_7) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        drop(_13) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        resume;
    }
}

fn create_pool(_1: Pubkey, _2: Pubkey, _3: Pubkey, _4: Pubkey) -> Instruction {
    debug tip_program => _1;
    debug vault_address => _2;
    debug withdraw_authority => _3;
    debug pool_address => _4;
    let mut _0: solana_program::instruction::Instruction;
    let mut _5: std::vec::Vec<solana_program::instruction::AccountMeta>;
    let mut _6: std::boxed::Box<[solana_program::instruction::AccountMeta]>;
    let mut _7: std::boxed::Box<[solana_program::instruction::AccountMeta; 3]>;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: *mut u8;
    let mut _11: std::boxed::Box<[solana_program::instruction::AccountMeta; 3]>;
    let mut _12: solana_program::instruction::AccountMeta;
    let mut _13: solana_program::instruction::AccountMeta;
    let mut _14: solana_program::instruction::AccountMeta;
    let mut _15: std::vec::Vec<u8>;
    let mut _16: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _17: &TipInstruction;
    let mut _18: *const [solana_program::instruction::AccountMeta; 3];
    scope 1 {
    }

    bb0: {
        _8 = SizeOf([solana_program::instruction::AccountMeta; 3]);
        _9 = AlignOf([solana_program::instruction::AccountMeta; 3]);
        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _11 = ShallowInitBox(move _10, [solana_program::instruction::AccountMeta; 3]);
        _12 = AccountMeta::new(_2, const false) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _13 = AccountMeta::new_readonly(_3, const true) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _14 = AccountMeta::new(_4, const false) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _18 = (((_11.0: std::ptr::Unique<[solana_program::instruction::AccountMeta; 3]>).0: std::ptr::NonNull<[solana_program::instruction::AccountMeta; 3]>).0: *const [solana_program::instruction::AccountMeta; 3]);
        (*_18) = [move _12, move _13, move _14];
        _7 = move _11;
        _6 = move _7 as std::boxed::Box<[solana_program::instruction::AccountMeta]> (PointerCoercion(Unsize));
        _5 = std::slice::<impl [AccountMeta]>::into_vec::<std::alloc::Global>(move _6) -> [return: bb5, unwind continue];
    }

    bb5: {
        _17 = const create_pool::promoted[0];
        _16 = <TipInstruction as BorshSerialize>::try_to_vec(_17) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        _15 = Result::<Vec<u8>, std::io::Error>::unwrap(move _16) -> [return: bb7, unwind: bb8];
    }

    bb7: {
        _0 = Instruction { program_id: _1, accounts: move _5, data: move _15 };
        return;
    }

    bb8 (cleanup): {
        drop(_5) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_11) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }
}

const create_pool::promoted[0]: &TipInstruction = {
    let mut _0: &TipInstruction;
    let mut _1: TipInstruction;

    bb0: {
        _1 = TipInstruction::CreatePool;
        _0 = &_1;
        return;
    }
}

fn tip(_1: Pubkey, _2: Pubkey, _3: Pubkey, _4: Pubkey, _5: u64) -> Instruction {
    debug tip_program => _1;
    debug vault_address => _2;
    debug pool_address => _3;
    debug source => _4;
    debug amount => _5;
    let mut _0: solana_program::instruction::Instruction;
    let mut _6: std::vec::Vec<solana_program::instruction::AccountMeta>;
    let mut _7: std::boxed::Box<[solana_program::instruction::AccountMeta]>;
    let mut _8: std::boxed::Box<[solana_program::instruction::AccountMeta; 4]>;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: *mut u8;
    let mut _12: std::boxed::Box<[solana_program::instruction::AccountMeta; 4]>;
    let mut _13: solana_program::instruction::AccountMeta;
    let mut _14: solana_program::instruction::AccountMeta;
    let mut _15: solana_program::instruction::AccountMeta;
    let mut _16: solana_program::instruction::AccountMeta;
    let mut _17: solana_program::pubkey::Pubkey;
    let mut _18: std::vec::Vec<u8>;
    let mut _19: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _20: &TipInstruction;
    let _21: TipInstruction;
    let mut _22: *const [solana_program::instruction::AccountMeta; 4];
    scope 1 {
    }

    bb0: {
        _9 = SizeOf([solana_program::instruction::AccountMeta; 4]);
        _10 = AlignOf([solana_program::instruction::AccountMeta; 4]);
        _11 = alloc::alloc::exchange_malloc(move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _12 = ShallowInitBox(move _11, [solana_program::instruction::AccountMeta; 4]);
        _13 = AccountMeta::new(_2, const false) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _14 = AccountMeta::new(_3, const false) -> [return: bb3, unwind: bb11];
    }

    bb3: {
        _15 = AccountMeta::new(_4, const true) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _17 = solana_program::system_program::id() -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _16 = AccountMeta::new_readonly(move _17, const false) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _22 = (((_12.0: std::ptr::Unique<[solana_program::instruction::AccountMeta; 4]>).0: std::ptr::NonNull<[solana_program::instruction::AccountMeta; 4]>).0: *const [solana_program::instruction::AccountMeta; 4]);
        (*_22) = [move _13, move _14, move _15, move _16];
        _8 = move _12;
        _7 = move _8 as std::boxed::Box<[solana_program::instruction::AccountMeta]> (PointerCoercion(Unsize));
        _6 = std::slice::<impl [AccountMeta]>::into_vec::<std::alloc::Global>(move _7) -> [return: bb7, unwind continue];
    }

    bb7: {
        _21 = TipInstruction::Tip { amount: _5 };
        _20 = &_21;
        _19 = <TipInstruction as BorshSerialize>::try_to_vec(move _20) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        _18 = Result::<Vec<u8>, std::io::Error>::unwrap(move _19) -> [return: bb9, unwind: bb10];
    }

    bb9: {
        _0 = Instruction { program_id: _1, accounts: move _6, data: move _18 };
        return;
    }

    bb10 (cleanup): {
        drop(_6) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop(_12) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }
}

fn withdraw(_1: Pubkey, _2: Pubkey, _3: Pubkey, _4: Pubkey, _5: u64) -> Instruction {
    debug tip_program => _1;
    debug vault_address => _2;
    debug pool_address => _3;
    debug withdraw_authority => _4;
    debug amount => _5;
    let mut _0: solana_program::instruction::Instruction;
    let mut _6: std::vec::Vec<solana_program::instruction::AccountMeta>;
    let mut _7: std::boxed::Box<[solana_program::instruction::AccountMeta]>;
    let mut _8: std::boxed::Box<[solana_program::instruction::AccountMeta; 4]>;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: *mut u8;
    let mut _12: std::boxed::Box<[solana_program::instruction::AccountMeta; 4]>;
    let mut _13: solana_program::instruction::AccountMeta;
    let mut _14: solana_program::instruction::AccountMeta;
    let mut _15: solana_program::instruction::AccountMeta;
    let mut _16: solana_program::instruction::AccountMeta;
    let mut _17: solana_program::pubkey::Pubkey;
    let mut _18: std::vec::Vec<u8>;
    let mut _19: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _20: &TipInstruction;
    let _21: TipInstruction;
    let mut _22: *const [solana_program::instruction::AccountMeta; 4];
    scope 1 {
    }

    bb0: {
        _9 = SizeOf([solana_program::instruction::AccountMeta; 4]);
        _10 = AlignOf([solana_program::instruction::AccountMeta; 4]);
        _11 = alloc::alloc::exchange_malloc(move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _12 = ShallowInitBox(move _11, [solana_program::instruction::AccountMeta; 4]);
        _13 = AccountMeta::new(_2, const false) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _14 = AccountMeta::new(_3, const false) -> [return: bb3, unwind: bb11];
    }

    bb3: {
        _15 = AccountMeta::new(_4, const true) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _17 = solana_program::system_program::id() -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _16 = AccountMeta::new_readonly(move _17, const false) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _22 = (((_12.0: std::ptr::Unique<[solana_program::instruction::AccountMeta; 4]>).0: std::ptr::NonNull<[solana_program::instruction::AccountMeta; 4]>).0: *const [solana_program::instruction::AccountMeta; 4]);
        (*_22) = [move _13, move _14, move _15, move _16];
        _8 = move _12;
        _7 = move _8 as std::boxed::Box<[solana_program::instruction::AccountMeta]> (PointerCoercion(Unsize));
        _6 = std::slice::<impl [AccountMeta]>::into_vec::<std::alloc::Global>(move _7) -> [return: bb7, unwind continue];
    }

    bb7: {
        _21 = TipInstruction::Withdraw { amount: _5 };
        _20 = &_21;
        _19 = <TipInstruction as BorshSerialize>::try_to_vec(move _20) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        _18 = Result::<Vec<u8>, std::io::Error>::unwrap(move _19) -> [return: bb9, unwind: bb10];
    }

    bb9: {
        _0 = Instruction { program_id: _1, accounts: move _6, data: move _18 };
        return;
    }

    bb10 (cleanup): {
        drop(_6) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop(_12) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }
}
