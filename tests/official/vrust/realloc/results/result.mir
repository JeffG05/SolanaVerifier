// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn create::create_address_info(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: address_info::AddressInfo) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug data => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _5: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _7: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _8: isize;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _12: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _13: isize;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _17: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _18: isize;
    let mut _22: &std::vec::Vec<u8>;
    let _23: std::vec::Vec<u8>;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::vec::Vec<u8>>;
    let mut _25: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _26: &state::address_info::AddressInfo;
    let mut _27: isize;
    let mut _31: &solana_program::rent::Rent;
    let _32: solana_program::rent::Rent;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::rent::Rent>;
    let mut _34: std::result::Result<solana_program::rent::Rent, solana_program::program_error::ProgramError>;
    let mut _35: isize;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _39: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _40: &solana_program::instruction::Instruction;
    let _41: solana_program::instruction::Instruction;
    let mut _42: u64;
    let mut _43: &[solana_program::account_info::AccountInfo<'_>];
    let _44: &[solana_program::account_info::AccountInfo<'_>; 3];
    let _45: [solana_program::account_info::AccountInfo<'_>; 3];
    let mut _46: solana_program::account_info::AccountInfo<'_>;
    let mut _47: solana_program::account_info::AccountInfo<'_>;
    let mut _48: solana_program::account_info::AccountInfo<'_>;
    let mut _49: isize;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _52: std::result::Result<(), std::io::Error>;
    let mut _53: &state::address_info::AddressInfo;
    let mut _54: &mut &mut [u8];
    let mut _55: &mut [u8];
    let mut _56: &mut [u8];
    let mut _57: &mut &mut [u8];
    let mut _58: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _59: std::cell::RefMut<'_, &mut [u8]>;
    let _60: &std::cell::RefCell<&mut [u8]>;
    let mut _61: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _62: isize;
    let mut _64: &solana_program::pubkey::Pubkey;
    let mut _65: &solana_program::pubkey::Pubkey;
    let mut _66: &mut [u8];
    scope 1 {
        debug accounts_iter => _4;
        let _9: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _10: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug target_account => _10;
            let _14: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _15: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug payer => _15;
                let _19: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _20: &solana_program::account_info::AccountInfo<'_>;
                scope 12 {
                    debug system_program => _20;
                    let _21: usize;
                    let _28: std::result::Result<std::convert::Infallible, std::io::Error>;
                    let _29: std::vec::Vec<u8>;
                    scope 17 {
                        debug account_span => _21;
                        let _30: u64;
                        let _36: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _37: solana_program::rent::Rent;
                        scope 22 {
                            debug lamports_required => _30;
                            let _50: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _63: std::result::Result<std::convert::Infallible, std::io::Error>;
                            scope 27 {
                                debug residual => _50;
                                scope 28 {
                                }
                            }
                            scope 29 {
                                debug val => const ();
                                scope 30 {
                                }
                            }
                            scope 31 {
                                debug residual => _63;
                                scope 32 {
                                }
                            }
                            scope 33 {
                                debug val => const ();
                                scope 34 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _36;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _37;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _28;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _29;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _19;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _20;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _14;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _15;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _9;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _10;
            scope 6 {
            }
        }
    }

    bb0: {
        _5 = core::slice::<impl [AccountInfo<'_>]>::iter(_2) -> [return: bb1, unwind: bb55];
    }

    bb1: {
        _4 = &mut _5;
        _7 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb2, unwind: bb55];
    }

    bb2: {
        _6 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _7) -> [return: bb3, unwind: bb55];
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _10 = ((_6 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _12 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb7, unwind: bb55];
    }

    bb6: {
        _9 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _9) -> [return: bb58, unwind: bb55];
    }

    bb7: {
        _11 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _12) -> [return: bb8, unwind: bb55];
    }

    bb8: {
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _15 = ((_11 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _17 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb11, unwind: bb55];
    }

    bb10: {
        _14 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _14) -> [return: bb59, unwind: bb55];
    }

    bb11: {
        _16 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _17) -> [return: bb12, unwind: bb55];
    }

    bb12: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        _20 = ((_16 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _26 = &_3;
        _25 = <address_info::AddressInfo as BorshSerialize>::try_to_vec(move _26) -> [return: bb15, unwind: bb55];
    }

    bb14: {
        _19 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _19) -> [return: bb60, unwind: bb55];
    }

    bb15: {
        _24 = <Result<Vec<u8>, std::io::Error> as Try>::branch(move _25) -> [return: bb16, unwind: bb55];
    }

    bb16: {
        _27 = discriminant(_24);
        switchInt(move _27) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        _29 = move ((_24 as Continue).0: std::vec::Vec<u8>);
        _23 = move _29;
        _22 = &_23;
        _21 = Vec::<u8>::len(move _22) -> [return: bb19, unwind: bb54];
    }

    bb18: {
        _28 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _28) -> [return: bb61, unwind: bb55];
    }

    bb19: {
        drop(_23) -> [return: bb57, unwind: bb55];
    }

    bb20: {
        _33 = <Result<Rent, ProgramError> as Try>::branch(move _34) -> [return: bb21, unwind: bb55];
    }

    bb21: {
        _35 = discriminant(_33);
        switchInt(move _35) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        _37 = move ((_33 as Continue).0: solana_program::rent::Rent);
        _32 = move _37;
        _31 = &_32;
        _30 = Rent::minimum_balance(move _31, _21) -> [return: bb24, unwind: bb55];
    }

    bb23: {
        _36 = move ((_33 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _36) -> [return: bb62, unwind: bb55];
    }

    bb24: {
        _64 = deref_copy ((*_15).0: &solana_program::pubkey::Pubkey);
        _65 = deref_copy ((*_10).0: &solana_program::pubkey::Pubkey);
        _42 = _21 as u64 (IntToInt);
        _41 = solana_program::system_instruction::create_account(_64, _65, _30, move _42, _1) -> [return: bb25, unwind: bb55];
    }

    bb25: {
        _40 = &_41;
        _46 = <AccountInfo<'_> as Clone>::clone(_15) -> [return: bb26, unwind: bb53];
    }

    bb26: {
        _47 = <AccountInfo<'_> as Clone>::clone(_10) -> [return: bb27, unwind: bb52];
    }

    bb27: {
        _48 = <AccountInfo<'_> as Clone>::clone(_20) -> [return: bb28, unwind: bb51];
    }

    bb28: {
        _45 = [move _46, move _47, move _48];
        _44 = &_45;
        _43 = _44 as &[solana_program::account_info::AccountInfo<'_>] (PointerCoercion(Unsize));
        _39 = invoke(_40, move _43) -> [return: bb29, unwind: bb50];
    }

    bb29: {
        _38 = <Result<(), ProgramError> as Try>::branch(move _39) -> [return: bb30, unwind: bb50];
    }

    bb30: {
        _49 = discriminant(_38);
        switchInt(move _49) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        drop(_45) -> [return: bb34, unwind: bb53];
    }

    bb32: {
        _50 = move ((_38 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _50) -> [return: bb33, unwind: bb50];
    }

    bb33: {
        drop(_45) -> [return: bb46, unwind: bb53];
    }

    bb34: {
        drop(_41) -> [return: bb35, unwind: bb55];
    }

    bb35: {
        _53 = &_3;
        _61 = &((*_10).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _60 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _61) -> [return: bb36, unwind: bb55];
    }

    bb36: {
        _59 = RefCell::<&mut [u8]>::borrow_mut(_60) -> [return: bb37, unwind: bb55];
    }

    bb37: {
        _58 = &mut _59;
        _57 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _58) -> [return: bb38, unwind: bb49];
    }

    bb38: {
        _66 = deref_copy (*_57);
        _56 = <[u8] as IndexMut<RangeFull>>::index_mut(_66, const RangeFull) -> [return: bb39, unwind: bb49];
    }

    bb39: {
        _55 = _56;
        _54 = &mut _55;
        _52 = <address_info::AddressInfo as BorshSerialize>::serialize::<&mut [u8]>(move _53, _54) -> [return: bb40, unwind: bb49];
    }

    bb40: {
        _51 = <Result<(), std::io::Error> as Try>::branch(move _52) -> [return: bb41, unwind: bb49];
    }

    bb41: {
        _62 = discriminant(_51);
        switchInt(move _62) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        drop(_59) -> [return: bb45, unwind: bb55];
    }

    bb43: {
        _63 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _63) -> [return: bb44, unwind: bb49];
    }

    bb44: {
        drop(_59) -> [return: bb47, unwind: bb55];
    }

    bb45: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        drop(_3) -> [return: bb48, unwind continue];
    }

    bb46: {
        drop(_41) -> [return: bb47, unwind: bb55];
    }

    bb47: {
        drop(_3) -> [return: bb48, unwind continue];
    }

    bb48: {
        return;
    }

    bb49 (cleanup): {
        drop(_59) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_45) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_47) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_46) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_41) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_23) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_3) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        resume;
    }

    bb57: {
        _34 = <Rent as Sysvar>::get() -> [return: bb20, unwind: bb55];
    }

    bb58: {
        goto -> bb47;
    }

    bb59: {
        goto -> bb47;
    }

    bb60: {
        goto -> bb47;
    }

    bb61: {
        goto -> bb47;
    }

    bb62: {
        goto -> bb47;
    }
}

fn reallocate::reallocate_without_zero_init(_1: &[AccountInfo<'_>], _2: enhanced_address_info::EnhancedAddressInfoExtender) -> Result<(), ProgramError> {
    debug accounts => _1;
    debug args => _2;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _3: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _4: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _6: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _7: isize;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _11: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _12: isize;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _16: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _17: isize;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, state::address_info::AddressInfo>;
    let mut _22: std::result::Result<state::address_info::AddressInfo, std::io::Error>;
    let mut _23: &[u8];
    let _24: &&mut [u8];
    let _25: &std::cell::Ref<'_, &mut [u8]>;
    let _26: std::cell::Ref<'_, &mut [u8]>;
    let _27: &std::cell::RefCell<&mut [u8]>;
    let mut _28: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _29: isize;
    let mut _33: state::address_info::AddressInfo;
    let mut _34: std::string::String;
    let mut _35: u32;
    let mut _37: &std::vec::Vec<u8>;
    let _38: std::vec::Vec<u8>;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::vec::Vec<u8>>;
    let mut _40: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _41: &state::enhanced_address_info::EnhancedAddressInfo;
    let mut _42: isize;
    let mut _46: &solana_program::rent::Rent;
    let _47: solana_program::rent::Rent;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::rent::Rent>;
    let mut _49: std::result::Result<solana_program::rent::Rent, solana_program::program_error::ProgramError>;
    let mut _50: isize;
    let mut _54: u64;
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _56: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _57: &solana_program::instruction::Instruction;
    let _58: solana_program::instruction::Instruction;
    let mut _59: &[solana_program::account_info::AccountInfo<'_>];
    let _60: &[solana_program::account_info::AccountInfo<'_>; 3];
    let _61: [solana_program::account_info::AccountInfo<'_>; 3];
    let mut _62: solana_program::account_info::AccountInfo<'_>;
    let mut _63: solana_program::account_info::AccountInfo<'_>;
    let mut _64: solana_program::account_info::AccountInfo<'_>;
    let mut _65: isize;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _68: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _69: isize;
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _72: std::result::Result<(), std::io::Error>;
    let mut _73: &state::enhanced_address_info::EnhancedAddressInfo;
    let mut _74: &mut &mut [u8];
    let mut _75: &mut [u8];
    let mut _76: &mut [u8];
    let mut _77: &mut &mut [u8];
    let mut _78: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _79: std::cell::RefMut<'_, &mut [u8]>;
    let _80: &std::cell::RefCell<&mut [u8]>;
    let mut _81: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _82: isize;
    let mut _84: &mut [u8];
    let mut _85: &solana_program::pubkey::Pubkey;
    let mut _86: &solana_program::pubkey::Pubkey;
    let mut _87: &mut [u8];
    let mut _88: bool;
    let mut _89: bool;
    scope 1 {
        debug accounts_iter => _3;
        let _8: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _9: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug target_account => _9;
            let _13: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _14: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug payer => _14;
                let _18: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _19: &solana_program::account_info::AccountInfo<'_>;
                scope 12 {
                    debug system_program => _19;
                    let _20: state::address_info::AddressInfo;
                    let _30: std::result::Result<std::convert::Infallible, std::io::Error>;
                    let _31: state::address_info::AddressInfo;
                    scope 17 {
                        debug address_info_data => _20;
                        let _32: state::enhanced_address_info::EnhancedAddressInfo;
                        scope 22 {
                            debug enhanced_address_info_data => _32;
                            let _36: usize;
                            let _43: std::result::Result<std::convert::Infallible, std::io::Error>;
                            let _44: std::vec::Vec<u8>;
                            scope 23 {
                                debug account_span => _36;
                                let _45: u64;
                                let _51: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _52: solana_program::rent::Rent;
                                scope 28 {
                                    debug lamports_required => _45;
                                    let _53: u64;
                                    scope 33 {
                                        debug diff => _53;
                                        let _66: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                        let _70: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                        let _83: std::result::Result<std::convert::Infallible, std::io::Error>;
                                        scope 34 {
                                            debug residual => _66;
                                            scope 35 {
                                            }
                                        }
                                        scope 36 {
                                            debug val => const ();
                                            scope 37 {
                                            }
                                        }
                                        scope 38 {
                                            debug residual => _70;
                                            scope 39 {
                                            }
                                        }
                                        scope 40 {
                                            debug val => const ();
                                            scope 41 {
                                            }
                                        }
                                        scope 42 {
                                            debug residual => _83;
                                            scope 43 {
                                            }
                                        }
                                        scope 44 {
                                            debug val => const ();
                                            scope 45 {
                                            }
                                        }
                                    }
                                }
                                scope 29 {
                                    debug residual => _51;
                                    scope 30 {
                                    }
                                }
                                scope 31 {
                                    debug val => _52;
                                    scope 32 {
                                    }
                                }
                            }
                            scope 24 {
                                debug residual => _43;
                                scope 25 {
                                }
                            }
                            scope 26 {
                                debug val => _44;
                                scope 27 {
                                }
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _30;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _31;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _18;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _19;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _13;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _14;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _8;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _9;
            scope 6 {
            }
        }
    }

    bb0: {
        _89 = const false;
        _88 = const false;
        _88 = const true;
        _4 = core::slice::<impl [AccountInfo<'_>]>::iter(_1) -> [return: bb1, unwind: bb81];
    }

    bb1: {
        _3 = &mut _4;
        _6 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_3) -> [return: bb2, unwind: bb81];
    }

    bb2: {
        _5 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _6) -> [return: bb3, unwind: bb81];
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb5, 1: bb6, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _9 = ((_5 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _11 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_3) -> [return: bb7, unwind: bb81];
    }

    bb6: {
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _8) -> [return: bb82, unwind: bb81];
    }

    bb7: {
        _10 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _11) -> [return: bb8, unwind: bb81];
    }

    bb8: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _14 = ((_10 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _16 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_3) -> [return: bb11, unwind: bb81];
    }

    bb10: {
        _13 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _13) -> [return: bb83, unwind: bb81];
    }

    bb11: {
        _15 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _16) -> [return: bb12, unwind: bb81];
    }

    bb12: {
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        _19 = ((_15 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _28 = &((*_9).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _27 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _28) -> [return: bb15, unwind: bb81];
    }

    bb14: {
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _18) -> [return: bb84, unwind: bb81];
    }

    bb15: {
        _26 = RefCell::<&mut [u8]>::borrow(_27) -> [return: bb16, unwind: bb81];
    }

    bb16: {
        _25 = &_26;
        _24 = <Ref<'_, &mut [u8]> as Deref>::deref(_25) -> [return: bb17, unwind: bb74];
    }

    bb17: {
        _84 = deref_copy (*_24);
        _23 = &(*_84);
        _22 = <address_info::AddressInfo as BorshDeserialize>::try_from_slice(move _23) -> [return: bb18, unwind: bb74];
    }

    bb18: {
        _21 = <Result<address_info::AddressInfo, std::io::Error> as Try>::branch(move _22) -> [return: bb19, unwind: bb74];
    }

    bb19: {
        _29 = discriminant(_21);
        switchInt(move _29) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        _31 = move ((_21 as Continue).0: state::address_info::AddressInfo);
        _89 = const true;
        _20 = move _31;
        drop(_26) -> [return: bb23, unwind: bb79];
    }

    bb21: {
        _30 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _30) -> [return: bb22, unwind: bb74];
    }

    bb22: {
        drop(_26) -> [return: bb64, unwind: bb81];
    }

    bb23: {
        _89 = const false;
        _33 = move _20;
        _88 = const false;
        _34 = move (_2.0: std::string::String);
        _35 = (_2.1: u32);
        _32 = enhanced_address_info::EnhancedAddressInfo::from_address_info(move _33, move _34, move _35) -> [return: bb24, unwind: bb79];
    }

    bb24: {
        _41 = &_32;
        _40 = <enhanced_address_info::EnhancedAddressInfo as BorshSerialize>::try_to_vec(move _41) -> [return: bb25, unwind: bb73];
    }

    bb25: {
        _39 = <Result<Vec<u8>, std::io::Error> as Try>::branch(move _40) -> [return: bb26, unwind: bb73];
    }

    bb26: {
        _42 = discriminant(_39);
        switchInt(move _42) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        _44 = move ((_39 as Continue).0: std::vec::Vec<u8>);
        _38 = move _44;
        _37 = &_38;
        _36 = Vec::<u8>::len(move _37) -> [return: bb29, unwind: bb72];
    }

    bb28: {
        _43 = move ((_39 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _43) -> [return: bb85, unwind: bb73];
    }

    bb29: {
        drop(_38) -> [return: bb76, unwind: bb73];
    }

    bb30: {
        _48 = <Result<Rent, ProgramError> as Try>::branch(move _49) -> [return: bb31, unwind: bb73];
    }

    bb31: {
        _50 = discriminant(_48);
        switchInt(move _50) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        _52 = move ((_48 as Continue).0: solana_program::rent::Rent);
        _47 = move _52;
        _46 = &_47;
        _45 = Rent::minimum_balance(move _46, _36) -> [return: bb34, unwind: bb73];
    }

    bb33: {
        _51 = move ((_48 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _51) -> [return: bb86, unwind: bb73];
    }

    bb34: {
        _54 = AccountInfo::<'_>::lamports(_9) -> [return: bb35, unwind: bb73];
    }

    bb35: {
        _53 = Sub(_45, move _54);
        _85 = deref_copy ((*_14).0: &solana_program::pubkey::Pubkey);
        _86 = deref_copy ((*_9).0: &solana_program::pubkey::Pubkey);
        _58 = transfer(_85, _86, _53) -> [return: bb36, unwind: bb73];
    }

    bb36: {
        _57 = &_58;
        _62 = <AccountInfo<'_> as Clone>::clone(_14) -> [return: bb37, unwind: bb71];
    }

    bb37: {
        _63 = <AccountInfo<'_> as Clone>::clone(_9) -> [return: bb38, unwind: bb70];
    }

    bb38: {
        _64 = <AccountInfo<'_> as Clone>::clone(_19) -> [return: bb39, unwind: bb69];
    }

    bb39: {
        _61 = [move _62, move _63, move _64];
        _60 = &_61;
        _59 = _60 as &[solana_program::account_info::AccountInfo<'_>] (PointerCoercion(Unsize));
        _56 = invoke(_57, move _59) -> [return: bb40, unwind: bb68];
    }

    bb40: {
        _55 = <Result<(), ProgramError> as Try>::branch(move _56) -> [return: bb41, unwind: bb68];
    }

    bb41: {
        _65 = discriminant(_55);
        switchInt(move _65) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        drop(_61) -> [return: bb45, unwind: bb71];
    }

    bb43: {
        _66 = move ((_55 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _66) -> [return: bb44, unwind: bb68];
    }

    bb44: {
        drop(_61) -> [return: bb62, unwind: bb71];
    }

    bb45: {
        drop(_58) -> [return: bb46, unwind: bb73];
    }

    bb46: {
        _68 = AccountInfo::<'_>::realloc(_9, _36, const false) -> [return: bb47, unwind: bb73];
    }

    bb47: {
        _67 = <Result<(), ProgramError> as Try>::branch(move _68) -> [return: bb48, unwind: bb73];
    }

    bb48: {
        _69 = discriminant(_67);
        switchInt(move _69) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        _73 = &_32;
        _81 = &((*_9).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _80 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _81) -> [return: bb51, unwind: bb73];
    }

    bb50: {
        _70 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _70) -> [return: bb87, unwind: bb73];
    }

    bb51: {
        _79 = RefCell::<&mut [u8]>::borrow_mut(_80) -> [return: bb52, unwind: bb73];
    }

    bb52: {
        _78 = &mut _79;
        _77 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _78) -> [return: bb53, unwind: bb67];
    }

    bb53: {
        _87 = deref_copy (*_77);
        _76 = <[u8] as IndexMut<RangeFull>>::index_mut(_87, const RangeFull) -> [return: bb54, unwind: bb67];
    }

    bb54: {
        _75 = _76;
        _74 = &mut _75;
        _72 = <enhanced_address_info::EnhancedAddressInfo as BorshSerialize>::serialize::<&mut [u8]>(move _73, _74) -> [return: bb55, unwind: bb67];
    }

    bb55: {
        _71 = <Result<(), std::io::Error> as Try>::branch(move _72) -> [return: bb56, unwind: bb67];
    }

    bb56: {
        _82 = discriminant(_71);
        switchInt(move _82) -> [0: bb57, 1: bb58, otherwise: bb4];
    }

    bb57: {
        drop(_79) -> [return: bb60, unwind: bb73];
    }

    bb58: {
        _83 = move ((_71 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _83) -> [return: bb59, unwind: bb67];
    }

    bb59: {
        drop(_79) -> [return: bb63, unwind: bb73];
    }

    bb60: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        drop(_32) -> [return: bb61, unwind: bb79];
    }

    bb61: {
        _89 = const false;
        goto -> bb66;
    }

    bb62: {
        drop(_58) -> [return: bb63, unwind: bb73];
    }

    bb63: {
        drop(_32) -> [return: bb64, unwind: bb79];
    }

    bb64: {
        _89 = const false;
        goto -> bb65;
    }

    bb65: {
        switchInt(_88) -> [0: bb66, otherwise: bb77];
    }

    bb66: {
        return;
    }

    bb67 (cleanup): {
        drop(_79) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_61) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_63) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_62) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_58) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_38) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_32) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_26) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        resume;
    }

    bb76: {
        _49 = <Rent as Sysvar>::get() -> [return: bb30, unwind: bb73];
    }

    bb77: {
        drop((_2.0: std::string::String)) -> [return: bb66, unwind continue];
    }

    bb78 (cleanup): {
        drop(_20) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        switchInt(_89) -> [0: bb81, otherwise: bb78];
    }

    bb80 (cleanup): {
        drop((_2.0: std::string::String)) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        switchInt(_88) -> [0: bb75, otherwise: bb80];
    }

    bb82: {
        goto -> bb65;
    }

    bb83: {
        goto -> bb65;
    }

    bb84: {
        goto -> bb65;
    }

    bb85: {
        goto -> bb63;
    }

    bb86: {
        goto -> bb63;
    }

    bb87: {
        goto -> bb63;
    }
}

fn reallocate::reallocate_zero_init(_1: &[AccountInfo<'_>], _2: work_info::WorkInfo) -> Result<(), ProgramError> {
    debug accounts => _1;
    debug data => _2;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _3: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _4: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _6: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _7: isize;
    let mut _11: &std::vec::Vec<u8>;
    let _12: std::vec::Vec<u8>;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::vec::Vec<u8>>;
    let mut _14: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _15: &state::work_info::WorkInfo;
    let mut _16: isize;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _20: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _21: isize;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _24: std::result::Result<(), std::io::Error>;
    let mut _25: &state::work_info::WorkInfo;
    let mut _26: &mut &mut [u8];
    let mut _27: &mut [u8];
    let mut _28: &mut [u8];
    let mut _29: &mut &mut [u8];
    let mut _30: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _31: std::cell::RefMut<'_, &mut [u8]>;
    let _32: &std::cell::RefCell<&mut [u8]>;
    let mut _33: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _34: isize;
    let mut _36: &mut [u8];
    scope 1 {
        debug accounts_iter => _3;
        let _8: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _9: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug target_account => _9;
            let _10: usize;
            let _17: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _18: std::vec::Vec<u8>;
            scope 7 {
                debug account_span => _10;
                let _22: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _35: std::result::Result<std::convert::Infallible, std::io::Error>;
                scope 12 {
                    debug residual => _22;
                    scope 13 {
                    }
                }
                scope 14 {
                    debug val => const ();
                    scope 15 {
                    }
                }
                scope 16 {
                    debug residual => _35;
                    scope 17 {
                    }
                }
                scope 18 {
                    debug val => const ();
                    scope 19 {
                    }
                }
            }
            scope 8 {
                debug residual => _17;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _18;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _8;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _9;
            scope 6 {
            }
        }
    }

    bb0: {
        _4 = core::slice::<impl [AccountInfo<'_>]>::iter(_1) -> [return: bb1, unwind: bb30];
    }

    bb1: {
        _3 = &mut _4;
        _6 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_3) -> [return: bb2, unwind: bb30];
    }

    bb2: {
        _5 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _6) -> [return: bb3, unwind: bb30];
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb5, 1: bb6, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _9 = ((_5 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _15 = &_2;
        _14 = <work_info::WorkInfo as BorshSerialize>::try_to_vec(move _15) -> [return: bb7, unwind: bb30];
    }

    bb6: {
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _8) -> [return: bb33, unwind: bb30];
    }

    bb7: {
        _13 = <Result<Vec<u8>, std::io::Error> as Try>::branch(move _14) -> [return: bb8, unwind: bb30];
    }

    bb8: {
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _18 = move ((_13 as Continue).0: std::vec::Vec<u8>);
        _12 = move _18;
        _11 = &_12;
        _10 = Vec::<u8>::len(move _11) -> [return: bb11, unwind: bb29];
    }

    bb10: {
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _17) -> [return: bb34, unwind: bb30];
    }

    bb11: {
        drop(_12) -> [return: bb32, unwind: bb30];
    }

    bb12: {
        _19 = <Result<(), ProgramError> as Try>::branch(move _20) -> [return: bb13, unwind: bb30];
    }

    bb13: {
        _21 = discriminant(_19);
        switchInt(move _21) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        _25 = &_2;
        _33 = &((*_9).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _32 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _33) -> [return: bb16, unwind: bb30];
    }

    bb15: {
        _22 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _22) -> [return: bb35, unwind: bb30];
    }

    bb16: {
        _31 = RefCell::<&mut [u8]>::borrow_mut(_32) -> [return: bb17, unwind: bb30];
    }

    bb17: {
        _30 = &mut _31;
        _29 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _30) -> [return: bb18, unwind: bb28];
    }

    bb18: {
        _36 = deref_copy (*_29);
        _28 = <[u8] as IndexMut<RangeFull>>::index_mut(_36, const RangeFull) -> [return: bb19, unwind: bb28];
    }

    bb19: {
        _27 = _28;
        _26 = &mut _27;
        _24 = <work_info::WorkInfo as BorshSerialize>::serialize::<&mut [u8]>(move _25, _26) -> [return: bb20, unwind: bb28];
    }

    bb20: {
        _23 = <Result<(), std::io::Error> as Try>::branch(move _24) -> [return: bb21, unwind: bb28];
    }

    bb21: {
        _34 = discriminant(_23);
        switchInt(move _34) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        drop(_31) -> [return: bb25, unwind: bb30];
    }

    bb23: {
        _35 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _35) -> [return: bb24, unwind: bb28];
    }

    bb24: {
        drop(_31) -> [return: bb26, unwind: bb30];
    }

    bb25: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        drop(_2) -> [return: bb27, unwind continue];
    }

    bb26: {
        drop(_2) -> [return: bb27, unwind continue];
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_31) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_12) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_2) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        resume;
    }

    bb32: {
        _20 = AccountInfo::<'_>::realloc(_9, _10, const true) -> [return: bb12, unwind: bb30];
    }

    bb33: {
        goto -> bb26;
    }

    bb34: {
        goto -> bb26;
    }

    bb35: {
        goto -> bb26;
    }
}

fn processor::<impl at src/processor.rs:6:10: 6:24>::serialize(_1: &ReallocInstruction, _2: &mut W) -> Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let _3: u8;
    let mut _4: isize;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _6: std::result::Result<(), std::io::Error>;
    let mut _7: &[u8];
    let _8: &[u8; 1];
    let _9: [u8; 1];
    let mut _10: u8;
    let mut _11: isize;
    let mut _13: isize;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _16: std::result::Result<(), std::io::Error>;
    let mut _17: isize;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _21: std::result::Result<(), std::io::Error>;
    let mut _22: isize;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _26: std::result::Result<(), std::io::Error>;
    let mut _27: isize;
    scope 1 {
        debug variant_idx => _3;
        let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _14: &state::address_info::AddressInfo;
        let _19: &state::enhanced_address_info::EnhancedAddressInfoExtender;
        let _24: &state::work_info::WorkInfo;
        scope 2 {
            debug residual => _12;
            scope 3 {
            }
        }
        scope 4 {
            debug val => const ();
            scope 5 {
            }
        }
        scope 6 {
            debug id0 => _14;
            let _18: std::result::Result<std::convert::Infallible, std::io::Error>;
            scope 7 {
                debug residual => _18;
                scope 8 {
                }
            }
            scope 9 {
                debug val => const ();
                scope 10 {
                }
            }
        }
        scope 11 {
            debug id0 => _19;
            let _23: std::result::Result<std::convert::Infallible, std::io::Error>;
            scope 12 {
                debug residual => _23;
                scope 13 {
                }
            }
            scope 14 {
                debug val => const ();
                scope 15 {
                }
            }
        }
        scope 16 {
            debug id0 => _24;
            let _28: std::result::Result<std::convert::Infallible, std::io::Error>;
            scope 17 {
                debug residual => _28;
                scope 18 {
                }
            }
            scope 19 {
                debug val => const ();
                scope 20 {
                }
            }
        }
    }

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb2, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _3 = const 2_u8;
        goto -> bb5;
    }

    bb3: {
        _3 = const 0_u8;
        goto -> bb5;
    }

    bb4: {
        _3 = const 1_u8;
        goto -> bb5;
    }

    bb5: {
        _10 = _3;
        _9 = core::num::<impl u8>::to_le_bytes(move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        _8 = &_9;
        _7 = _8 as &[u8] (PointerCoercion(Unsize));
        _6 = <W as std::io::Write>::write_all(_2, move _7) -> [return: bb7, unwind continue];
    }

    bb7: {
        _5 = <Result<(), std::io::Error> as Try>::branch(move _6) -> [return: bb8, unwind continue];
    }

    bb8: {
        _11 = discriminant(_5);
        switchInt(move _11) -> [0: bb9, 1: bb10, otherwise: bb1];
    }

    bb9: {
        _13 = discriminant((*_1));
        switchInt(move _13) -> [0: bb12, 1: bb16, 2: bb11, otherwise: bb1];
    }

    bb10: {
        _12 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb24, unwind continue];
    }

    bb11: {
        _24 = &(((*_1) as ReallocateZeroInit).0: state::work_info::WorkInfo);
        _26 = <work_info::WorkInfo as BorshSerialize>::serialize::<W>(_24, _2) -> [return: bb20, unwind continue];
    }

    bb12: {
        _14 = &(((*_1) as Create).0: state::address_info::AddressInfo);
        _16 = <address_info::AddressInfo as BorshSerialize>::serialize::<W>(_14, _2) -> [return: bb13, unwind continue];
    }

    bb13: {
        _15 = <Result<(), std::io::Error> as Try>::branch(move _16) -> [return: bb14, unwind continue];
    }

    bb14: {
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb23, 1: bb15, otherwise: bb1];
    }

    bb15: {
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _18) -> [return: bb24, unwind continue];
    }

    bb16: {
        _19 = &(((*_1) as ReallocateWithoutZeroInit).0: state::enhanced_address_info::EnhancedAddressInfoExtender);
        _21 = <enhanced_address_info::EnhancedAddressInfoExtender as BorshSerialize>::serialize::<W>(_19, _2) -> [return: bb17, unwind continue];
    }

    bb17: {
        _20 = <Result<(), std::io::Error> as Try>::branch(move _21) -> [return: bb18, unwind continue];
    }

    bb18: {
        _22 = discriminant(_20);
        switchInt(move _22) -> [0: bb23, 1: bb19, otherwise: bb1];
    }

    bb19: {
        _23 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _23) -> [return: bb24, unwind continue];
    }

    bb20: {
        _25 = <Result<(), std::io::Error> as Try>::branch(move _26) -> [return: bb21, unwind continue];
    }

    bb21: {
        _27 = discriminant(_25);
        switchInt(move _27) -> [0: bb23, 1: bb22, otherwise: bb1];
    }

    bb22: {
        _28 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _28) -> [return: bb24, unwind continue];
    }

    bb23: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        goto -> bb24;
    }

    bb24: {
        return;
    }
}

fn processor::<impl at src/processor.rs:6:26: 6:42>::deserialize(_1: &mut &[u8]) -> Result<ReallocInstruction, std::io::Error> {
    debug buf => _1;
    let mut _0: std::result::Result<processor::ReallocInstruction, std::io::Error>;
    let _2: u8;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u8>;
    let mut _4: std::result::Result<u8, std::io::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _7: u8;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, state::address_info::AddressInfo>;
    let mut _10: std::result::Result<state::address_info::AddressInfo, std::io::Error>;
    let mut _11: isize;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, state::enhanced_address_info::EnhancedAddressInfoExtender>;
    let mut _15: std::result::Result<state::enhanced_address_info::EnhancedAddressInfoExtender, std::io::Error>;
    let mut _16: isize;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, state::work_info::WorkInfo>;
    let mut _20: std::result::Result<state::work_info::WorkInfo, std::io::Error>;
    let mut _21: isize;
    let mut _25: std::fmt::Arguments<'_>;
    let mut _26: &[&str];
    let mut _27: &[core::fmt::rt::Argument<'_>];
    let _28: &[core::fmt::rt::Argument<'_>; 1];
    let _29: [core::fmt::rt::Argument<'_>; 1];
    let mut _30: core::fmt::rt::Argument<'_>;
    let _31: &u8;
    let mut _32: std::io::Error;
    let mut _33: std::io::ErrorKind;
    let mut _34: processor::ReallocInstruction;
    scope 1 {
        debug variant_idx => _2;
        let _8: processor::ReallocInstruction;
        let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _13: state::address_info::AddressInfo;
        let _17: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _18: state::enhanced_address_info::EnhancedAddressInfoExtender;
        let _22: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _23: state::work_info::WorkInfo;
        let _24: std::string::String;
        let mut _35: &[&str; 1];
        scope 6 {
            debug return_value => _8;
        }
        scope 7 {
            debug residual => _12;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _13;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _17;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _18;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _22;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _23;
            scope 18 {
            }
        }
        scope 19 {
            debug msg => _24;
        }
        scope 20 {
            debug res => _24;
        }
    }
    scope 2 {
        debug residual => _6;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;
        scope 5 {
        }
    }

    bb0: {
        _4 = <u8 as BorshDeserialize>::deserialize(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<u8, std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = ((_3 as Continue).0: u8);
        _2 = _7;
        switchInt(_2) -> [0: bb7, 1: bb12, 2: bb17, otherwise: bb6];
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<ReallocInstruction, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _6) -> [return: bb27, unwind continue];
    }

    bb6: {
        _35 = const <processor::ReallocInstruction as borsh::BorshDeserialize>::deserialize::promoted[0];
        _26 = _35 as &[&str] (PointerCoercion(Unsize));
        _31 = &_2;
        _30 = core::fmt::rt::Argument::<'_>::new_debug::<u8>(_31) -> [return: bb22, unwind continue];
    }

    bb7: {
        _10 = <address_info::AddressInfo as BorshDeserialize>::deserialize(_1) -> [return: bb8, unwind continue];
    }

    bb8: {
        _9 = <Result<address_info::AddressInfo, std::io::Error> as Try>::branch(move _10) -> [return: bb9, unwind continue];
    }

    bb9: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb10, 1: bb11, otherwise: bb3];
    }

    bb10: {
        _13 = move ((_9 as Continue).0: state::address_info::AddressInfo);
        _8 = ReallocInstruction::Create(move _13);
        goto -> bb26;
    }

    bb11: {
        _12 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<ReallocInstruction, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb27, unwind continue];
    }

    bb12: {
        _15 = <enhanced_address_info::EnhancedAddressInfoExtender as BorshDeserialize>::deserialize(_1) -> [return: bb13, unwind continue];
    }

    bb13: {
        _14 = <Result<enhanced_address_info::EnhancedAddressInfoExtender, std::io::Error> as Try>::branch(move _15) -> [return: bb14, unwind continue];
    }

    bb14: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb15, 1: bb16, otherwise: bb3];
    }

    bb15: {
        _18 = move ((_14 as Continue).0: state::enhanced_address_info::EnhancedAddressInfoExtender);
        _8 = ReallocInstruction::ReallocateWithoutZeroInit(move _18);
        goto -> bb26;
    }

    bb16: {
        _17 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<ReallocInstruction, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _17) -> [return: bb27, unwind continue];
    }

    bb17: {
        _20 = <work_info::WorkInfo as BorshDeserialize>::deserialize(_1) -> [return: bb18, unwind continue];
    }

    bb18: {
        _19 = <Result<work_info::WorkInfo, std::io::Error> as Try>::branch(move _20) -> [return: bb19, unwind continue];
    }

    bb19: {
        _21 = discriminant(_19);
        switchInt(move _21) -> [0: bb20, 1: bb21, otherwise: bb3];
    }

    bb20: {
        _23 = move ((_19 as Continue).0: state::work_info::WorkInfo);
        _8 = ReallocInstruction::ReallocateZeroInit(move _23);
        goto -> bb26;
    }

    bb21: {
        _22 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<ReallocInstruction, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _22) -> [return: bb27, unwind continue];
    }

    bb22: {
        _29 = [move _30];
        _28 = &_29;
        _27 = _28 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _25 = Arguments::<'_>::new_v1(move _26, move _27) -> [return: bb23, unwind continue];
    }

    bb23: {
        _24 = format(move _25) -> [return: bb24, unwind continue];
    }

    bb24: {
        _33 = InvalidInput;
        _32 = std::io::Error::new::<String>(move _33, move _24) -> [return: bb25, unwind continue];
    }

    bb25: {
        _0 = Result::<ReallocInstruction, std::io::Error>::Err(move _32);
        goto -> bb27;
    }

    bb26: {
        _34 = move _8;
        _0 = Result::<ReallocInstruction, std::io::Error>::Ok(move _34);
        goto -> bb27;
    }

    bb27: {
        return;
    }
}

const processor::<impl at src/processor.rs:6:26: 6:42>::deserialize::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Unexpected variant index: "];
        _0 = &_1;
        return;
    }
}

fn processor::<impl at src/processor.rs:6:44: 6:49>::fmt(_1: &ReallocInstruction, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &state::address_info::AddressInfo;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&state::address_info::AddressInfo;
    let _8: &state::enhanced_address_info::EnhancedAddressInfoExtender;
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&state::enhanced_address_info::EnhancedAddressInfoExtender;
    let _12: &state::work_info::WorkInfo;
    let _13: &str;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &&state::work_info::WorkInfo;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }
    scope 3 {
        debug __self_0 => _12;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb2, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _12 = &(((*_1) as ReallocateZeroInit).0: state::work_info::WorkInfo);
        _13 = const "ReallocateZeroInit";
        _15 = &_12;
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _13, move _14) -> [return: bb5, unwind continue];
    }

    bb3: {
        _4 = &(((*_1) as Create).0: state::address_info::AddressInfo);
        _5 = const "Create";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb5, unwind continue];
    }

    bb4: {
        _8 = &(((*_1) as ReallocateWithoutZeroInit).0: state::enhanced_address_info::EnhancedAddressInfoExtender);
        _9 = const "ReallocateWithoutZeroInit";
        _11 = &_8;
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn process_instruction(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: &[u8]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug input => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: processor::ReallocInstruction;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, processor::ReallocInstruction>;
    let mut _6: std::result::Result<processor::ReallocInstruction, std::io::Error>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _9: processor::ReallocInstruction;
    let mut _10: isize;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: isize;
    scope 1 {
        debug instruction => _4;
        let _11: state::address_info::AddressInfo;
        let _12: state::enhanced_address_info::EnhancedAddressInfoExtender;
        let _13: state::work_info::WorkInfo;
        scope 6 {
            debug data => _11;
        }
        scope 7 {
            debug data => _12;
        }
        scope 8 {
            debug data => _13;
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _9;
        scope 5 {
        }
    }

    bb0: {
        _16 = const false;
        _15 = const false;
        _14 = const false;
        _6 = <ReallocInstruction as BorshDeserialize>::try_from_slice(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = <Result<ReallocInstruction, std::io::Error> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _9 = move ((_5 as Continue).0: processor::ReallocInstruction);
        _14 = const true;
        _15 = const true;
        _16 = const true;
        _4 = move _9;
        _10 = discriminant(_4);
        switchInt(move _10) -> [0: bb8, 1: bb9, 2: bb7, otherwise: bb3];
    }

    bb5: {
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _8) -> [return: bb6, unwind continue];
    }

    bb6: {
        _14 = const false;
        _15 = const false;
        _16 = const false;
        goto -> bb11;
    }

    bb7: {
        _16 = const false;
        _13 = move ((_4 as ReallocateZeroInit).0: state::work_info::WorkInfo);
        _0 = reallocate::reallocate_zero_init(_2, move _13) -> [return: bb20, unwind: bb19];
    }

    bb8: {
        _15 = const false;
        _11 = move ((_4 as Create).0: state::address_info::AddressInfo);
        _0 = create::create_address_info(_1, _2, move _11) -> [return: bb21, unwind: bb19];
    }

    bb9: {
        _14 = const false;
        _12 = move ((_4 as ReallocateWithoutZeroInit).0: state::enhanced_address_info::EnhancedAddressInfoExtender);
        _0 = reallocate::reallocate_without_zero_init(_2, move _12) -> [return: bb22, unwind: bb19];
    }

    bb10: {
        _14 = const false;
        _15 = const false;
        _16 = const false;
        goto -> bb11;
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        resume;
    }

    bb13 (cleanup): {
        switchInt(_15) -> [0: bb12, otherwise: bb14];
    }

    bb14 (cleanup): {
        drop(((_4 as Create).0: state::address_info::AddressInfo)) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_14) -> [0: bb12, otherwise: bb16];
    }

    bb16 (cleanup): {
        drop(((_4 as ReallocateWithoutZeroInit).0: state::enhanced_address_info::EnhancedAddressInfoExtender)) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_16) -> [0: bb12, otherwise: bb18];
    }

    bb18 (cleanup): {
        drop(((_4 as ReallocateZeroInit).0: state::work_info::WorkInfo)) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        _17 = discriminant(_4);
        switchInt(move _17) -> [0: bb13, 1: bb15, otherwise: bb17];
    }

    bb20: {
        goto -> bb10;
    }

    bb21: {
        goto -> bb10;
    }

    bb22: {
        goto -> bb10;
    }
}

fn address_info::<impl at src/state/address_info.rs:3:10: 3:26>::deserialize(_1: &mut &[u8]) -> Result<address_info::AddressInfo, std::io::Error> {
    debug buf => _1;
    let mut _0: std::result::Result<state::address_info::AddressInfo, std::io::Error>;
    let mut _2: state::address_info::AddressInfo;
    let mut _3: std::string::String;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::string::String>;
    let mut _5: std::result::Result<std::string::String, std::io::Error>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _8: std::string::String;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u8>;
    let mut _10: std::result::Result<u8, std::io::Error>;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _13: u8;
    let mut _14: std::string::String;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::string::String>;
    let mut _16: std::result::Result<std::string::String, std::io::Error>;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _19: std::string::String;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::string::String>;
    let mut _21: std::result::Result<std::string::String, std::io::Error>;
    let mut _22: isize;
    let _23: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _24: std::string::String;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _8;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _12;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _13;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _18;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _19;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _23;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _24;
        scope 16 {
        }
    }

    bb0: {
        _5 = <String as BorshDeserialize>::deserialize(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <Result<String, std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _8 = move ((_4 as Continue).0: std::string::String);
        _3 = move _8;
        _10 = <u8 as BorshDeserialize>::deserialize(_1) -> [return: bb6, unwind: bb28];
    }

    bb5: {
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<address_info::AddressInfo, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> [return: bb22, unwind continue];
    }

    bb6: {
        _9 = <Result<u8, std::io::Error> as Try>::branch(move _10) -> [return: bb7, unwind: bb28];
    }

    bb7: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb8, 1: bb9, otherwise: bb3];
    }

    bb8: {
        _13 = ((_9 as Continue).0: u8);
        _16 = <String as BorshDeserialize>::deserialize(_1) -> [return: bb11, unwind: bb27];
    }

    bb9: {
        _12 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<address_info::AddressInfo, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb10, unwind: bb27];
    }

    bb10: {
        drop(_3) -> [return: bb22, unwind continue];
    }

    bb11: {
        _15 = <Result<String, std::io::Error> as Try>::branch(move _16) -> [return: bb12, unwind: bb27];
    }

    bb12: {
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb13, 1: bb14, otherwise: bb3];
    }

    bb13: {
        _19 = move ((_15 as Continue).0: std::string::String);
        _14 = move _19;
        _21 = <String as BorshDeserialize>::deserialize(_1) -> [return: bb16, unwind: bb25];
    }

    bb14: {
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<address_info::AddressInfo, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _18) -> [return: bb15, unwind: bb26];
    }

    bb15: {
        drop(_3) -> [return: bb22, unwind continue];
    }

    bb16: {
        _20 = <Result<String, std::io::Error> as Try>::branch(move _21) -> [return: bb17, unwind: bb25];
    }

    bb17: {
        _22 = discriminant(_20);
        switchInt(move _22) -> [0: bb18, 1: bb19, otherwise: bb3];
    }

    bb18: {
        _24 = move ((_20 as Continue).0: std::string::String);
        _2 = address_info::AddressInfo { name: move _3, house_number: _13, street: move _14, city: move _24 };
        _0 = Result::<address_info::AddressInfo, std::io::Error>::Ok(move _2);
        goto -> bb22;
    }

    bb19: {
        _23 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<address_info::AddressInfo, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _23) -> [return: bb20, unwind: bb23];
    }

    bb20: {
        drop(_14) -> [return: bb21, unwind: bb24];
    }

    bb21: {
        drop(_3) -> [return: bb22, unwind continue];
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        drop(_14) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_3) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_14) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_3) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_3) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_3) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        resume;
    }
}

fn address_info::<impl at src/state/address_info.rs:3:28: 3:42>::serialize(_1: &address_info::AddressInfo, _2: &mut W) -> Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _4: std::result::Result<(), std::io::Error>;
    let _5: &std::string::String;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _9: std::result::Result<(), std::io::Error>;
    let _10: &u8;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _14: std::result::Result<(), std::io::Error>;
    let _15: &std::string::String;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _19: std::result::Result<(), std::io::Error>;
    let _20: &std::string::String;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, std::io::Error>;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _12;
        scope 6 {
        }
    }
    scope 7 {
        debug val => const ();
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _17;
        scope 10 {
        }
    }
    scope 11 {
        debug val => const ();
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _22;
        scope 14 {
        }
    }
    scope 15 {
        debug val => const ();
        scope 16 {
        }
    }

    bb0: {
        _5 = &((*_1).0: std::string::String);
        _4 = <String as BorshSerialize>::serialize::<W>(_5, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<(), std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _10 = &((*_1).1: u8);
        _9 = <u8 as BorshSerialize>::serialize::<W>(_10, _2) -> [return: bb6, unwind continue];
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> [return: bb18, unwind continue];
    }

    bb6: {
        _8 = <Result<(), std::io::Error> as Try>::branch(move _9) -> [return: bb7, unwind continue];
    }

    bb7: {
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb8, 1: bb9, otherwise: bb3];
    }

    bb8: {
        _15 = &((*_1).2: std::string::String);
        _14 = <String as BorshSerialize>::serialize::<W>(_15, _2) -> [return: bb10, unwind continue];
    }

    bb9: {
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb18, unwind continue];
    }

    bb10: {
        _13 = <Result<(), std::io::Error> as Try>::branch(move _14) -> [return: bb11, unwind continue];
    }

    bb11: {
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb12, 1: bb13, otherwise: bb3];
    }

    bb12: {
        _20 = &((*_1).3: std::string::String);
        _19 = <String as BorshSerialize>::serialize::<W>(_20, _2) -> [return: bb14, unwind continue];
    }

    bb13: {
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _17) -> [return: bb18, unwind continue];
    }

    bb14: {
        _18 = <Result<(), std::io::Error> as Try>::branch(move _19) -> [return: bb15, unwind continue];
    }

    bb15: {
        _21 = discriminant(_18);
        switchInt(move _21) -> [0: bb16, 1: bb17, otherwise: bb3];
    }

    bb16: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        goto -> bb18;
    }

    bb17: {
        _22 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _22) -> [return: bb18, unwind continue];
    }

    bb18: {
        return;
    }
}

fn address_info::<impl at src/state/address_info.rs:3:44: 3:49>::fmt(_1: &address_info::AddressInfo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::string::String;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &u8;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &std::string::String;
    let _13: &str;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &&std::string::String;
    let _16: &std::string::String;

    bb0: {
        _3 = const "AddressInfo";
        _4 = const "name";
        _6 = &((*_1).0: std::string::String);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "house_number";
        _9 = &((*_1).1: u8);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "street";
        _12 = &((*_1).2: std::string::String);
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = const "city";
        _16 = &((*_1).3: std::string::String);
        _15 = &_16;
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field4_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11, _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn address_info::<impl at src/state/address_info.rs:11:1: 11:17>::new(_1: String, _2: u8, _3: String, _4: String) -> address_info::AddressInfo {
    debug name => _1;
    debug house_number => _2;
    debug street => _3;
    debug city => _4;
    let mut _0: state::address_info::AddressInfo;

    bb0: {
        _0 = address_info::AddressInfo { name: move _1, house_number: _2, street: move _3, city: move _4 };
        return;
    }
}

fn enhanced_address_info::<impl at src/state/enhanced_address_info.rs:5:10: 5:26>::deserialize(_1: &mut &[u8]) -> Result<enhanced_address_info::EnhancedAddressInfoExtender, std::io::Error> {
    debug buf => _1;
    let mut _0: std::result::Result<state::enhanced_address_info::EnhancedAddressInfoExtender, std::io::Error>;
    let mut _2: state::enhanced_address_info::EnhancedAddressInfoExtender;
    let mut _3: std::string::String;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::string::String>;
    let mut _5: std::result::Result<std::string::String, std::io::Error>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _8: std::string::String;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u32>;
    let mut _10: std::result::Result<u32, std::io::Error>;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _13: u32;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _8;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _12;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _13;
        scope 8 {
        }
    }

    bb0: {
        _5 = <String as BorshDeserialize>::deserialize(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <Result<String, std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _8 = move ((_4 as Continue).0: std::string::String);
        _3 = move _8;
        _10 = <u32 as BorshDeserialize>::deserialize(_1) -> [return: bb6, unwind: bb13];
    }

    bb5: {
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<enhanced_address_info::EnhancedAddressInfoExtender, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> [return: bb11, unwind continue];
    }

    bb6: {
        _9 = <Result<u32, std::io::Error> as Try>::branch(move _10) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb8, 1: bb9, otherwise: bb3];
    }

    bb8: {
        _13 = ((_9 as Continue).0: u32);
        _2 = enhanced_address_info::EnhancedAddressInfoExtender { state: move _3, zip: _13 };
        _0 = Result::<enhanced_address_info::EnhancedAddressInfoExtender, std::io::Error>::Ok(move _2);
        goto -> bb11;
    }

    bb9: {
        _12 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<enhanced_address_info::EnhancedAddressInfoExtender, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb10, unwind: bb12];
    }

    bb10: {
        drop(_3) -> [return: bb11, unwind continue];
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_3) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_3) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        resume;
    }
}

fn enhanced_address_info::<impl at src/state/enhanced_address_info.rs:5:28: 5:42>::serialize(_1: &enhanced_address_info::EnhancedAddressInfoExtender, _2: &mut W) -> Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _4: std::result::Result<(), std::io::Error>;
    let _5: &std::string::String;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _9: std::result::Result<(), std::io::Error>;
    let _10: &u32;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _12;
        scope 6 {
        }
    }
    scope 7 {
        debug val => const ();
        scope 8 {
        }
    }

    bb0: {
        _5 = &((*_1).0: std::string::String);
        _4 = <String as BorshSerialize>::serialize::<W>(_5, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<(), std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _10 = &((*_1).1: u32);
        _9 = <u32 as BorshSerialize>::serialize::<W>(_10, _2) -> [return: bb6, unwind continue];
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> [return: bb10, unwind continue];
    }

    bb6: {
        _8 = <Result<(), std::io::Error> as Try>::branch(move _9) -> [return: bb7, unwind continue];
    }

    bb7: {
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb8, 1: bb9, otherwise: bb3];
    }

    bb8: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        goto -> bb10;
    }

    bb9: {
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }
}

fn enhanced_address_info::<impl at src/state/enhanced_address_info.rs:5:44: 5:49>::fmt(_1: &enhanced_address_info::EnhancedAddressInfoExtender, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::string::String;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&u32;
    let _10: &u32;

    bb0: {
        _3 = const "EnhancedAddressInfoExtender";
        _4 = const "state";
        _6 = &((*_1).0: std::string::String);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "zip";
        _10 = &((*_1).1: u32);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn enhanced_address_info::<impl at src/state/enhanced_address_info.rs:11:10: 11:26>::deserialize(_1: &mut &[u8]) -> Result<enhanced_address_info::EnhancedAddressInfo, std::io::Error> {
    debug buf => _1;
    let mut _0: std::result::Result<state::enhanced_address_info::EnhancedAddressInfo, std::io::Error>;
    let mut _2: state::enhanced_address_info::EnhancedAddressInfo;
    let mut _3: std::string::String;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::string::String>;
    let mut _5: std::result::Result<std::string::String, std::io::Error>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _8: std::string::String;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u8>;
    let mut _10: std::result::Result<u8, std::io::Error>;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _13: u8;
    let mut _14: std::string::String;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::string::String>;
    let mut _16: std::result::Result<std::string::String, std::io::Error>;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _19: std::string::String;
    let mut _20: std::string::String;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::string::String>;
    let mut _22: std::result::Result<std::string::String, std::io::Error>;
    let mut _23: isize;
    let _24: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _25: std::string::String;
    let mut _26: std::string::String;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::string::String>;
    let mut _28: std::result::Result<std::string::String, std::io::Error>;
    let mut _29: isize;
    let _30: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _31: std::string::String;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u32>;
    let mut _33: std::result::Result<u32, std::io::Error>;
    let mut _34: isize;
    let _35: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _36: u32;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _8;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _12;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _13;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _18;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _19;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _24;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _25;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _30;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _31;
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _35;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _36;
        scope 24 {
        }
    }

    bb0: {
        _5 = <String as BorshDeserialize>::deserialize(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <Result<String, std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _8 = move ((_4 as Continue).0: std::string::String);
        _3 = move _8;
        _10 = <u8 as BorshDeserialize>::deserialize(_1) -> [return: bb6, unwind: bb52];
    }

    bb5: {
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<enhanced_address_info::EnhancedAddressInfo, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> [return: bb37, unwind continue];
    }

    bb6: {
        _9 = <Result<u8, std::io::Error> as Try>::branch(move _10) -> [return: bb7, unwind: bb52];
    }

    bb7: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb8, 1: bb9, otherwise: bb3];
    }

    bb8: {
        _13 = ((_9 as Continue).0: u8);
        _16 = <String as BorshDeserialize>::deserialize(_1) -> [return: bb11, unwind: bb51];
    }

    bb9: {
        _12 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<enhanced_address_info::EnhancedAddressInfo, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb10, unwind: bb51];
    }

    bb10: {
        drop(_3) -> [return: bb37, unwind continue];
    }

    bb11: {
        _15 = <Result<String, std::io::Error> as Try>::branch(move _16) -> [return: bb12, unwind: bb51];
    }

    bb12: {
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb13, 1: bb14, otherwise: bb3];
    }

    bb13: {
        _19 = move ((_15 as Continue).0: std::string::String);
        _14 = move _19;
        _22 = <String as BorshDeserialize>::deserialize(_1) -> [return: bb16, unwind: bb49];
    }

    bb14: {
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<enhanced_address_info::EnhancedAddressInfo, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _18) -> [return: bb15, unwind: bb50];
    }

    bb15: {
        drop(_3) -> [return: bb37, unwind continue];
    }

    bb16: {
        _21 = <Result<String, std::io::Error> as Try>::branch(move _22) -> [return: bb17, unwind: bb49];
    }

    bb17: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb18, 1: bb19, otherwise: bb3];
    }

    bb18: {
        _25 = move ((_21 as Continue).0: std::string::String);
        _20 = move _25;
        _28 = <String as BorshDeserialize>::deserialize(_1) -> [return: bb21, unwind: bb46];
    }

    bb19: {
        _24 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<enhanced_address_info::EnhancedAddressInfo, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _24) -> [return: bb20, unwind: bb47];
    }

    bb20: {
        drop(_14) -> [return: bb36, unwind: bb48];
    }

    bb21: {
        _27 = <Result<String, std::io::Error> as Try>::branch(move _28) -> [return: bb22, unwind: bb46];
    }

    bb22: {
        _29 = discriminant(_27);
        switchInt(move _29) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _31 = move ((_27 as Continue).0: std::string::String);
        _26 = move _31;
        _33 = <u32 as BorshDeserialize>::deserialize(_1) -> [return: bb26, unwind: bb42];
    }

    bb24: {
        _30 = move ((_27 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<enhanced_address_info::EnhancedAddressInfo, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _30) -> [return: bb25, unwind: bb43];
    }

    bb25: {
        drop(_20) -> [return: bb34, unwind: bb44];
    }

    bb26: {
        _32 = <Result<u32, std::io::Error> as Try>::branch(move _33) -> [return: bb27, unwind: bb42];
    }

    bb27: {
        _34 = discriminant(_32);
        switchInt(move _34) -> [0: bb28, 1: bb29, otherwise: bb3];
    }

    bb28: {
        _36 = ((_32 as Continue).0: u32);
        _2 = enhanced_address_info::EnhancedAddressInfo { name: move _3, house_number: _13, street: move _14, city: move _20, state: move _26, zip: _36 };
        _0 = Result::<enhanced_address_info::EnhancedAddressInfo, std::io::Error>::Ok(move _2);
        goto -> bb37;
    }

    bb29: {
        _35 = move ((_32 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<enhanced_address_info::EnhancedAddressInfo, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _35) -> [return: bb30, unwind: bb38];
    }

    bb30: {
        drop(_26) -> [return: bb31, unwind: bb39];
    }

    bb31: {
        drop(_20) -> [return: bb32, unwind: bb40];
    }

    bb32: {
        drop(_14) -> [return: bb33, unwind: bb41];
    }

    bb33: {
        drop(_3) -> [return: bb37, unwind continue];
    }

    bb34: {
        drop(_14) -> [return: bb35, unwind: bb45];
    }

    bb35: {
        drop(_3) -> [return: bb37, unwind continue];
    }

    bb36: {
        drop(_3) -> [return: bb37, unwind continue];
    }

    bb37: {
        return;
    }

    bb38 (cleanup): {
        drop(_26) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_20) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_14) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_3) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_26) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_20) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_14) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_3) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_20) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_14) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_3) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_14) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_3) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_3) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_3) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        resume;
    }
}

fn enhanced_address_info::<impl at src/state/enhanced_address_info.rs:11:28: 11:42>::serialize(_1: &enhanced_address_info::EnhancedAddressInfo, _2: &mut W) -> Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _4: std::result::Result<(), std::io::Error>;
    let _5: &std::string::String;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _9: std::result::Result<(), std::io::Error>;
    let _10: &u8;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _14: std::result::Result<(), std::io::Error>;
    let _15: &std::string::String;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _19: std::result::Result<(), std::io::Error>;
    let _20: &std::string::String;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _24: std::result::Result<(), std::io::Error>;
    let _25: &std::string::String;
    let mut _26: isize;
    let _27: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _29: std::result::Result<(), std::io::Error>;
    let _30: &u32;
    let mut _31: isize;
    let _32: std::result::Result<std::convert::Infallible, std::io::Error>;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _12;
        scope 6 {
        }
    }
    scope 7 {
        debug val => const ();
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _17;
        scope 10 {
        }
    }
    scope 11 {
        debug val => const ();
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _22;
        scope 14 {
        }
    }
    scope 15 {
        debug val => const ();
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _27;
        scope 18 {
        }
    }
    scope 19 {
        debug val => const ();
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _32;
        scope 22 {
        }
    }
    scope 23 {
        debug val => const ();
        scope 24 {
        }
    }

    bb0: {
        _5 = &((*_1).0: std::string::String);
        _4 = <String as BorshSerialize>::serialize::<W>(_5, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<(), std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _10 = &((*_1).1: u8);
        _9 = <u8 as BorshSerialize>::serialize::<W>(_10, _2) -> [return: bb6, unwind continue];
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> [return: bb26, unwind continue];
    }

    bb6: {
        _8 = <Result<(), std::io::Error> as Try>::branch(move _9) -> [return: bb7, unwind continue];
    }

    bb7: {
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb8, 1: bb9, otherwise: bb3];
    }

    bb8: {
        _15 = &((*_1).2: std::string::String);
        _14 = <String as BorshSerialize>::serialize::<W>(_15, _2) -> [return: bb10, unwind continue];
    }

    bb9: {
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb26, unwind continue];
    }

    bb10: {
        _13 = <Result<(), std::io::Error> as Try>::branch(move _14) -> [return: bb11, unwind continue];
    }

    bb11: {
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb12, 1: bb13, otherwise: bb3];
    }

    bb12: {
        _20 = &((*_1).3: std::string::String);
        _19 = <String as BorshSerialize>::serialize::<W>(_20, _2) -> [return: bb14, unwind continue];
    }

    bb13: {
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _17) -> [return: bb26, unwind continue];
    }

    bb14: {
        _18 = <Result<(), std::io::Error> as Try>::branch(move _19) -> [return: bb15, unwind continue];
    }

    bb15: {
        _21 = discriminant(_18);
        switchInt(move _21) -> [0: bb16, 1: bb17, otherwise: bb3];
    }

    bb16: {
        _25 = &((*_1).4: std::string::String);
        _24 = <String as BorshSerialize>::serialize::<W>(_25, _2) -> [return: bb18, unwind continue];
    }

    bb17: {
        _22 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _22) -> [return: bb26, unwind continue];
    }

    bb18: {
        _23 = <Result<(), std::io::Error> as Try>::branch(move _24) -> [return: bb19, unwind continue];
    }

    bb19: {
        _26 = discriminant(_23);
        switchInt(move _26) -> [0: bb20, 1: bb21, otherwise: bb3];
    }

    bb20: {
        _30 = &((*_1).5: u32);
        _29 = <u32 as BorshSerialize>::serialize::<W>(_30, _2) -> [return: bb22, unwind continue];
    }

    bb21: {
        _27 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _27) -> [return: bb26, unwind continue];
    }

    bb22: {
        _28 = <Result<(), std::io::Error> as Try>::branch(move _29) -> [return: bb23, unwind continue];
    }

    bb23: {
        _31 = discriminant(_28);
        switchInt(move _31) -> [0: bb24, 1: bb25, otherwise: bb3];
    }

    bb24: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        goto -> bb26;
    }

    bb25: {
        _32 = move ((_28 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _32) -> [return: bb26, unwind continue];
    }

    bb26: {
        return;
    }
}

fn enhanced_address_info::<impl at src/state/enhanced_address_info.rs:11:44: 11:49>::fmt(_1: &enhanced_address_info::EnhancedAddressInfo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _4: &[&dyn std::fmt::Debug; 6];
    let _5: [&dyn std::fmt::Debug; 6];
    let mut _6: &dyn std::fmt::Debug;
    let _7: &std::string::String;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &u8;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &std::string::String;
    let mut _12: &dyn std::fmt::Debug;
    let _13: &std::string::String;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &std::string::String;
    let mut _16: &dyn std::fmt::Debug;
    let _17: &&u32;
    let _18: &u32;
    let _19: &str;
    let mut _20: &[&str];
    let mut _21: &[&str; 6];
    scope 1 {
        debug names => _21;
        let _3: &[&dyn std::fmt::Debug];
        scope 2 {
            debug values => _3;
        }
    }

    bb0: {
        _21 = const <state::enhanced_address_info::EnhancedAddressInfo as std::fmt::Debug>::fmt::promoted[0];
        _7 = &((*_1).0: std::string::String);
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _9 = &((*_1).1: u8);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _11 = &((*_1).2: std::string::String);
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = &((*_1).3: std::string::String);
        _12 = _13 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _15 = &((*_1).4: std::string::String);
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _18 = &((*_1).5: u32);
        _17 = &_18;
        _16 = _17 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16];
        _4 = &_5;
        _3 = _4 as &[&dyn std::fmt::Debug] (PointerCoercion(Unsize));
        _19 = const "EnhancedAddressInfo";
        _20 = _21 as &[&str] (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _19, move _20, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const enhanced_address_info::<impl at src/state/enhanced_address_info.rs:11:44: 11:49>::fmt::promoted[0]: &[&str; 6] = {
    let mut _0: &[&str; 6];
    let mut _1: [&str; 6];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: &str;
    let mut _10: &str;
    let mut _11: &str;

    bb0: {
        _3 = const "house_number";
        _2 = &(*_3);
        _5 = const "street";
        _4 = &(*_5);
        _7 = const "city";
        _6 = &(*_7);
        _9 = const "state";
        _8 = &(*_9);
        _11 = const "zip";
        _10 = &(*_11);
        _1 = [const "name", move _2, move _4, move _6, move _8, move _10];
        _0 = &_1;
        return;
    }
}

fn enhanced_address_info::<impl at src/state/enhanced_address_info.rs:21:1: 21:25>::from_address_info(_1: address_info::AddressInfo, _2: String, _3: u32) -> enhanced_address_info::EnhancedAddressInfo {
    debug address_info => _1;
    debug state => _2;
    debug zip => _3;
    let mut _0: state::enhanced_address_info::EnhancedAddressInfo;
    let mut _4: std::string::String;
    let mut _5: u8;
    let mut _6: std::string::String;
    let mut _7: std::string::String;

    bb0: {
        _4 = move (_1.0: std::string::String);
        _5 = (_1.1: u8);
        _6 = move (_1.2: std::string::String);
        _7 = move (_1.3: std::string::String);
        _0 = enhanced_address_info::EnhancedAddressInfo { name: move _4, house_number: move _5, street: move _6, city: move _7, state: move _2, zip: _3 };
        return;
    }
}

fn work_info::<impl at src/state/work_info.rs:3:10: 3:26>::deserialize(_1: &mut &[u8]) -> Result<work_info::WorkInfo, std::io::Error> {
    debug buf => _1;
    let mut _0: std::result::Result<state::work_info::WorkInfo, std::io::Error>;
    let mut _2: state::work_info::WorkInfo;
    let mut _3: std::string::String;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::string::String>;
    let mut _5: std::result::Result<std::string::String, std::io::Error>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _8: std::string::String;
    let mut _9: std::string::String;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::string::String>;
    let mut _11: std::result::Result<std::string::String, std::io::Error>;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _14: std::string::String;
    let mut _15: std::string::String;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::string::String>;
    let mut _17: std::result::Result<std::string::String, std::io::Error>;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _20: std::string::String;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u8>;
    let mut _22: std::result::Result<u8, std::io::Error>;
    let mut _23: isize;
    let _24: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _25: u8;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _8;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _13;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _14;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _19;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _20;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _24;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _25;
        scope 16 {
        }
    }

    bb0: {
        _5 = <String as BorshDeserialize>::deserialize(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <Result<String, std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _8 = move ((_4 as Continue).0: std::string::String);
        _3 = move _8;
        _11 = <String as BorshDeserialize>::deserialize(_1) -> [return: bb6, unwind: bb33];
    }

    bb5: {
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<work_info::WorkInfo, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> [return: bb24, unwind continue];
    }

    bb6: {
        _10 = <Result<String, std::io::Error> as Try>::branch(move _11) -> [return: bb7, unwind: bb33];
    }

    bb7: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb8, 1: bb9, otherwise: bb3];
    }

    bb8: {
        _14 = move ((_10 as Continue).0: std::string::String);
        _9 = move _14;
        _17 = <String as BorshDeserialize>::deserialize(_1) -> [return: bb11, unwind: bb31];
    }

    bb9: {
        _13 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<work_info::WorkInfo, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _13) -> [return: bb10, unwind: bb32];
    }

    bb10: {
        drop(_3) -> [return: bb24, unwind continue];
    }

    bb11: {
        _16 = <Result<String, std::io::Error> as Try>::branch(move _17) -> [return: bb12, unwind: bb31];
    }

    bb12: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb13, 1: bb14, otherwise: bb3];
    }

    bb13: {
        _20 = move ((_16 as Continue).0: std::string::String);
        _15 = move _20;
        _22 = <u8 as BorshDeserialize>::deserialize(_1) -> [return: bb16, unwind: bb28];
    }

    bb14: {
        _19 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<work_info::WorkInfo, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _19) -> [return: bb15, unwind: bb29];
    }

    bb15: {
        drop(_9) -> [return: bb23, unwind: bb30];
    }

    bb16: {
        _21 = <Result<u8, std::io::Error> as Try>::branch(move _22) -> [return: bb17, unwind: bb28];
    }

    bb17: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb18, 1: bb19, otherwise: bb3];
    }

    bb18: {
        _25 = ((_21 as Continue).0: u8);
        _2 = work_info::WorkInfo { name: move _3, position: move _9, company: move _15, years_employed: _25 };
        _0 = Result::<work_info::WorkInfo, std::io::Error>::Ok(move _2);
        goto -> bb24;
    }

    bb19: {
        _24 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<work_info::WorkInfo, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _24) -> [return: bb20, unwind: bb25];
    }

    bb20: {
        drop(_15) -> [return: bb21, unwind: bb26];
    }

    bb21: {
        drop(_9) -> [return: bb22, unwind: bb27];
    }

    bb22: {
        drop(_3) -> [return: bb24, unwind continue];
    }

    bb23: {
        drop(_3) -> [return: bb24, unwind continue];
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        drop(_15) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_9) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_3) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_15) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_9) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_3) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_9) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_3) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_3) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        resume;
    }
}

fn work_info::<impl at src/state/work_info.rs:3:28: 3:42>::serialize(_1: &work_info::WorkInfo, _2: &mut W) -> Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _4: std::result::Result<(), std::io::Error>;
    let _5: &std::string::String;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _9: std::result::Result<(), std::io::Error>;
    let _10: &std::string::String;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _14: std::result::Result<(), std::io::Error>;
    let _15: &std::string::String;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _19: std::result::Result<(), std::io::Error>;
    let _20: &u8;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, std::io::Error>;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _12;
        scope 6 {
        }
    }
    scope 7 {
        debug val => const ();
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _17;
        scope 10 {
        }
    }
    scope 11 {
        debug val => const ();
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _22;
        scope 14 {
        }
    }
    scope 15 {
        debug val => const ();
        scope 16 {
        }
    }

    bb0: {
        _5 = &((*_1).0: std::string::String);
        _4 = <String as BorshSerialize>::serialize::<W>(_5, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<(), std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _10 = &((*_1).1: std::string::String);
        _9 = <String as BorshSerialize>::serialize::<W>(_10, _2) -> [return: bb6, unwind continue];
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> [return: bb18, unwind continue];
    }

    bb6: {
        _8 = <Result<(), std::io::Error> as Try>::branch(move _9) -> [return: bb7, unwind continue];
    }

    bb7: {
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb8, 1: bb9, otherwise: bb3];
    }

    bb8: {
        _15 = &((*_1).2: std::string::String);
        _14 = <String as BorshSerialize>::serialize::<W>(_15, _2) -> [return: bb10, unwind continue];
    }

    bb9: {
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb18, unwind continue];
    }

    bb10: {
        _13 = <Result<(), std::io::Error> as Try>::branch(move _14) -> [return: bb11, unwind continue];
    }

    bb11: {
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb12, 1: bb13, otherwise: bb3];
    }

    bb12: {
        _20 = &((*_1).3: u8);
        _19 = <u8 as BorshSerialize>::serialize::<W>(_20, _2) -> [return: bb14, unwind continue];
    }

    bb13: {
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _17) -> [return: bb18, unwind continue];
    }

    bb14: {
        _18 = <Result<(), std::io::Error> as Try>::branch(move _19) -> [return: bb15, unwind continue];
    }

    bb15: {
        _21 = discriminant(_18);
        switchInt(move _21) -> [0: bb16, 1: bb17, otherwise: bb3];
    }

    bb16: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        goto -> bb18;
    }

    bb17: {
        _22 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _22) -> [return: bb18, unwind continue];
    }

    bb18: {
        return;
    }
}

fn work_info::<impl at src/state/work_info.rs:3:44: 3:49>::fmt(_1: &work_info::WorkInfo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::string::String;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &std::string::String;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &std::string::String;
    let _13: &str;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &&u8;
    let _16: &u8;

    bb0: {
        _3 = const "WorkInfo";
        _4 = const "name";
        _6 = &((*_1).0: std::string::String);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "position";
        _9 = &((*_1).1: std::string::String);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "company";
        _12 = &((*_1).2: std::string::String);
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = const "years_employed";
        _16 = &((*_1).3: u8);
        _15 = &_16;
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field4_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11, _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn work_info::<impl at src/state/work_info.rs:11:1: 11:14>::new(_1: String, _2: String, _3: String, _4: u8) -> work_info::WorkInfo {
    debug name => _1;
    debug position => _2;
    debug company => _3;
    debug years_employed => _4;
    let mut _0: state::work_info::WorkInfo;

    bb0: {
        _0 = work_info::WorkInfo { name: move _1, position: move _2, company: move _3, years_employed: _4 };
        return;
    }
}

fn entrypoint(_1: *mut u8) -> u64 {
    debug input => _1;
    let mut _0: u64;
    let _2: &solana_program::pubkey::Pubkey;
    let _3: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _4: &[u8];
    let mut _5: (&solana_program::pubkey::Pubkey, std::vec::Vec<solana_program::account_info::AccountInfo<'_>>, &[u8]);
    let mut _6: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _7: &&solana_program::pubkey::Pubkey;
    let _8: &[solana_program::account_info::AccountInfo<'_>];
    let _9: &std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _10: &&[u8];
    let mut _11: isize;
    let mut _13: &solana_program::pubkey::Pubkey;
    let mut _14: &[u8];
    scope 1 {
        debug program_id => _2;
        debug accounts => _3;
        debug instruction_data => _4;
        let _12: solana_program::program_error::ProgramError;
        scope 3 {
            debug error => _12;
        }
    }
    scope 2 {
    }

    bb0: {
        _5 = solana_program::entrypoint::deserialize::<'_>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = (_5.0: &solana_program::pubkey::Pubkey);
        _3 = move (_5.1: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>);
        _4 = (_5.2: &[u8]);
        _7 = &_2;
        _13 = deref_copy (*_7);
        _9 = &_3;
        _8 = <Vec<AccountInfo<'_>> as Deref>::deref(_9) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _10 = &_4;
        _14 = deref_copy (*_10);
        _6 = process_instruction(_13, _8, _14) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb6, 1: bb5, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _12 = move ((_6 as Err).0: solana_program::program_error::ProgramError);
        _0 = <ProgramError as Into<u64>>::into(move _12) -> [return: bb12, unwind: bb9];
    }

    bb6: {
        _0 = const solana_program::entrypoint::SUCCESS;
        goto -> bb7;
    }

    bb7: {
        drop(_3) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        goto -> bb7;
    }
}

fn ReallocInstruction::Create(_1: address_info::AddressInfo) -> ReallocInstruction {
    let mut _0: processor::ReallocInstruction;

    bb0: {
        _0 = ReallocInstruction::Create(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ReallocInstruction::Create(_1: address_info::AddressInfo) -> ReallocInstruction {
    let mut _0: processor::ReallocInstruction;

    bb0: {
        _0 = ReallocInstruction::Create(move _1);
        return;
    }
}

fn ReallocInstruction::ReallocateWithoutZeroInit(_1: enhanced_address_info::EnhancedAddressInfoExtender) -> ReallocInstruction {
    let mut _0: processor::ReallocInstruction;

    bb0: {
        _0 = ReallocInstruction::ReallocateWithoutZeroInit(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ReallocInstruction::ReallocateWithoutZeroInit(_1: enhanced_address_info::EnhancedAddressInfoExtender) -> ReallocInstruction {
    let mut _0: processor::ReallocInstruction;

    bb0: {
        _0 = ReallocInstruction::ReallocateWithoutZeroInit(move _1);
        return;
    }
}

fn ReallocInstruction::ReallocateZeroInit(_1: work_info::WorkInfo) -> ReallocInstruction {
    let mut _0: processor::ReallocInstruction;

    bb0: {
        _0 = ReallocInstruction::ReallocateZeroInit(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ReallocInstruction::ReallocateZeroInit(_1: work_info::WorkInfo) -> ReallocInstruction {
    let mut _0: processor::ReallocInstruction;

    bb0: {
        _0 = ReallocInstruction::ReallocateZeroInit(move _1);
        return;
    }
}
