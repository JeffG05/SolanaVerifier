#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use ::{};
use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use ::{};
use solana_program::entrypoint;
use ::{};
use solana_program::instruction::AccountMeta;
use solana_program::instruction::Instruction;
use solana_program::pubkey::Pubkey;
use solana_program::system_program;
use solana_program::sysvar;

// There's a mitigation for this bug in spl-token 3.1.1
// vendored_spl_token is an exact copy of spl-token 3.1.0, which doesn't have the mitigation yet
use vendored_spl_token as spl_token;


enum WalletInstruction {

    /// Initialize a Personal Savings Wallet
    ///
    /// Passed accounts:
    ///
    /// (1) Wallet account
    /// (2) Authority
    /// (3) Owner
    /// (4) Mint
    /// (5) Rent sysvar
    /// (6) SPL-Token program
    /// (7) System program
    Initialize,

    /// Deposit
    ///
    /// Passed accounts:
    ///
    /// (1) Wallet account
    /// (2) Money Source
    /// (3) Source Authority
    /// (4) Mint
    /// (5) SPL-Token program
    Deposit {
            amount: u64,
        },

    /// Withdraw from Wallet
    ///
    /// Passed accounts:
    ///
    /// (1) Wallet account
    /// (2) Authority
    /// (3) Owner
    /// (4) Destination
    /// (5) Mint
    /// (6) SPL-Token program
    Withdraw {
            amount: u64,
        },
}
#[automatically_derived]
impl ::core::fmt::Debug for WalletInstruction {
    #[inline]
    fn fmt<'_, '_, '_>(self: &'_ Self, f: &'_ mut ::core::fmt::Formatter<>)
        ->
            ::core::fmt::Result {
            match self {
                    WalletInstruction::Initialize =>
                        ::core::fmt::Formatter::write_str(f, "Initialize"),
                    WalletInstruction::Deposit {  amount: __self_0 } =>
                        ::core::fmt::Formatter::debug_struct_field1_finish(f,
                            "Deposit", "amount", &__self_0),
                    WalletInstruction::Withdraw {  amount: __self_0 } =>
                        ::core::fmt::Formatter::debug_struct_field1_finish(f,
                            "Withdraw", "amount", &__self_0),
                }
        }
}
impl borsh::de::BorshDeserialize for WalletInstruction where
    u64: borsh::BorshDeserialize, u64: borsh::BorshDeserialize {
    fn deserialize<'_, '_>(buf: &'_ mut &'_ [u8])
        ->
            core::result::Result<Self,
            borsh::maybestd::io::Error> {
            let variant_idx: u8 =
                match #[lang = "branch"](borsh::BorshDeserialize::deserialize(buf))
                            {
                        #[lang = "Break"] {  0: residual } =>
                            #[allow(unreachable_code)]
                            return #[lang = "from_residual"](residual),
                        #[lang = "Continue"] {  0: val } =>
                            #[allow(unreachable_code)]
                            val,
                    };
            let return_value =
                match variant_idx {
                        0u8 => WalletInstruction::Initialize,
                        1u8 =>
                            WalletInstruction::Deposit{
                                amount:
                                    match #[lang = "branch"](borsh::BorshDeserialize::deserialize(buf))
                                                {
                                            #[lang = "Break"] {  0: residual } =>
                                                #[allow(unreachable_code)]
                                                return #[lang = "from_residual"](residual),
                                            #[lang = "Continue"] {  0: val } =>
                                                #[allow(unreachable_code)]
                                                val,
                                        },},
                        2u8 =>
                            WalletInstruction::Withdraw{
                                amount:
                                    match #[lang = "branch"](borsh::BorshDeserialize::deserialize(buf))
                                                {
                                            #[lang = "Break"] {  0: residual } =>
                                                #[allow(unreachable_code)]
                                                return #[lang = "from_residual"](residual),
                                            #[lang = "Continue"] {  0: val } =>
                                                #[allow(unreachable_code)]
                                                val,
                                        },},
                        _ => {
                            let msg =





                                {
                                        let res =
                                            ::alloc::fmt::format(format_arguments::new_v1(&["Unexpected variant index: "],
                                                    &[format_argument::new_debug(&variant_idx)]));
                                        res
                                    };
                            return Err(borsh::maybestd::io::Error::new(borsh::maybestd::io::ErrorKind::InvalidInput,
                                        msg));
                        }
                    };
            Ok(return_value)
        }
}
impl borsh::ser::BorshSerialize for WalletInstruction where
    u64: borsh::ser::BorshSerialize, u64: borsh::ser::BorshSerialize {
    fn serialize<W, '_, '_>(self: &'_ Self, writer: &'_ mut W)
        -> core::result::Result<(), borsh::maybestd::io::Error> where
        W: borsh::maybestd::io::Write {
            let variant_idx: u8 =
                match self {
                        WalletInstruction::Initialize => 0u8,
                        WalletInstruction::Deposit { .. } => 1u8,
                        WalletInstruction::Withdraw { .. } => 2u8,
                    };
            match #[lang = "branch"](writer.write_all(&variant_idx.to_le_bytes()))
                        {
                    #[lang = "Break"] {  0: residual } =>
                        #[allow(unreachable_code)]
                        return #[lang = "from_residual"](residual),
                    #[lang = "Continue"] {  0: val } =>
                        #[allow(unreachable_code)]
                        val,
                };
            match self {
                    WalletInstruction::Initialize => { }
                    WalletInstruction::Deposit {  amount } => {
                        match #[lang = "branch"](borsh::BorshSerialize::serialize(amount,
                                            writer)) {
                                #[lang = "Break"] {  0: residual } =>
                                    #[allow(unreachable_code)]
                                    return #[lang = "from_residual"](residual),
                                #[lang = "Continue"] {  0: val } =>
                                    #[allow(unreachable_code)]
                                    val,
                            };
                    }
                    WalletInstruction::Withdraw {  amount } => {
                        match #[lang = "branch"](borsh::BorshSerialize::serialize(amount,
                                            writer)) {
                                #[lang = "Break"] {  0: residual } =>
                                    #[allow(unreachable_code)]
                                    return #[lang = "from_residual"](residual),
                                #[lang = "Continue"] {  0: val } =>
                                    #[allow(unreachable_code)]
                                    val,
                            };
                    }
                }
            Ok(())
        }
}
mod processor {
    use borsh::BorshDeserialize;
    use ::{};
    use ::{};
    use solana_program::account_info::next_account_info;
    use solana_program::account_info::AccountInfo;
    use solana_program::entrypoint::ProgramResult;
    use solana_program::msg;
    use ::{};
    use solana_program::program::invoke;
    use solana_program::program::invoke_signed;
    use solana_program::program_pack::Pack;
    use solana_program::pubkey::Pubkey;
    use solana_program::rent::Rent;
    use solana_program::system_instruction;
    use solana_program::sysvar::Sysvar;
    use ::{};
    use crate::get_authority;
    use crate::get_wallet_address;
    use crate::WalletInstruction;
    use vendored_spl_token as spl_token;
    fn process_instruction<'_, '_, '_,
        '_>(program_id: &'_ Pubkey, accounts: &'_ [AccountInfo<>],
        mut instruction_data: &'_ [u8])
        ->
            ProgramResult {
            match match #[lang = "branch"](WalletInstruction::deserialize(&mut instruction_data))
                                    {
                                #[lang = "Break"] {  0: residual } =>
                                    #[allow(unreachable_code)]
                                    return #[lang = "from_residual"](residual),
                                #[lang = "Continue"] {  0: val } =>
                                    #[allow(unreachable_code)]
                                    val,
                            } {
                    WalletInstruction::Initialize =>
                        initialize(program_id, accounts),
                    WalletInstruction::Deposit {  amount } =>
                        deposit(program_id, accounts, amount),
                    WalletInstruction::Withdraw {  amount } =>
                        withdraw(program_id, accounts, amount),
                }
        }
    fn initialize<'_, '_,
        '_>(program_id: &'_ Pubkey, accounts: &'_ [AccountInfo<>])
        ->
            ProgramResult {
            let account_info_iter = &mut accounts.iter();
            let wallet_info =
                match #[lang = "branch"](next_account_info(account_info_iter))
                            {
                        #[lang = "Break"] {  0: residual } =>
                            #[allow(unreachable_code)]
                            return #[lang = "from_residual"](residual),
                        #[lang = "Continue"] {  0: val } =>
                            #[allow(unreachable_code)]
                            val,
                    };
            let authority_info =
                match #[lang = "branch"](next_account_info(account_info_iter))
                            {
                        #[lang = "Break"] {  0: residual } =>
                            #[allow(unreachable_code)]
                            return #[lang = "from_residual"](residual),
                        #[lang = "Continue"] {  0: val } =>
                            #[allow(unreachable_code)]
                            val,
                    };
            let owner =
                match #[lang = "branch"](next_account_info(account_info_iter))
                            {
                        #[lang = "Break"] {  0: residual } =>
                            #[allow(unreachable_code)]
                            return #[lang = "from_residual"](residual),
                        #[lang = "Continue"] {  0: val } =>
                            #[allow(unreachable_code)]
                            val,
                    };
            let mint =
                match #[lang = "branch"](next_account_info(account_info_iter))
                            {
                        #[lang = "Break"] {  0: residual } =>
                            #[allow(unreachable_code)]
                            return #[lang = "from_residual"](residual),
                        #[lang = "Continue"] {  0: val } =>
                            #[allow(unreachable_code)]
                            val,
                    };
            let rent_info =
                match #[lang = "branch"](next_account_info(account_info_iter))
                            {
                        #[lang = "Break"] {  0: residual } =>
                            #[allow(unreachable_code)]
                            return #[lang = "from_residual"](residual),
                        #[lang = "Continue"] {  0: val } =>
                            #[allow(unreachable_code)]
                            val,
                    };
            let spl_token =
                match #[lang = "branch"](next_account_info(account_info_iter))
                            {
                        #[lang = "Break"] {  0: residual } =>
                            #[allow(unreachable_code)]
                            return #[lang = "from_residual"](residual),
                        #[lang = "Continue"] {  0: val } =>
                            #[allow(unreachable_code)]
                            val,
                    };
            let (wallet_address, wallet_seed) =
                get_wallet_address(owner.key, program_id);
            let (authority_address, _) = get_authority(program_id);
            let rent =
                match #[lang = "branch"](Rent::from_account_info(rent_info)) {
                        #[lang = "Break"] {  0: residual } =>
                            #[allow(unreachable_code)]
                            return #[lang = "from_residual"](residual),
                        #[lang = "Continue"] {  0: val } =>
                            #[allow(unreachable_code)]
                            val,
                    };
            if wallet_info.key != &wallet_address
                    { { ::std::rt::begin_panic("explicit panic") }; }
                    if authority_info.key != &authority_address
                            { { ::std::rt::begin_panic("explicit panic") }; }
                            if !owner.is_signer
                                    { { ::std::rt::begin_panic("explicit panic") }; }
                                    Ok(())
                                }
                            fn deposit<'_, '_,
                                '_>(_program_id: &'_ Pubkey, accounts: &'_ [AccountInfo<>],
                                amount: u64)
                                ->
                                    ProgramResult {
                                    let account_info_iter = &mut accounts.iter();
                                    let wallet_info =
                                        match #[lang = "branch"](next_account_info(account_info_iter))
                                                    {
                                                #[lang = "Break"] {  0: residual } =>
                                                    #[allow(unreachable_code)]
                                                    return #[lang = "from_residual"](residual),
                                                #[lang = "Continue"] {  0: val } =>
                                                    #[allow(unreachable_code)]
                                                    val,
                                            };
                                    let source_info =
                                        match #[lang = "branch"](next_account_info(account_info_iter))
                                                    {
                                                #[lang = "Break"] {  0: residual } =>
                                                    #[allow(unreachable_code)]
                                                    return #[lang = "from_residual"](residual),
                                                #[lang = "Continue"] {  0: val } =>
                                                    #[allow(unreachable_code)]
                                                    val,
                                            };
                                    let user_authority_info =
                                        match #[lang = "branch"](next_account_info(account_info_iter))
                                                    {
                                                #[lang = "Break"] {  0: residual } =>
                                                    #[allow(unreachable_code)]
                                                    return #[lang = "from_residual"](residual),
                                                #[lang = "Continue"] {  0: val } =>
                                                    #[allow(unreachable_code)]
                                                    val,
                                            };
                                    let mint =
                                        match #[lang = "branch"](next_account_info(account_info_iter))
                                                    {
                                                #[lang = "Break"] {  0: residual } =>
                                                    #[allow(unreachable_code)]
                                                    return #[lang = "from_residual"](residual),
                                                #[lang = "Continue"] {  0: val } =>
                                                    #[allow(unreachable_code)]
                                                    val,
                                            };
                                    let spl_token =
                                        match #[lang = "branch"](next_account_info(account_info_iter))
                                                    {
                                                #[lang = "Break"] {  0: residual } =>
                                                    #[allow(unreachable_code)]
                                                    return #[lang = "from_residual"](residual),
                                                #[lang = "Continue"] {  0: val } =>
                                                    #[allow(unreachable_code)]
                                                    val,
                                            };
                                    let decimals = mint.data.borrow()[44];
                                    Ok(())
                                }
                            fn withdraw<'_, '_,
                                '_>(program_id: &'_ Pubkey, accounts: &'_ [AccountInfo<>],
                                amount: u64)
                                ->
                                    ProgramResult {
                                    let account_info_iter = &mut accounts.iter();
                                    let wallet_info =
                                        match #[lang = "branch"](next_account_info(account_info_iter))
                                                    {
                                                #[lang = "Break"] {  0: residual } =>
                                                    #[allow(unreachable_code)]
                                                    return #[lang = "from_residual"](residual),
                                                #[lang = "Continue"] {  0: val } =>
                                                    #[allow(unreachable_code)]
                                                    val,
                                            };
                                    let authority_info =
                                        match #[lang = "branch"](next_account_info(account_info_iter))
                                                    {
                                                #[lang = "Break"] {  0: residual } =>
                                                    #[allow(unreachable_code)]
                                                    return #[lang = "from_residual"](residual),
                                                #[lang = "Continue"] {  0: val } =>
                                                    #[allow(unreachable_code)]
                                                    val,
                                            };
                                    let owner_info =
                                        match #[lang = "branch"](next_account_info(account_info_iter))
                                                    {
                                                #[lang = "Break"] {  0: residual } =>
                                                    #[allow(unreachable_code)]
                                                    return #[lang = "from_residual"](residual),
                                                #[lang = "Continue"] {  0: val } =>
                                                    #[allow(unreachable_code)]
                                                    val,
                                            };
                                    let destination_info =
                                        match #[lang = "branch"](next_account_info(account_info_iter))
                                                    {
                                                #[lang = "Break"] {  0: residual } =>
                                                    #[allow(unreachable_code)]
                                                    return #[lang = "from_residual"](residual),
                                                #[lang = "Continue"] {  0: val } =>
                                                    #[allow(unreachable_code)]
                                                    val,
                                            };
                                    let mint =
                                        match #[lang = "branch"](next_account_info(account_info_iter))
                                                    {
                                                #[lang = "Break"] {  0: residual } =>
                                                    #[allow(unreachable_code)]
                                                    return #[lang = "from_residual"](residual),
                                                #[lang = "Continue"] {  0: val } =>
                                                    #[allow(unreachable_code)]
                                                    val,
                                            };
                                    let spl_token =
                                        match #[lang = "branch"](next_account_info(account_info_iter))
                                                    {
                                                #[lang = "Break"] {  0: residual } =>
                                                    #[allow(unreachable_code)]
                                                    return #[lang = "from_residual"](residual),
                                                #[lang = "Continue"] {  0: val } =>
                                                    #[allow(unreachable_code)]
                                                    val,
                                            };
                                    let (wallet_address, _) =
                                        get_wallet_address(owner_info.key, program_id);
                                    let (authority_address, authority_seed) =
                                        get_authority(program_id);
                                    if wallet_info.key != &wallet_address
                                            { { ::std::rt::begin_panic("explicit panic") }; }
                                            if authority_info.key != &authority_address
                                                    { { ::std::rt::begin_panic("explicit panic") }; }
                                                    if !owner_info.is_signer
                                                            { { ::std::rt::begin_panic("explicit panic") }; }
                                                            let decimals = mint.data.borrow()[44];
                                                            Ok(())
                                                        }
                                                }
                                                use processor::process_instruction;
                                                /// # Safety
                                                #[no_mangle]
                                                unsafe extern "C" fn entrypoint(input: *mut u8)
                                                    ->
                                                        u64 {
                                                        let (program_id, accounts, instruction_data) =
                                                            unsafe { ::solana_program::entrypoint::deserialize(input) };
                                                        match process_instruction(&program_id, &accounts,
                                                                        &instruction_data) {
                                                                Ok(()) => ::solana_program::entrypoint::SUCCESS,
                                                                Err(error) => error.into(),
                                                            }
                                                    }
                                                fn get_wallet_address<'_,
                                                    '_>(owner: &'_ Pubkey, wallet_program: &'_ Pubkey)
                                                    ->
                                                        (Pubkey,
                                                        u8) {
                                                        Pubkey::find_program_address(&[&owner.to_bytes()],
                                                            wallet_program)
                                                    }
                                                fn get_authority<'_>(wallet_program: &'_ Pubkey)
                                                    ->
                                                        (Pubkey,
                                                        u8) { Pubkey::find_program_address(&[], wallet_program) }
                                                fn initialize(wallet_program: Pubkey, owner_address: Pubkey,
                                                    mint: Pubkey)
                                                    ->
                                                        Instruction {
                                                        let wallet_address =
                                                            get_wallet_address(&owner_address, &wallet_program).0;
                                                        let authority_address = get_authority(&wallet_program).0;
                                                        Instruction{
                                                            program_id: wallet_program,

                                                            accounts:
                                                                <[_]>::into_vec(
                                                                    #[rustc_box]
                                                                    ::alloc::boxed::Box::new([AccountMeta::new(wallet_address,
                                                                                    false), AccountMeta::new_readonly(authority_address, false),
                                                                                AccountMeta::new(owner_address, true),
                                                                                AccountMeta::new(mint, false),
                                                                                AccountMeta::new_readonly(sysvar::rent::id(), false),
                                                                                AccountMeta::new_readonly(spl_token::id(), false),
                                                                                AccountMeta::new_readonly(system_program::id(), false)])),

                                                            data: WalletInstruction::Initialize.try_to_vec().unwrap(),}
                                                    }
                                                fn deposit(wallet_program: Pubkey, owner_address: Pubkey,
                                                    source: Pubkey, source_authority: Pubkey, mint: Pubkey,
                                                    amount: u64)
                                                    ->
                                                        Instruction {
                                                        let wallet_address =
                                                            get_wallet_address(&owner_address, &wallet_program).0;
                                                        Instruction{
                                                            program_id: wallet_program,

                                                            accounts:
                                                                <[_]>::into_vec(
                                                                    #[rustc_box]
                                                                    ::alloc::boxed::Box::new([AccountMeta::new(wallet_address,
                                                                                    false), AccountMeta::new(source, false),
                                                                                AccountMeta::new_readonly(source_authority, true),
                                                                                AccountMeta::new_readonly(mint, false),
                                                                                AccountMeta::new_readonly(spl_token::id(), false)])),

                                                            data:
                                                                WalletInstruction::Deposit{ amount,}.try_to_vec().unwrap(),}
                                                    }
                                                fn withdraw(wallet_program: Pubkey, owner_address: Pubkey,
                                                    destination: Pubkey, mint: Pubkey, amount: u64)
                                                    ->
                                                        Instruction {
                                                        let wallet_address =
                                                            get_wallet_address(&owner_address, &wallet_program).0;
                                                        let authority_address = get_authority(&wallet_program).0;
                                                        Instruction{
                                                            program_id: wallet_program,

                                                            accounts:
                                                                <[_]>::into_vec(
                                                                    #[rustc_box]
                                                                    ::alloc::boxed::Box::new([AccountMeta::new(wallet_address,
                                                                                    false), AccountMeta::new_readonly(authority_address, false),
                                                                                AccountMeta::new_readonly(owner_address, true),
                                                                                AccountMeta::new(destination, false),
                                                                                AccountMeta::new_readonly(mint, false),
                                                                                AccountMeta::new_readonly(spl_token::id(), false)])),

                                                            data:
                                                                WalletInstruction::Withdraw{
                                                                            amount,}.try_to_vec().unwrap(),}
                                                    }
