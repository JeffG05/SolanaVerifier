// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn entrypoint(_1: *mut u8) -> u64 {
    debug input => _1;
    let mut _0: u64;
    let _2: &solana_program::pubkey::Pubkey;
    let _3: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _4: &[u8];
    let mut _5: (&solana_program::pubkey::Pubkey, std::vec::Vec<solana_program::account_info::AccountInfo<'_>>, &[u8]);
    let mut _6: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _7: &&solana_program::pubkey::Pubkey;
    let _8: &[solana_program::account_info::AccountInfo<'_>];
    let _9: &std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _10: &&[u8];
    let mut _11: isize;
    let mut _13: &solana_program::pubkey::Pubkey;
    let mut _14: &[u8];
    scope 1 {
        debug program_id => _2;
        debug accounts => _3;
        debug instruction_data => _4;
        let _12: solana_program::program_error::ProgramError;
        scope 3 {
            debug error => _12;
        }
    }
    scope 2 {
    }

    bb0: {
        _5 = solana_program::entrypoint::deserialize::<'_>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = (_5.0: &solana_program::pubkey::Pubkey);
        _3 = move (_5.1: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>);
        _4 = (_5.2: &[u8]);
        _7 = &_2;
        _13 = deref_copy (*_7);
        _9 = &_3;
        _8 = <Vec<AccountInfo<'_>> as Deref>::deref(_9) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _10 = &_4;
        _14 = deref_copy (*_10);
        _6 = process_instruction(_13, _8, _14) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb6, 1: bb5, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _12 = move ((_6 as Err).0: solana_program::program_error::ProgramError);
        _0 = <ProgramError as Into<u64>>::into(move _12) -> [return: bb12, unwind: bb9];
    }

    bb6: {
        _0 = const solana_program::entrypoint::SUCCESS;
        goto -> bb7;
    }

    bb7: {
        drop(_3) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        goto -> bb7;
    }
}

fn process_instruction(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: &[u8]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug _instruction_data => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _4: bool;
    let mut _5: &solana_program::pubkey::Pubkey;
    let mut _6: solana_program::program_error::ProgramError;
    let mut _7: bool;
    let mut _8: usize;
    let mut _9: solana_program::program_error::ProgramError;
    let _10: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _11: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _13: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _14: isize;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _18: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _19: isize;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _23: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _24: isize;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _28: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _29: isize;
    let mut _32: u64;
    let mut _33: solana_program::program_error::ProgramError;
    let mut _34: u64;
    let mut _35: solana_program::program_error::ProgramError;
    let mut _36: bool;
    let mut _37: &&solana_program::pubkey::Pubkey;
    let mut _38: &&solana_program::pubkey::Pubkey;
    let mut _39: solana_program::program_error::ProgramError;
    let mut _40: bool;
    let mut _41: &&solana_program::pubkey::Pubkey;
    let mut _42: solana_program::program_error::ProgramError;
    scope 1 {
        debug accounts_iter => _10;
        let _15: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _16: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug _payer => _16;
            let _20: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _21: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug account_to_create => _21;
                let _25: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _26: &solana_program::account_info::AccountInfo<'_>;
                scope 12 {
                    debug account_to_change => _26;
                    let _30: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _31: &solana_program::account_info::AccountInfo<'_>;
                    scope 17 {
                        debug system_program => _31;
                        let mut _43: &&solana_program::pubkey::Pubkey;
                    }
                    scope 18 {
                        debug residual => _30;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _31;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _25;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _26;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _20;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _21;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _15;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _16;
            scope 6 {
            }
        }
    }

    bb0: {
        _5 = _1;
        _4 = solana_program::system_program::check_id(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = solana_program::program_error::ProgramError::IncorrectProgramId;
        _0 = Result::<(), ProgramError>::Err(move _6);
        goto -> bb36;
    }

    bb3: {
        _8 = Len((*_2));
        _7 = Lt(move _8, const 4_usize);
        switchInt(move _7) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _9 = solana_program::program_error::ProgramError::NotEnoughAccountKeys;
        _0 = Result::<(), ProgramError>::Err(move _9);
        goto -> bb36;
    }

    bb5: {
        _11 = core::slice::<impl [AccountInfo<'_>]>::iter(_2) -> [return: bb6, unwind continue];
    }

    bb6: {
        _10 = &mut _11;
        _13 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_10) -> [return: bb7, unwind continue];
    }

    bb7: {
        _12 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _13) -> [return: bb8, unwind continue];
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb11, otherwise: bb9];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _16 = ((_12 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _18 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_10) -> [return: bb12, unwind continue];
    }

    bb11: {
        _15 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _15) -> [return: bb36, unwind continue];
    }

    bb12: {
        _17 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _18) -> [return: bb13, unwind continue];
    }

    bb13: {
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb14, 1: bb15, otherwise: bb9];
    }

    bb14: {
        _21 = ((_17 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _23 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_10) -> [return: bb16, unwind continue];
    }

    bb15: {
        _20 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _20) -> [return: bb36, unwind continue];
    }

    bb16: {
        _22 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _23) -> [return: bb17, unwind continue];
    }

    bb17: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb18, 1: bb19, otherwise: bb9];
    }

    bb18: {
        _26 = ((_22 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _28 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_10) -> [return: bb20, unwind continue];
    }

    bb19: {
        _25 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _25) -> [return: bb36, unwind continue];
    }

    bb20: {
        _27 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _28) -> [return: bb21, unwind continue];
    }

    bb21: {
        _29 = discriminant(_27);
        switchInt(move _29) -> [0: bb22, 1: bb23, otherwise: bb9];
    }

    bb22: {
        _31 = ((_27 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _32 = AccountInfo::<'_>::lamports(_21) -> [return: bb24, unwind continue];
    }

    bb23: {
        _30 = move ((_27 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _30) -> [return: bb36, unwind continue];
    }

    bb24: {
        switchInt(move _32) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _33 = solana_program::program_error::ProgramError::AccountAlreadyInitialized;
        _0 = Result::<(), ProgramError>::Err(move _33);
        goto -> bb36;
    }

    bb26: {
        _34 = AccountInfo::<'_>::lamports(_26) -> [return: bb27, unwind continue];
    }

    bb27: {
        switchInt(move _34) -> [0: bb28, otherwise: bb29];
    }

    bb28: {
        _35 = solana_program::program_error::ProgramError::UninitializedAccount;
        _0 = Result::<(), ProgramError>::Err(move _35);
        goto -> bb36;
    }

    bb29: {
        _37 = &((*_26).3: &solana_program::pubkey::Pubkey);
        _38 = &_1;
        _36 = <&Pubkey as PartialEq>::ne(move _37, move _38) -> [return: bb30, unwind continue];
    }

    bb30: {
        switchInt(move _36) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _39 = solana_program::program_error::ProgramError::IncorrectProgramId;
        _0 = Result::<(), ProgramError>::Err(move _39);
        goto -> bb36;
    }

    bb32: {
        _41 = &((*_31).0: &solana_program::pubkey::Pubkey);
        _43 = const process_instruction::promoted[0];
        _40 = <&Pubkey as PartialEq>::ne(move _41, _43) -> [return: bb33, unwind continue];
    }

    bb33: {
        switchInt(move _40) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _42 = solana_program::program_error::ProgramError::IncorrectProgramId;
        _0 = Result::<(), ProgramError>::Err(move _42);
        goto -> bb36;
    }

    bb35: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        goto -> bb36;
    }

    bb36: {
        return;
    }
}

const process_instruction::promoted[0]: &&Pubkey = {
    let mut _0: &&solana_program::pubkey::Pubkey;
    let mut _1: &solana_program::pubkey::Pubkey;
    let mut _2: solana_program::pubkey::Pubkey;

    bb0: {
        _2 = const solana_program::system_program::ID;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}
