#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
use ::{};
use ::{};
use solana_program::account_info::next_account_info;
use solana_program::account_info::AccountInfo;
use solana_program::entrypoint;
use solana_program::entrypoint::ProgramResult;
use solana_program::msg;
use solana_program::program_error::ProgramError;
use solana_program::pubkey::Pubkey;
use solana_program::system_program;


// You can verify the program ID from the instruction is in fact
//      the program ID of your program.

// You can verify the list has the correct number of accounts.
// This error will get thrown by default if you
//      try to reach past the end of the iter.



// Accounts passed in a vector must be in the expected order.

// You can make sure an account has NOT been initialized.



// (Create account...)

// You can also make sure an account has been initialized.



// If we want to modify an account's data, it must be owned by our program.


// You can also check pubkeys against constants.

/// # Safety
#[no_mangle]
unsafe extern "C" fn entrypoint(input: *mut u8)
    ->
        u64 {
        let (program_id, accounts, instruction_data) =
            unsafe { ::solana_program::entrypoint::deserialize(input) };
        match process_instruction(&program_id, &accounts, &instruction_data) {
                Ok(()) => ::solana_program::entrypoint::SUCCESS,
                Err(error) => error.into(),
            }
    }
fn process_instruction<'_, '_, '_,
    '_>(program_id: &'_ Pubkey, accounts: &'_ [AccountInfo<>],
    _instruction_data: &'_ [u8])
    ->
        ProgramResult {
        if system_program::check_id(program_id)
                { return Err(ProgramError::IncorrectProgramId); };
                if accounts.len() < 4
                        { return Err(ProgramError::NotEnoughAccountKeys); };
                        let accounts_iter = &mut accounts.iter();
                        let _payer =
                            match #[lang = "branch"](next_account_info(accounts_iter)) {
                                    #[lang = "Break"] {  0: residual } =>
                                        #[allow(unreachable_code)]
                                        return #[lang = "from_residual"](residual),
                                    #[lang = "Continue"] {  0: val } =>
                                        #[allow(unreachable_code)]
                                        val,
                                };
                        let account_to_create =
                            match #[lang = "branch"](next_account_info(accounts_iter)) {
                                    #[lang = "Break"] {  0: residual } =>
                                        #[allow(unreachable_code)]
                                        return #[lang = "from_residual"](residual),
                                    #[lang = "Continue"] {  0: val } =>
                                        #[allow(unreachable_code)]
                                        val,
                                };
                        let account_to_change =
                            match #[lang = "branch"](next_account_info(accounts_iter)) {
                                    #[lang = "Break"] {  0: residual } =>
                                        #[allow(unreachable_code)]
                                        return #[lang = "from_residual"](residual),
                                    #[lang = "Continue"] {  0: val } =>
                                        #[allow(unreachable_code)]
                                        val,
                                };
                        let system_program =
                            match #[lang = "branch"](next_account_info(accounts_iter)) {
                                    #[lang = "Break"] {  0: residual } =>
                                        #[allow(unreachable_code)]
                                        return #[lang = "from_residual"](residual),
                                    #[lang = "Continue"] {  0: val } =>
                                        #[allow(unreachable_code)]
                                        val,
                                };
                        if account_to_create.lamports() != 0
                                { return Err(ProgramError::AccountAlreadyInitialized); };
                                if account_to_change.lamports() == 0
                                        { return Err(ProgramError::UninitializedAccount); };
                                        if account_to_change.owner != program_id
                                                { return Err(ProgramError::IncorrectProgramId); };
                                                if system_program.key != &system_program::ID
                                                        { return Err(ProgramError::IncorrectProgramId); };
                                                        Ok(())
                                                    }
