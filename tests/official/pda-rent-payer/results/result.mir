// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn create_new_account(_1: &Pubkey, _2: &[AccountInfo<'_>]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _3: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _4: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _6: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _7: isize;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _11: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _12: isize;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _16: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _17: isize;
    let mut _22: (solana_program::pubkey::Pubkey, u8);
    let mut _23: &[&[u8]];
    let _24: &[&[u8]; 1];
    let _25: [&[u8]; 1];
    let _26: &[u8];
    let _27: &str;
    let mut _28: bool;
    let _29: &solana_program::pubkey::Pubkey;
    let mut _30: !;
    let mut _32: &solana_program::rent::Rent;
    let _33: solana_program::rent::Rent;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::rent::Rent>;
    let mut _35: std::result::Result<solana_program::rent::Rent, solana_program::program_error::ProgramError>;
    let mut _36: isize;
    let mut _39: &mut &mut u64;
    let mut _40: &mut std::cell::RefMut<'_, &mut u64>;
    let mut _41: std::cell::RefMut<'_, &mut u64>;
    let _42: &std::cell::RefCell<&mut u64>;
    let mut _43: &std::rc::Rc<std::cell::RefCell<&mut u64>>;
    let mut _44: &mut &mut u64;
    let mut _45: &mut std::cell::RefMut<'_, &mut u64>;
    let mut _46: std::cell::RefMut<'_, &mut u64>;
    let _47: &std::cell::RefCell<&mut u64>;
    let mut _48: &std::rc::Rc<std::cell::RefCell<&mut u64>>;
    let mut _49: &solana_program::pubkey::Pubkey;
    let mut _50: &mut u64;
    let mut _51: &mut u64;
    let mut _52: &mut u64;
    let mut _53: &mut u64;
    scope 1 {
        debug accounts_iter => _3;
        let _8: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _9: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug new_account => _9;
            let _13: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _14: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug rent_vault => _14;
                let _18: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _19: &solana_program::account_info::AccountInfo<'_>;
                scope 12 {
                    debug _system_program => _19;
                    let _20: solana_program::pubkey::Pubkey;
                    let _21: u8;
                    scope 17 {
                        debug rent_vault_pda => _20;
                        debug _rent_vault_bump => _21;
                        let _31: u64;
                        let _37: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _38: solana_program::rent::Rent;
                        scope 18 {
                            debug lamports_required_for_rent => _31;
                        }
                        scope 19 {
                            debug residual => _37;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => _38;
                            scope 22 {
                            }
                        }
                    }
                }
                scope 13 {
                    debug residual => _18;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _19;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _13;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _14;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _8;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _9;
            scope 6 {
            }
        }
    }

    bb0: {
        _4 = core::slice::<impl [AccountInfo<'_>]>::iter(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &mut _4;
        _6 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb5, 1: bb6, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _9 = ((_5 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _11 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_3) -> [return: bb7, unwind continue];
    }

    bb6: {
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _8) -> [return: bb33, unwind continue];
    }

    bb7: {
        _10 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _11) -> [return: bb8, unwind continue];
    }

    bb8: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _14 = ((_10 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _16 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_3) -> [return: bb11, unwind continue];
    }

    bb10: {
        _13 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _13) -> [return: bb33, unwind continue];
    }

    bb11: {
        _15 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _16) -> [return: bb12, unwind continue];
    }

    bb12: {
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        _19 = ((_15 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _27 = const state::RentVault::SEED_PREFIX;
        _26 = core::str::<impl str>::as_bytes(_27) -> [return: bb15, unwind continue];
    }

    bb14: {
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _18) -> [return: bb33, unwind continue];
    }

    bb15: {
        _25 = [_26];
        _24 = &_25;
        _23 = _24 as &[&[u8]] (PointerCoercion(Unsize));
        _22 = Pubkey::find_program_address(move _23, _1) -> [return: bb16, unwind continue];
    }

    bb16: {
        _20 = (_22.0: solana_program::pubkey::Pubkey);
        _21 = (_22.1: u8);
        _49 = deref_copy ((*_14).0: &solana_program::pubkey::Pubkey);
        _29 = &_20;
        _28 = <Pubkey as PartialEq>::eq(_49, _29) -> [return: bb17, unwind continue];
    }

    bb17: {
        switchInt(move _28) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _35 = <Rent as Sysvar>::get() -> [return: bb20, unwind continue];
    }

    bb19: {
        _30 = panic(const "assertion failed: rent_vault.key.eq(&rent_vault_pda)") -> unwind continue;
    }

    bb20: {
        _34 = <Result<Rent, ProgramError> as Try>::branch(move _35) -> [return: bb21, unwind continue];
    }

    bb21: {
        _36 = discriminant(_34);
        switchInt(move _36) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        _38 = move ((_34 as Continue).0: solana_program::rent::Rent);
        _33 = move _38;
        _32 = &_33;
        _31 = Rent::minimum_balance(move _32, const 0_usize) -> [return: bb24, unwind continue];
    }

    bb23: {
        _37 = move ((_34 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _37) -> [return: bb33, unwind continue];
    }

    bb24: {
        _43 = &((*_14).1: std::rc::Rc<std::cell::RefCell<&mut u64>>);
        _42 = <Rc<RefCell<&mut u64>> as Deref>::deref(move _43) -> [return: bb25, unwind continue];
    }

    bb25: {
        _41 = RefCell::<&mut u64>::borrow_mut(_42) -> [return: bb26, unwind continue];
    }

    bb26: {
        _40 = &mut _41;
        _39 = <RefMut<'_, &mut u64> as DerefMut>::deref_mut(move _40) -> [return: bb27, unwind: bb35];
    }

    bb27: {
        _50 = deref_copy (*_39);
        _51 = deref_copy (*_39);
        (*_50) = Sub((*_51), _31);
        drop(_41) -> [return: bb28, unwind continue];
    }

    bb28: {
        _48 = &((*_9).1: std::rc::Rc<std::cell::RefCell<&mut u64>>);
        _47 = <Rc<RefCell<&mut u64>> as Deref>::deref(move _48) -> [return: bb29, unwind continue];
    }

    bb29: {
        _46 = RefCell::<&mut u64>::borrow_mut(_47) -> [return: bb30, unwind continue];
    }

    bb30: {
        _45 = &mut _46;
        _44 = <RefMut<'_, &mut u64> as DerefMut>::deref_mut(move _45) -> [return: bb31, unwind: bb34];
    }

    bb31: {
        _52 = deref_copy (*_44);
        _53 = deref_copy (*_44);
        (*_52) = Add((*_53), _31);
        drop(_46) -> [return: bb32, unwind continue];
    }

    bb32: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        goto -> bb33;
    }

    bb33: {
        return;
    }

    bb34 (cleanup): {
        drop(_46) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_41) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        resume;
    }
}

fn init_rent_vault::<impl at src/instructions/init_rent_vault.rs:14:10: 14:26>::deserialize(_1: &mut &[u8]) -> Result<InitRentVaultArgs, std::io::Error> {
    debug buf => _1;
    let mut _0: std::result::Result<instructions::init_rent_vault::InitRentVaultArgs, std::io::Error>;
    let mut _2: instructions::init_rent_vault::InitRentVaultArgs;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _4: std::result::Result<u64, std::io::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _7: u64;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <u64 as BorshDeserialize>::deserialize(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<u64, std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = ((_3 as Continue).0: u64);
        _2 = InitRentVaultArgs { fund_lamports: _7 };
        _0 = Result::<InitRentVaultArgs, std::io::Error>::Ok(move _2);
        goto -> bb6;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<InitRentVaultArgs, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _6) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn init_rent_vault::<impl at src/instructions/init_rent_vault.rs:14:28: 14:42>::serialize(_1: &InitRentVaultArgs, _2: &mut W) -> Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _4: std::result::Result<(), std::io::Error>;
    let _5: &u64;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }

    bb0: {
        _5 = &((*_1).0: u64);
        _4 = <u64 as BorshSerialize>::serialize::<W>(_5, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<(), std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        goto -> bb6;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn init_rent_vault(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: InitRentVaultArgs) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug args => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _5: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _7: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _8: isize;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _12: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _13: isize;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _17: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _18: isize;
    let mut _23: (solana_program::pubkey::Pubkey, u8);
    let mut _24: &[&[u8]];
    let _25: &[&[u8]; 1];
    let _26: [&[u8]; 1];
    let _27: &[u8];
    let _28: &str;
    let mut _29: bool;
    let _30: &solana_program::pubkey::Pubkey;
    let mut _31: !;
    let mut _33: u64;
    let mut _34: &solana_program::rent::Rent;
    let _35: solana_program::rent::Rent;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::rent::Rent>;
    let mut _37: std::result::Result<solana_program::rent::Rent, solana_program::program_error::ProgramError>;
    let mut _38: isize;
    let mut _41: u64;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _43: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _44: &solana_program::instruction::Instruction;
    let _45: solana_program::instruction::Instruction;
    let mut _46: &[solana_program::account_info::AccountInfo<'_>];
    let _47: &[solana_program::account_info::AccountInfo<'_>; 3];
    let _48: [solana_program::account_info::AccountInfo<'_>; 3];
    let mut _49: solana_program::account_info::AccountInfo<'_>;
    let mut _50: solana_program::account_info::AccountInfo<'_>;
    let mut _51: solana_program::account_info::AccountInfo<'_>;
    let mut _52: &[&[&[u8]]];
    let _53: &[&[&[u8]]; 1];
    let _54: [&[&[u8]]; 1];
    let mut _55: &[&[u8]];
    let _56: &[&[u8]; 2];
    let _57: [&[u8]; 2];
    let _58: &[u8];
    let _59: &str;
    let mut _60: &[u8];
    let _61: &[u8; 1];
    let _62: [u8; 1];
    let mut _63: isize;
    let mut _65: &solana_program::pubkey::Pubkey;
    let mut _66: &solana_program::pubkey::Pubkey;
    let mut _67: &solana_program::pubkey::Pubkey;
    scope 1 {
        debug accounts_iter => _4;
        let _9: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _10: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug rent_vault => _10;
            let _14: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _15: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug payer => _15;
                let _19: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _20: &solana_program::account_info::AccountInfo<'_>;
                scope 12 {
                    debug system_program => _20;
                    let _21: solana_program::pubkey::Pubkey;
                    let _22: u8;
                    scope 17 {
                        debug rent_vault_pda => _21;
                        debug rent_vault_bump => _22;
                        let _32: u64;
                        let _39: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _40: solana_program::rent::Rent;
                        scope 18 {
                            debug lamports_required => _32;
                            let _64: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            scope 23 {
                                debug residual => _64;
                                scope 24 {
                                }
                            }
                            scope 25 {
                                debug val => const ();
                                scope 26 {
                                }
                            }
                        }
                        scope 19 {
                            debug residual => _39;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => _40;
                            scope 22 {
                            }
                        }
                    }
                }
                scope 13 {
                    debug residual => _19;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _20;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _14;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _15;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _9;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _10;
            scope 6 {
            }
        }
    }

    bb0: {
        _5 = core::slice::<impl [AccountInfo<'_>]>::iter(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _7 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _10 = ((_6 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _12 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb7, unwind continue];
    }

    bb6: {
        _9 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _9) -> [return: bb38, unwind continue];
    }

    bb7: {
        _11 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _12) -> [return: bb8, unwind continue];
    }

    bb8: {
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _15 = ((_11 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _17 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb11, unwind continue];
    }

    bb10: {
        _14 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _14) -> [return: bb38, unwind continue];
    }

    bb11: {
        _16 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _17) -> [return: bb12, unwind continue];
    }

    bb12: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        _20 = ((_16 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _28 = const state::RentVault::SEED_PREFIX;
        _27 = core::str::<impl str>::as_bytes(_28) -> [return: bb15, unwind continue];
    }

    bb14: {
        _19 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _19) -> [return: bb38, unwind continue];
    }

    bb15: {
        _26 = [_27];
        _25 = &_26;
        _24 = _25 as &[&[u8]] (PointerCoercion(Unsize));
        _23 = Pubkey::find_program_address(move _24, _1) -> [return: bb16, unwind continue];
    }

    bb16: {
        _21 = (_23.0: solana_program::pubkey::Pubkey);
        _22 = (_23.1: u8);
        _65 = deref_copy ((*_10).0: &solana_program::pubkey::Pubkey);
        _30 = &_21;
        _29 = <Pubkey as PartialEq>::eq(_65, _30) -> [return: bb17, unwind continue];
    }

    bb17: {
        switchInt(move _29) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _37 = <Rent as Sysvar>::get() -> [return: bb20, unwind continue];
    }

    bb19: {
        _31 = panic(const "assertion failed: rent_vault.key.eq(&rent_vault_pda)") -> unwind continue;
    }

    bb20: {
        _36 = <Result<Rent, ProgramError> as Try>::branch(move _37) -> [return: bb21, unwind continue];
    }

    bb21: {
        _38 = discriminant(_36);
        switchInt(move _38) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        _40 = move ((_36 as Continue).0: solana_program::rent::Rent);
        _35 = move _40;
        _34 = &_35;
        _33 = Rent::minimum_balance(move _34, const 0_usize) -> [return: bb24, unwind continue];
    }

    bb23: {
        _39 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _39) -> [return: bb38, unwind continue];
    }

    bb24: {
        _41 = (_3.0: u64);
        _32 = Add(move _33, move _41);
        _66 = deref_copy ((*_15).0: &solana_program::pubkey::Pubkey);
        _67 = deref_copy ((*_10).0: &solana_program::pubkey::Pubkey);
        _45 = solana_program::system_instruction::create_account(_66, _67, _32, const 0_u64, _1) -> [return: bb25, unwind continue];
    }

    bb25: {
        _44 = &_45;
        _49 = <AccountInfo<'_> as Clone>::clone(_15) -> [return: bb26, unwind: bb42];
    }

    bb26: {
        _50 = <AccountInfo<'_> as Clone>::clone(_10) -> [return: bb27, unwind: bb41];
    }

    bb27: {
        _51 = <AccountInfo<'_> as Clone>::clone(_20) -> [return: bb28, unwind: bb40];
    }

    bb28: {
        _48 = [move _49, move _50, move _51];
        _47 = &_48;
        _46 = _47 as &[solana_program::account_info::AccountInfo<'_>] (PointerCoercion(Unsize));
        _59 = const state::RentVault::SEED_PREFIX;
        _58 = core::str::<impl str>::as_bytes(_59) -> [return: bb29, unwind: bb39];
    }

    bb29: {
        _62 = [_22];
        _61 = &_62;
        _60 = _61 as &[u8] (PointerCoercion(Unsize));
        _57 = [_58, move _60];
        _56 = &_57;
        _55 = _56 as &[&[u8]] (PointerCoercion(Unsize));
        _54 = [move _55];
        _53 = &_54;
        _52 = _53 as &[&[&[u8]]] (PointerCoercion(Unsize));
        _43 = invoke_signed(_44, move _46, move _52) -> [return: bb30, unwind: bb39];
    }

    bb30: {
        _42 = <Result<(), ProgramError> as Try>::branch(move _43) -> [return: bb31, unwind: bb39];
    }

    bb31: {
        _63 = discriminant(_42);
        switchInt(move _63) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        drop(_48) -> [return: bb35, unwind: bb42];
    }

    bb33: {
        _64 = move ((_42 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _64) -> [return: bb34, unwind: bb39];
    }

    bb34: {
        drop(_48) -> [return: bb37, unwind: bb42];
    }

    bb35: {
        drop(_45) -> [return: bb36, unwind continue];
    }

    bb36: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        goto -> bb38;
    }

    bb37: {
        drop(_45) -> [return: bb38, unwind continue];
    }

    bb38: {
        return;
    }

    bb39 (cleanup): {
        drop(_48) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_50) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_49) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_45) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        resume;
    }
}

fn processor::<impl at src/processor.rs:9:10: 9:24>::serialize(_1: &MyInstruction, _2: &mut W) -> Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let _3: u8;
    let mut _4: isize;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _6: std::result::Result<(), std::io::Error>;
    let mut _7: &[u8];
    let _8: &[u8; 1];
    let _9: [u8; 1];
    let mut _10: u8;
    let mut _11: isize;
    let mut _13: isize;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _16: std::result::Result<(), std::io::Error>;
    let mut _17: isize;
    scope 1 {
        debug variant_idx => _3;
        let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _14: &instructions::init_rent_vault::InitRentVaultArgs;
        scope 2 {
            debug residual => _12;
            scope 3 {
            }
        }
        scope 4 {
            debug val => const ();
            scope 5 {
            }
        }
        scope 6 {
            debug id0 => _14;
            let _18: std::result::Result<std::convert::Infallible, std::io::Error>;
            scope 7 {
                debug residual => _18;
                scope 8 {
                }
            }
            scope 9 {
                debug val => const ();
                scope 10 {
                }
            }
        }
    }

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb2, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _3 = const 1_u8;
        goto -> bb4;
    }

    bb3: {
        _3 = const 0_u8;
        goto -> bb4;
    }

    bb4: {
        _10 = _3;
        _9 = core::num::<impl u8>::to_le_bytes(move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = &_9;
        _7 = _8 as &[u8] (PointerCoercion(Unsize));
        _6 = <W as std::io::Write>::write_all(_2, move _7) -> [return: bb6, unwind continue];
    }

    bb6: {
        _5 = <Result<(), std::io::Error> as Try>::branch(move _6) -> [return: bb7, unwind continue];
    }

    bb7: {
        _11 = discriminant(_5);
        switchInt(move _11) -> [0: bb8, 1: bb9, otherwise: bb1];
    }

    bb8: {
        _13 = discriminant((*_1));
        switchInt(move _13) -> [0: bb10, 1: bb14, otherwise: bb1];
    }

    bb9: {
        _12 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb15, unwind continue];
    }

    bb10: {
        _14 = &(((*_1) as InitRentVault).0: instructions::init_rent_vault::InitRentVaultArgs);
        _16 = <InitRentVaultArgs as BorshSerialize>::serialize::<W>(_14, _2) -> [return: bb11, unwind continue];
    }

    bb11: {
        _15 = <Result<(), std::io::Error> as Try>::branch(move _16) -> [return: bb12, unwind continue];
    }

    bb12: {
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb14, 1: bb13, otherwise: bb1];
    }

    bb13: {
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _18) -> [return: bb15, unwind continue];
    }

    bb14: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        goto -> bb15;
    }

    bb15: {
        return;
    }
}

fn processor::<impl at src/processor.rs:9:26: 9:42>::deserialize(_1: &mut &[u8]) -> Result<MyInstruction, std::io::Error> {
    debug buf => _1;
    let mut _0: std::result::Result<processor::MyInstruction, std::io::Error>;
    let _2: u8;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u8>;
    let mut _4: std::result::Result<u8, std::io::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _7: u8;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, instructions::init_rent_vault::InitRentVaultArgs>;
    let mut _10: std::result::Result<instructions::init_rent_vault::InitRentVaultArgs, std::io::Error>;
    let mut _11: isize;
    let mut _15: std::fmt::Arguments<'_>;
    let mut _16: &[&str];
    let mut _17: &[core::fmt::rt::Argument<'_>];
    let _18: &[core::fmt::rt::Argument<'_>; 1];
    let _19: [core::fmt::rt::Argument<'_>; 1];
    let mut _20: core::fmt::rt::Argument<'_>;
    let _21: &u8;
    let mut _22: std::io::Error;
    let mut _23: std::io::ErrorKind;
    let mut _24: processor::MyInstruction;
    scope 1 {
        debug variant_idx => _2;
        let _8: processor::MyInstruction;
        let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _13: instructions::init_rent_vault::InitRentVaultArgs;
        let _14: std::string::String;
        let mut _25: &[&str; 1];
        scope 6 {
            debug return_value => _8;
        }
        scope 7 {
            debug residual => _12;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _13;
            scope 10 {
            }
        }
        scope 11 {
            debug msg => _14;
        }
        scope 12 {
            debug res => _14;
        }
    }
    scope 2 {
        debug residual => _6;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;
        scope 5 {
        }
    }

    bb0: {
        _4 = <u8 as BorshDeserialize>::deserialize(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<u8, std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = ((_3 as Continue).0: u8);
        _2 = _7;
        switchInt(_2) -> [0: bb7, 1: bb12, otherwise: bb6];
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<MyInstruction, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _6) -> [return: bb18, unwind continue];
    }

    bb6: {
        _25 = const <processor::MyInstruction as borsh::BorshDeserialize>::deserialize::promoted[0];
        _16 = _25 as &[&str] (PointerCoercion(Unsize));
        _21 = &_2;
        _20 = core::fmt::rt::Argument::<'_>::new_debug::<u8>(_21) -> [return: bb13, unwind continue];
    }

    bb7: {
        _10 = <InitRentVaultArgs as BorshDeserialize>::deserialize(_1) -> [return: bb8, unwind continue];
    }

    bb8: {
        _9 = <Result<InitRentVaultArgs, std::io::Error> as Try>::branch(move _10) -> [return: bb9, unwind continue];
    }

    bb9: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb10, 1: bb11, otherwise: bb3];
    }

    bb10: {
        _13 = move ((_9 as Continue).0: instructions::init_rent_vault::InitRentVaultArgs);
        _8 = MyInstruction::InitRentVault(move _13);
        goto -> bb17;
    }

    bb11: {
        _12 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<MyInstruction, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb18, unwind continue];
    }

    bb12: {
        _8 = MyInstruction::CreateNewAccount;
        goto -> bb17;
    }

    bb13: {
        _19 = [move _20];
        _18 = &_19;
        _17 = _18 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _15 = Arguments::<'_>::new_v1(move _16, move _17) -> [return: bb14, unwind continue];
    }

    bb14: {
        _14 = format(move _15) -> [return: bb15, unwind continue];
    }

    bb15: {
        _23 = InvalidInput;
        _22 = std::io::Error::new::<String>(move _23, move _14) -> [return: bb16, unwind continue];
    }

    bb16: {
        _0 = Result::<MyInstruction, std::io::Error>::Err(move _22);
        goto -> bb18;
    }

    bb17: {
        _24 = move _8;
        _0 = Result::<MyInstruction, std::io::Error>::Ok(move _24);
        goto -> bb18;
    }

    bb18: {
        return;
    }
}

const processor::<impl at src/processor.rs:9:26: 9:42>::deserialize::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Unexpected variant index: "];
        _0 = &_1;
        return;
    }
}

fn process_instruction(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: &[u8]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug input => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, processor::MyInstruction>;
    let mut _5: std::result::Result<processor::MyInstruction, std::io::Error>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _8: processor::MyInstruction;
    let mut _9: isize;
    scope 1 {
        debug instruction => _8;
        let _10: instructions::init_rent_vault::InitRentVaultArgs;
        scope 6 {
            debug args => _10;
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _5 = <MyInstruction as BorshDeserialize>::try_from_slice(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <Result<MyInstruction, std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _8 = move ((_4 as Continue).0: processor::MyInstruction);
        _9 = discriminant(_8);
        switchInt(move _9) -> [0: bb7, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> [return: bb8, unwind continue];
    }

    bb6: {
        _0 = create_new_account(_1, _2) -> [return: bb8, unwind continue];
    }

    bb7: {
        _10 = move ((_8 as InitRentVault).0: instructions::init_rent_vault::InitRentVaultArgs);
        _0 = init_rent_vault(_1, _2, move _10) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

fn state::<impl at src/state/mod.rs:3:10: 3:26>::deserialize(_1: &mut &[u8]) -> Result<RentVault, std::io::Error> {
    debug buf => _1;
    let mut _0: std::result::Result<state::RentVault, std::io::Error>;

    bb0: {
        _0 = Result::<RentVault, std::io::Error>::Ok(const RentVault {{  }});
        return;
    }
}

fn state::<impl at src/state/mod.rs:3:28: 3:42>::serialize(_1: &RentVault, _2: &mut W) -> Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;

    bb0: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        return;
    }
}

fn state::<impl at src/state/mod.rs:3:44: 3:49>::fmt(_1: &RentVault, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "RentVault";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const state::<impl at src/state/mod.rs:6:1: 6:15>::SEED_PREFIX: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "rent_vault";
        return;
    }
}

fn entrypoint(_1: *mut u8) -> u64 {
    debug input => _1;
    let mut _0: u64;
    let _2: &solana_program::pubkey::Pubkey;
    let _3: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _4: &[u8];
    let mut _5: (&solana_program::pubkey::Pubkey, std::vec::Vec<solana_program::account_info::AccountInfo<'_>>, &[u8]);
    let mut _6: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _7: &&solana_program::pubkey::Pubkey;
    let _8: &[solana_program::account_info::AccountInfo<'_>];
    let _9: &std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _10: &&[u8];
    let mut _11: isize;
    let mut _13: &solana_program::pubkey::Pubkey;
    let mut _14: &[u8];
    scope 1 {
        debug program_id => _2;
        debug accounts => _3;
        debug instruction_data => _4;
        let _12: solana_program::program_error::ProgramError;
        scope 3 {
            debug error => _12;
        }
    }
    scope 2 {
    }

    bb0: {
        _5 = solana_program::entrypoint::deserialize::<'_>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = (_5.0: &solana_program::pubkey::Pubkey);
        _3 = move (_5.1: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>);
        _4 = (_5.2: &[u8]);
        _7 = &_2;
        _13 = deref_copy (*_7);
        _9 = &_3;
        _8 = <Vec<AccountInfo<'_>> as Deref>::deref(_9) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _10 = &_4;
        _14 = deref_copy (*_10);
        _6 = process_instruction(_13, _8, _14) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb6, 1: bb5, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _12 = move ((_6 as Err).0: solana_program::program_error::ProgramError);
        _0 = <ProgramError as Into<u64>>::into(move _12) -> [return: bb12, unwind: bb9];
    }

    bb6: {
        _0 = const solana_program::entrypoint::SUCCESS;
        goto -> bb7;
    }

    bb7: {
        drop(_3) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        goto -> bb7;
    }
}

fn MyInstruction::InitRentVault(_1: InitRentVaultArgs) -> MyInstruction {
    let mut _0: processor::MyInstruction;

    bb0: {
        _0 = MyInstruction::InitRentVault(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MyInstruction::InitRentVault(_1: InitRentVaultArgs) -> MyInstruction {
    let mut _0: processor::MyInstruction;

    bb0: {
        _0 = MyInstruction::InitRentVault(move _1);
        return;
    }
}
