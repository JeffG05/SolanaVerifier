#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
use ::{};
use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use ::{};
use solana_program::account_info::AccountInfo;
use solana_program::entrypoint;
use solana_program::entrypoint::ProgramResult;
use solana_program::msg;
use solana_program::pubkey::Pubkey;


// Attempt to serialize the BPF format to our struct
//  using Borsh
//






/// # Safety
#[no_mangle]
unsafe extern "C" fn entrypoint(input: *mut u8)
    ->
        u64 {
        let (program_id, accounts, instruction_data) =
            unsafe { ::solana_program::entrypoint::deserialize(input) };
        match process_instruction(&program_id, &accounts, &instruction_data) {
                Ok(()) => ::solana_program::entrypoint::SUCCESS,
                Err(error) => error.into(),
            }
    }
fn process_instruction<'_, '_, '_,
    '_>(_program_id: &'_ Pubkey, _accounts: &'_ [AccountInfo<>],
    instruction_data: &'_ [u8])
    ->
        ProgramResult {
        let instruction_data_object =
            match #[lang = "branch"](InstructionData::try_from_slice(instruction_data))
                        {
                    #[lang = "Break"] {  0: residual } =>
                        #[allow(unreachable_code)]
                        return #[lang = "from_residual"](residual),
                    #[lang = "Continue"] {  0: val } =>
                        #[allow(unreachable_code)]
                        val,
                };
        if instruction_data_object.height > 5 { } else { }; Ok(()) }
        struct InstructionData {
            name: String,
            height: u32,
        }
        impl borsh::ser::BorshSerialize for InstructionData where
            String: borsh::ser::BorshSerialize,
            u32: borsh::ser::BorshSerialize {
            fn serialize<W, '_, '_>(self: &'_ Self, writer: &'_ mut W)
                -> ::core::result::Result<(), borsh::maybestd::io::Error>
                where
                W: borsh::maybestd::io::Write {
                    match #[lang = "branch"](borsh::BorshSerialize::serialize(&self.name,
                                        writer)) {
                            #[lang = "Break"] {  0: residual } =>
                                #[allow(unreachable_code)]
                                return #[lang = "from_residual"](residual),
                            #[lang = "Continue"] {  0: val } =>
                                #[allow(unreachable_code)]
                                val,
                        };
                    match #[lang = "branch"](borsh::BorshSerialize::serialize(&self.height,
                                        writer)) {
                            #[lang = "Break"] {  0: residual } =>
                                #[allow(unreachable_code)]
                                return #[lang = "from_residual"](residual),
                            #[lang = "Continue"] {  0: val } =>
                                #[allow(unreachable_code)]
                                val,
                        };
                    Ok(())
                }
        }
        impl borsh::de::BorshDeserialize for InstructionData where
            String: borsh::BorshDeserialize, u32: borsh::BorshDeserialize {
            fn deserialize<'_, '_>(buf: &'_ mut &'_ [u8])
                ->
                    ::core::result::Result<Self,
                    borsh::maybestd::io::Error> {
                    Ok(Self{
                            name:
                                match #[lang = "branch"](borsh::BorshDeserialize::deserialize(buf))
                                            {
                                        #[lang = "Break"] {  0: residual } =>
                                            #[allow(unreachable_code)]
                                            return #[lang = "from_residual"](residual),
                                        #[lang = "Continue"] {  0: val } =>
                                            #[allow(unreachable_code)]
                                            val,
                                    },

                            height:
                                match #[lang = "branch"](borsh::BorshDeserialize::deserialize(buf))
                                            {
                                        #[lang = "Break"] {  0: residual } =>
                                            #[allow(unreachable_code)]
                                            return #[lang = "from_residual"](residual),
                                        #[lang = "Continue"] {  0: val } =>
                                            #[allow(unreachable_code)]
                                            val,
                                    },})
                }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for InstructionData {
            #[inline]
            fn fmt<'_, '_,
                '_>(self: &'_ Self, f: &'_ mut ::core::fmt::Formatter<>)
                ->
                    ::core::fmt::Result {
                    ::core::fmt::Formatter::debug_struct_field2_finish(f,
                        "InstructionData", "name", &self.name, "height",
                        &&self.height)
                }
        }
