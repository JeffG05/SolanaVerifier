// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn close_user(_1: &[AccountInfo<'_>]) -> Result<(), ProgramError> {
    debug accounts => _1;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _2: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _3: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _5: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _6: isize;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _10: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _11: isize;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _15: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _16: isize;
    let mut _21: &solana_program::rent::Rent;
    let _22: solana_program::rent::Rent;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::rent::Rent>;
    let mut _24: std::result::Result<solana_program::rent::Rent, solana_program::program_error::ProgramError>;
    let mut _25: isize;
    let mut _29: u64;
    let mut _30: &mut &mut u64;
    let mut _31: &mut std::cell::RefMut<'_, &mut u64>;
    let mut _32: std::cell::RefMut<'_, &mut u64>;
    let _33: &std::cell::RefCell<&mut u64>;
    let mut _34: &std::rc::Rc<std::cell::RefCell<&mut u64>>;
    let mut _35: &mut &mut u64;
    let mut _36: &mut std::cell::RefMut<'_, &mut u64>;
    let mut _37: std::cell::RefMut<'_, &mut u64>;
    let _38: &std::cell::RefCell<&mut u64>;
    let mut _39: &std::rc::Rc<std::cell::RefCell<&mut u64>>;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _41: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _42: isize;
    let _44: ();
    let mut _45: &mut u64;
    let mut _46: &mut u64;
    let mut _47: &mut u64;
    let mut _48: &mut u64;
    let mut _49: &solana_program::pubkey::Pubkey;
    scope 1 {
        debug accounts_iter => _2;
        let _7: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _8: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug target_account => _8;
            let _12: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _13: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug payer => _13;
                let _17: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _18: &solana_program::account_info::AccountInfo<'_>;
                scope 12 {
                    debug system_program => _18;
                    let _19: usize;
                    scope 17 {
                        debug account_span => const 0_usize;
                        let _20: u64;
                        let _26: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _27: solana_program::rent::Rent;
                        scope 18 {
                            debug lamports_required => _20;
                            let _28: u64;
                            scope 23 {
                                debug diff => _28;
                                let _43: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                scope 24 {
                                    debug residual => _43;
                                    scope 25 {
                                    }
                                }
                                scope 26 {
                                    debug val => const ();
                                    scope 27 {
                                    }
                                }
                            }
                        }
                        scope 19 {
                            debug residual => _26;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => _27;
                            scope 22 {
                            }
                        }
                    }
                }
                scope 13 {
                    debug residual => _17;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _18;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _12;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _13;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _7;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _8;
            scope 6 {
            }
        }
    }

    bb0: {
        _3 = core::slice::<impl [AccountInfo<'_>]>::iter(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &mut _3;
        _5 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb6, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = ((_4 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _10 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_2) -> [return: bb7, unwind continue];
    }

    bb6: {
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _7) -> [return: bb34, unwind continue];
    }

    bb7: {
        _9 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _10) -> [return: bb8, unwind continue];
    }

    bb8: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _13 = ((_9 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _15 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_2) -> [return: bb11, unwind continue];
    }

    bb10: {
        _12 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _12) -> [return: bb34, unwind continue];
    }

    bb11: {
        _14 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _15) -> [return: bb12, unwind continue];
    }

    bb12: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        _18 = ((_14 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _19 = const 0_usize;
        _24 = <Rent as Sysvar>::get() -> [return: bb15, unwind continue];
    }

    bb14: {
        _17 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _17) -> [return: bb34, unwind continue];
    }

    bb15: {
        _23 = <Result<Rent, ProgramError> as Try>::branch(move _24) -> [return: bb16, unwind continue];
    }

    bb16: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        _27 = move ((_23 as Continue).0: solana_program::rent::Rent);
        _22 = move _27;
        _21 = &_22;
        _20 = Rent::minimum_balance(move _21, _19) -> [return: bb19, unwind continue];
    }

    bb18: {
        _26 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _26) -> [return: bb34, unwind continue];
    }

    bb19: {
        _29 = AccountInfo::<'_>::lamports(_8) -> [return: bb20, unwind continue];
    }

    bb20: {
        _28 = Sub(move _29, _20);
        _34 = &((*_8).1: std::rc::Rc<std::cell::RefCell<&mut u64>>);
        _33 = <Rc<RefCell<&mut u64>> as Deref>::deref(move _34) -> [return: bb21, unwind continue];
    }

    bb21: {
        _32 = RefCell::<&mut u64>::borrow_mut(_33) -> [return: bb22, unwind continue];
    }

    bb22: {
        _31 = &mut _32;
        _30 = <RefMut<'_, &mut u64> as DerefMut>::deref_mut(move _31) -> [return: bb23, unwind: bb36];
    }

    bb23: {
        _45 = deref_copy (*_30);
        _46 = deref_copy (*_30);
        (*_45) = Sub((*_46), _28);
        drop(_32) -> [return: bb24, unwind continue];
    }

    bb24: {
        _39 = &((*_13).1: std::rc::Rc<std::cell::RefCell<&mut u64>>);
        _38 = <Rc<RefCell<&mut u64>> as Deref>::deref(move _39) -> [return: bb25, unwind continue];
    }

    bb25: {
        _37 = RefCell::<&mut u64>::borrow_mut(_38) -> [return: bb26, unwind continue];
    }

    bb26: {
        _36 = &mut _37;
        _35 = <RefMut<'_, &mut u64> as DerefMut>::deref_mut(move _36) -> [return: bb27, unwind: bb35];
    }

    bb27: {
        _47 = deref_copy (*_35);
        _48 = deref_copy (*_35);
        (*_47) = Add((*_48), _28);
        drop(_37) -> [return: bb28, unwind continue];
    }

    bb28: {
        _41 = AccountInfo::<'_>::realloc(_8, _19, const true) -> [return: bb29, unwind continue];
    }

    bb29: {
        _40 = <Result<(), ProgramError> as Try>::branch(move _41) -> [return: bb30, unwind continue];
    }

    bb30: {
        _42 = discriminant(_40);
        switchInt(move _42) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        _49 = deref_copy ((*_18).0: &solana_program::pubkey::Pubkey);
        _44 = AccountInfo::<'_>::assign(_8, _49) -> [return: bb33, unwind continue];
    }

    bb32: {
        _43 = move ((_40 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _43) -> [return: bb34, unwind continue];
    }

    bb33: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        goto -> bb34;
    }

    bb34: {
        return;
    }

    bb35 (cleanup): {
        drop(_37) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_32) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        resume;
    }
}

fn create_user(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: User) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug data => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _5: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _7: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _8: isize;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _12: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _13: isize;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _17: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _18: isize;
    let mut _22: &std::vec::Vec<u8>;
    let _23: std::vec::Vec<u8>;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::vec::Vec<u8>>;
    let mut _25: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _26: &state::user::User;
    let mut _27: isize;
    let mut _31: &solana_program::rent::Rent;
    let _32: solana_program::rent::Rent;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::rent::Rent>;
    let mut _34: std::result::Result<solana_program::rent::Rent, solana_program::program_error::ProgramError>;
    let mut _35: isize;
    let mut _39: (solana_program::pubkey::Pubkey, u8);
    let mut _40: &[&[u8]];
    let _41: &[&[u8]; 2];
    let _42: [&[u8]; 2];
    let _43: &[u8];
    let _44: &str;
    let _45: &[u8];
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _47: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _48: &solana_program::instruction::Instruction;
    let _49: solana_program::instruction::Instruction;
    let mut _50: u64;
    let mut _51: &[solana_program::account_info::AccountInfo<'_>];
    let _52: &[solana_program::account_info::AccountInfo<'_>; 3];
    let _53: [solana_program::account_info::AccountInfo<'_>; 3];
    let mut _54: solana_program::account_info::AccountInfo<'_>;
    let mut _55: solana_program::account_info::AccountInfo<'_>;
    let mut _56: solana_program::account_info::AccountInfo<'_>;
    let mut _57: &[&[&[u8]]];
    let _58: &[&[&[u8]]; 1];
    let _59: [&[&[u8]]; 1];
    let mut _60: &[&[u8]];
    let _61: &[&[u8]; 3];
    let _62: [&[u8]; 3];
    let _63: &[u8];
    let _64: &str;
    let _65: &[u8];
    let mut _66: &[u8];
    let _67: &[u8; 1];
    let _68: [u8; 1];
    let mut _69: isize;
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _72: std::result::Result<(), std::io::Error>;
    let mut _73: &state::user::User;
    let mut _74: &mut &mut [u8];
    let mut _75: &mut [u8];
    let mut _76: &mut [u8];
    let mut _77: &mut &mut [u8];
    let mut _78: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _79: std::cell::RefMut<'_, &mut [u8]>;
    let _80: &std::cell::RefCell<&mut [u8]>;
    let mut _81: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _82: isize;
    let mut _84: &solana_program::pubkey::Pubkey;
    let mut _85: &solana_program::pubkey::Pubkey;
    let mut _86: &solana_program::pubkey::Pubkey;
    let mut _87: &solana_program::pubkey::Pubkey;
    let mut _88: &mut [u8];
    scope 1 {
        debug accounts_iter => _4;
        let _9: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _10: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug target_account => _10;
            let _14: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _15: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug payer => _15;
                let _19: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _20: &solana_program::account_info::AccountInfo<'_>;
                scope 12 {
                    debug system_program => _20;
                    let _21: usize;
                    let _28: std::result::Result<std::convert::Infallible, std::io::Error>;
                    let _29: std::vec::Vec<u8>;
                    scope 17 {
                        debug account_span => _21;
                        let _30: u64;
                        let _36: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _37: solana_program::rent::Rent;
                        scope 22 {
                            debug lamports_required => _30;
                            let _38: u8;
                            scope 27 {
                                debug bump => _38;
                                let _70: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _83: std::result::Result<std::convert::Infallible, std::io::Error>;
                                scope 28 {
                                    debug residual => _70;
                                    scope 29 {
                                    }
                                }
                                scope 30 {
                                    debug val => const ();
                                    scope 31 {
                                    }
                                }
                                scope 32 {
                                    debug residual => _83;
                                    scope 33 {
                                    }
                                }
                                scope 34 {
                                    debug val => const ();
                                    scope 35 {
                                    }
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _36;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _37;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _28;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _29;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _19;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _20;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _14;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _15;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _9;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _10;
            scope 6 {
            }
        }
    }

    bb0: {
        _5 = core::slice::<impl [AccountInfo<'_>]>::iter(_2) -> [return: bb1, unwind: bb60];
    }

    bb1: {
        _4 = &mut _5;
        _7 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb2, unwind: bb60];
    }

    bb2: {
        _6 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _7) -> [return: bb3, unwind: bb60];
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _10 = ((_6 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _12 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb7, unwind: bb60];
    }

    bb6: {
        _9 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _9) -> [return: bb63, unwind: bb60];
    }

    bb7: {
        _11 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _12) -> [return: bb8, unwind: bb60];
    }

    bb8: {
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _15 = ((_11 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _17 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb11, unwind: bb60];
    }

    bb10: {
        _14 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _14) -> [return: bb64, unwind: bb60];
    }

    bb11: {
        _16 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _17) -> [return: bb12, unwind: bb60];
    }

    bb12: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        _20 = ((_16 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _26 = &_3;
        _25 = <User as BorshSerialize>::try_to_vec(move _26) -> [return: bb15, unwind: bb60];
    }

    bb14: {
        _19 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _19) -> [return: bb65, unwind: bb60];
    }

    bb15: {
        _24 = <Result<Vec<u8>, std::io::Error> as Try>::branch(move _25) -> [return: bb16, unwind: bb60];
    }

    bb16: {
        _27 = discriminant(_24);
        switchInt(move _27) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        _29 = move ((_24 as Continue).0: std::vec::Vec<u8>);
        _23 = move _29;
        _22 = &_23;
        _21 = Vec::<u8>::len(move _22) -> [return: bb19, unwind: bb59];
    }

    bb18: {
        _28 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _28) -> [return: bb66, unwind: bb60];
    }

    bb19: {
        drop(_23) -> [return: bb62, unwind: bb60];
    }

    bb20: {
        _33 = <Result<Rent, ProgramError> as Try>::branch(move _34) -> [return: bb21, unwind: bb60];
    }

    bb21: {
        _35 = discriminant(_33);
        switchInt(move _35) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        _37 = move ((_33 as Continue).0: solana_program::rent::Rent);
        _32 = move _37;
        _31 = &_32;
        _30 = Rent::minimum_balance(move _31, _21) -> [return: bb24, unwind: bb60];
    }

    bb23: {
        _36 = move ((_33 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _36) -> [return: bb67, unwind: bb60];
    }

    bb24: {
        _44 = const state::user::User::SEED_PREFIX;
        _43 = core::str::<impl str>::as_bytes(_44) -> [return: bb25, unwind: bb60];
    }

    bb25: {
        _84 = deref_copy ((*_15).0: &solana_program::pubkey::Pubkey);
        _45 = <Pubkey as AsRef<[u8]>>::as_ref(_84) -> [return: bb26, unwind: bb60];
    }

    bb26: {
        _42 = [_43, _45];
        _41 = &_42;
        _40 = _41 as &[&[u8]] (PointerCoercion(Unsize));
        _39 = Pubkey::find_program_address(move _40, _1) -> [return: bb27, unwind: bb60];
    }

    bb27: {
        _38 = (_39.1: u8);
        _85 = deref_copy ((*_15).0: &solana_program::pubkey::Pubkey);
        _86 = deref_copy ((*_10).0: &solana_program::pubkey::Pubkey);
        _50 = _21 as u64 (IntToInt);
        _49 = solana_program::system_instruction::create_account(_85, _86, _30, move _50, _1) -> [return: bb28, unwind: bb60];
    }

    bb28: {
        _48 = &_49;
        _54 = <AccountInfo<'_> as Clone>::clone(_15) -> [return: bb29, unwind: bb58];
    }

    bb29: {
        _55 = <AccountInfo<'_> as Clone>::clone(_10) -> [return: bb30, unwind: bb57];
    }

    bb30: {
        _56 = <AccountInfo<'_> as Clone>::clone(_20) -> [return: bb31, unwind: bb56];
    }

    bb31: {
        _53 = [move _54, move _55, move _56];
        _52 = &_53;
        _51 = _52 as &[solana_program::account_info::AccountInfo<'_>] (PointerCoercion(Unsize));
        _64 = const state::user::User::SEED_PREFIX;
        _63 = core::str::<impl str>::as_bytes(_64) -> [return: bb32, unwind: bb55];
    }

    bb32: {
        _87 = deref_copy ((*_15).0: &solana_program::pubkey::Pubkey);
        _65 = <Pubkey as AsRef<[u8]>>::as_ref(_87) -> [return: bb33, unwind: bb55];
    }

    bb33: {
        _68 = [_38];
        _67 = &_68;
        _66 = _67 as &[u8] (PointerCoercion(Unsize));
        _62 = [_63, _65, move _66];
        _61 = &_62;
        _60 = _61 as &[&[u8]] (PointerCoercion(Unsize));
        _59 = [move _60];
        _58 = &_59;
        _57 = _58 as &[&[&[u8]]] (PointerCoercion(Unsize));
        _47 = invoke_signed(_48, move _51, move _57) -> [return: bb34, unwind: bb55];
    }

    bb34: {
        _46 = <Result<(), ProgramError> as Try>::branch(move _47) -> [return: bb35, unwind: bb55];
    }

    bb35: {
        _69 = discriminant(_46);
        switchInt(move _69) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        drop(_53) -> [return: bb39, unwind: bb58];
    }

    bb37: {
        _70 = move ((_46 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _70) -> [return: bb38, unwind: bb55];
    }

    bb38: {
        drop(_53) -> [return: bb51, unwind: bb58];
    }

    bb39: {
        drop(_49) -> [return: bb40, unwind: bb60];
    }

    bb40: {
        _73 = &_3;
        _81 = &((*_10).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _80 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _81) -> [return: bb41, unwind: bb60];
    }

    bb41: {
        _79 = RefCell::<&mut [u8]>::borrow_mut(_80) -> [return: bb42, unwind: bb60];
    }

    bb42: {
        _78 = &mut _79;
        _77 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _78) -> [return: bb43, unwind: bb54];
    }

    bb43: {
        _88 = deref_copy (*_77);
        _76 = <[u8] as IndexMut<RangeFull>>::index_mut(_88, const RangeFull) -> [return: bb44, unwind: bb54];
    }

    bb44: {
        _75 = _76;
        _74 = &mut _75;
        _72 = <User as BorshSerialize>::serialize::<&mut [u8]>(move _73, _74) -> [return: bb45, unwind: bb54];
    }

    bb45: {
        _71 = <Result<(), std::io::Error> as Try>::branch(move _72) -> [return: bb46, unwind: bb54];
    }

    bb46: {
        _82 = discriminant(_71);
        switchInt(move _82) -> [0: bb47, 1: bb48, otherwise: bb4];
    }

    bb47: {
        drop(_79) -> [return: bb50, unwind: bb60];
    }

    bb48: {
        _83 = move ((_71 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _83) -> [return: bb49, unwind: bb54];
    }

    bb49: {
        drop(_79) -> [return: bb52, unwind: bb60];
    }

    bb50: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        drop(_3) -> [return: bb53, unwind continue];
    }

    bb51: {
        drop(_49) -> [return: bb52, unwind: bb60];
    }

    bb52: {
        drop(_3) -> [return: bb53, unwind continue];
    }

    bb53: {
        return;
    }

    bb54 (cleanup): {
        drop(_79) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_53) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_55) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_54) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_49) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_23) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_3) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        resume;
    }

    bb62: {
        _34 = <Rent as Sysvar>::get() -> [return: bb20, unwind: bb60];
    }

    bb63: {
        goto -> bb52;
    }

    bb64: {
        goto -> bb52;
    }

    bb65: {
        goto -> bb52;
    }

    bb66: {
        goto -> bb52;
    }

    bb67: {
        goto -> bb52;
    }
}

fn processor::<impl at src/processor.rs:7:10: 7:24>::serialize(_1: &MyInstruction, _2: &mut W) -> Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let _3: u8;
    let mut _4: isize;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _6: std::result::Result<(), std::io::Error>;
    let mut _7: &[u8];
    let _8: &[u8; 1];
    let _9: [u8; 1];
    let mut _10: u8;
    let mut _11: isize;
    let mut _13: isize;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _16: std::result::Result<(), std::io::Error>;
    let mut _17: isize;
    scope 1 {
        debug variant_idx => _3;
        let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _14: &state::user::User;
        scope 2 {
            debug residual => _12;
            scope 3 {
            }
        }
        scope 4 {
            debug val => const ();
            scope 5 {
            }
        }
        scope 6 {
            debug id0 => _14;
            let _18: std::result::Result<std::convert::Infallible, std::io::Error>;
            scope 7 {
                debug residual => _18;
                scope 8 {
                }
            }
            scope 9 {
                debug val => const ();
                scope 10 {
                }
            }
        }
    }

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb2, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _3 = const 1_u8;
        goto -> bb4;
    }

    bb3: {
        _3 = const 0_u8;
        goto -> bb4;
    }

    bb4: {
        _10 = _3;
        _9 = core::num::<impl u8>::to_le_bytes(move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = &_9;
        _7 = _8 as &[u8] (PointerCoercion(Unsize));
        _6 = <W as std::io::Write>::write_all(_2, move _7) -> [return: bb6, unwind continue];
    }

    bb6: {
        _5 = <Result<(), std::io::Error> as Try>::branch(move _6) -> [return: bb7, unwind continue];
    }

    bb7: {
        _11 = discriminant(_5);
        switchInt(move _11) -> [0: bb8, 1: bb9, otherwise: bb1];
    }

    bb8: {
        _13 = discriminant((*_1));
        switchInt(move _13) -> [0: bb10, 1: bb14, otherwise: bb1];
    }

    bb9: {
        _12 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb15, unwind continue];
    }

    bb10: {
        _14 = &(((*_1) as CreateUser).0: state::user::User);
        _16 = <User as BorshSerialize>::serialize::<W>(_14, _2) -> [return: bb11, unwind continue];
    }

    bb11: {
        _15 = <Result<(), std::io::Error> as Try>::branch(move _16) -> [return: bb12, unwind continue];
    }

    bb12: {
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb14, 1: bb13, otherwise: bb1];
    }

    bb13: {
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _18) -> [return: bb15, unwind continue];
    }

    bb14: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        goto -> bb15;
    }

    bb15: {
        return;
    }
}

fn processor::<impl at src/processor.rs:7:26: 7:42>::deserialize(_1: &mut &[u8]) -> Result<MyInstruction, std::io::Error> {
    debug buf => _1;
    let mut _0: std::result::Result<processor::MyInstruction, std::io::Error>;
    let _2: u8;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u8>;
    let mut _4: std::result::Result<u8, std::io::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _7: u8;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, state::user::User>;
    let mut _10: std::result::Result<state::user::User, std::io::Error>;
    let mut _11: isize;
    let mut _15: std::fmt::Arguments<'_>;
    let mut _16: &[&str];
    let mut _17: &[core::fmt::rt::Argument<'_>];
    let _18: &[core::fmt::rt::Argument<'_>; 1];
    let _19: [core::fmt::rt::Argument<'_>; 1];
    let mut _20: core::fmt::rt::Argument<'_>;
    let _21: &u8;
    let mut _22: std::io::Error;
    let mut _23: std::io::ErrorKind;
    let mut _24: processor::MyInstruction;
    scope 1 {
        debug variant_idx => _2;
        let _8: processor::MyInstruction;
        let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _13: state::user::User;
        let _14: std::string::String;
        let mut _25: &[&str; 1];
        scope 6 {
            debug return_value => _8;
        }
        scope 7 {
            debug residual => _12;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _13;
            scope 10 {
            }
        }
        scope 11 {
            debug msg => _14;
        }
        scope 12 {
            debug res => _14;
        }
    }
    scope 2 {
        debug residual => _6;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;
        scope 5 {
        }
    }

    bb0: {
        _4 = <u8 as BorshDeserialize>::deserialize(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<u8, std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = ((_3 as Continue).0: u8);
        _2 = _7;
        switchInt(_2) -> [0: bb7, 1: bb12, otherwise: bb6];
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<MyInstruction, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _6) -> [return: bb18, unwind continue];
    }

    bb6: {
        _25 = const <processor::MyInstruction as borsh::BorshDeserialize>::deserialize::promoted[0];
        _16 = _25 as &[&str] (PointerCoercion(Unsize));
        _21 = &_2;
        _20 = core::fmt::rt::Argument::<'_>::new_debug::<u8>(_21) -> [return: bb13, unwind continue];
    }

    bb7: {
        _10 = <User as BorshDeserialize>::deserialize(_1) -> [return: bb8, unwind continue];
    }

    bb8: {
        _9 = <Result<User, std::io::Error> as Try>::branch(move _10) -> [return: bb9, unwind continue];
    }

    bb9: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb10, 1: bb11, otherwise: bb3];
    }

    bb10: {
        _13 = move ((_9 as Continue).0: state::user::User);
        _8 = MyInstruction::CreateUser(move _13);
        goto -> bb17;
    }

    bb11: {
        _12 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<MyInstruction, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb18, unwind continue];
    }

    bb12: {
        _8 = MyInstruction::CloseUser;
        goto -> bb17;
    }

    bb13: {
        _19 = [move _20];
        _18 = &_19;
        _17 = _18 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _15 = Arguments::<'_>::new_v1(move _16, move _17) -> [return: bb14, unwind continue];
    }

    bb14: {
        _14 = format(move _15) -> [return: bb15, unwind continue];
    }

    bb15: {
        _23 = InvalidInput;
        _22 = std::io::Error::new::<String>(move _23, move _14) -> [return: bb16, unwind continue];
    }

    bb16: {
        _0 = Result::<MyInstruction, std::io::Error>::Err(move _22);
        goto -> bb18;
    }

    bb17: {
        _24 = move _8;
        _0 = Result::<MyInstruction, std::io::Error>::Ok(move _24);
        goto -> bb18;
    }

    bb18: {
        return;
    }
}

const processor::<impl at src/processor.rs:7:26: 7:42>::deserialize::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Unexpected variant index: "];
        _0 = &_1;
        return;
    }
}

fn process_instruction(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: &[u8]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug input => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: processor::MyInstruction;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, processor::MyInstruction>;
    let mut _6: std::result::Result<processor::MyInstruction, std::io::Error>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _9: processor::MyInstruction;
    let mut _10: isize;
    let mut _12: bool;
    let mut _13: isize;
    scope 1 {
        debug instruction => _4;
        let _11: state::user::User;
        scope 6 {
            debug data => _11;
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _9;
        scope 5 {
        }
    }

    bb0: {
        _12 = const false;
        _6 = <MyInstruction as BorshDeserialize>::try_from_slice(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = <Result<MyInstruction, std::io::Error> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _9 = move ((_5 as Continue).0: processor::MyInstruction);
        _12 = const true;
        _4 = move _9;
        _10 = discriminant(_4);
        switchInt(move _10) -> [0: bb8, 1: bb7, otherwise: bb3];
    }

    bb5: {
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _8) -> [return: bb6, unwind continue];
    }

    bb6: {
        _12 = const false;
        goto -> bb9;
    }

    bb7: {
        _0 = close_user(_2) -> [return: bb15, unwind: bb14];
    }

    bb8: {
        _12 = const false;
        _11 = move ((_4 as CreateUser).0: state::user::User);
        _0 = create_user(_1, _2, move _11) -> [return: bb16, unwind: bb14];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        _12 = const false;
        goto -> bb9;
    }

    bb12 (cleanup): {
        switchInt(_12) -> [0: bb10, otherwise: bb13];
    }

    bb13 (cleanup): {
        drop(((_4 as CreateUser).0: state::user::User)) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        _13 = discriminant(_4);
        switchInt(move _13) -> [0: bb12, otherwise: bb10];
    }

    bb15: {
        goto -> bb11;
    }

    bb16: {
        goto -> bb11;
    }
}

fn user::<impl at src/state/user.rs:3:10: 3:26>::deserialize(_1: &mut &[u8]) -> Result<User, std::io::Error> {
    debug buf => _1;
    let mut _0: std::result::Result<state::user::User, std::io::Error>;
    let mut _2: state::user::User;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::string::String>;
    let mut _4: std::result::Result<std::string::String, std::io::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _7: std::string::String;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <String as BorshDeserialize>::deserialize(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<String, std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_3 as Continue).0: std::string::String);
        _2 = User { name: move _7 };
        _0 = Result::<User, std::io::Error>::Ok(move _2);
        goto -> bb6;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<User, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _6) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn user::<impl at src/state/user.rs:3:28: 3:42>::serialize(_1: &User, _2: &mut W) -> Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _4: std::result::Result<(), std::io::Error>;
    let _5: &std::string::String;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }

    bb0: {
        _5 = &((*_1).0: std::string::String);
        _4 = <String as BorshSerialize>::serialize::<W>(_5, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<(), std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        goto -> bb6;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

const user::<impl at src/state/user.rs:8:1: 8:10>::SEED_PREFIX: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "USER";
        return;
    }
}

fn entrypoint(_1: *mut u8) -> u64 {
    debug input => _1;
    let mut _0: u64;
    let _2: &solana_program::pubkey::Pubkey;
    let _3: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _4: &[u8];
    let mut _5: (&solana_program::pubkey::Pubkey, std::vec::Vec<solana_program::account_info::AccountInfo<'_>>, &[u8]);
    let mut _6: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _7: &&solana_program::pubkey::Pubkey;
    let _8: &[solana_program::account_info::AccountInfo<'_>];
    let _9: &std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _10: &&[u8];
    let mut _11: isize;
    let mut _13: &solana_program::pubkey::Pubkey;
    let mut _14: &[u8];
    scope 1 {
        debug program_id => _2;
        debug accounts => _3;
        debug instruction_data => _4;
        let _12: solana_program::program_error::ProgramError;
        scope 3 {
            debug error => _12;
        }
    }
    scope 2 {
    }

    bb0: {
        _5 = solana_program::entrypoint::deserialize::<'_>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = (_5.0: &solana_program::pubkey::Pubkey);
        _3 = move (_5.1: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>);
        _4 = (_5.2: &[u8]);
        _7 = &_2;
        _13 = deref_copy (*_7);
        _9 = &_3;
        _8 = <Vec<AccountInfo<'_>> as Deref>::deref(_9) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _10 = &_4;
        _14 = deref_copy (*_10);
        _6 = process_instruction(_13, _8, _14) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb6, 1: bb5, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _12 = move ((_6 as Err).0: solana_program::program_error::ProgramError);
        _0 = <ProgramError as Into<u64>>::into(move _12) -> [return: bb12, unwind: bb9];
    }

    bb6: {
        _0 = const solana_program::entrypoint::SUCCESS;
        goto -> bb7;
    }

    bb7: {
        drop(_3) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        goto -> bb7;
    }
}

fn MyInstruction::CreateUser(_1: User) -> MyInstruction {
    let mut _0: processor::MyInstruction;

    bb0: {
        _0 = MyInstruction::CreateUser(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MyInstruction::CreateUser(_1: User) -> MyInstruction {
    let mut _0: processor::MyInstruction;

    bb0: {
        _0 = MyInstruction::CreateUser(move _1);
        return;
    }
}
