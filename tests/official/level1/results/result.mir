// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at src/lib.rs:9:10: 9:15>::fmt(_1: &WalletInstruction, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &str;
    let _5: &u64;
    let _6: &str;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&u64;
    let _10: &u64;
    let _11: &str;
    let _12: &str;
    let mut _13: &dyn std::fmt::Debug;
    let _14: &&u64;
    scope 1 {
        debug __self_0 => _5;
    }
    scope 2 {
        debug __self_0 => _10;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb2, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _10 = &(((*_1) as Withdraw).0: u64);
        _11 = const "Withdraw";
        _12 = const "amount";
        _14 = &_10;
        _13 = _14 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _11, _12, move _13) -> [return: bb5, unwind continue];
    }

    bb3: {
        _4 = const "Initialize";
        _0 = Formatter::<'_>::write_str(_2, _4) -> [return: bb5, unwind continue];
    }

    bb4: {
        _5 = &(((*_1) as Deposit).0: u64);
        _6 = const "Deposit";
        _7 = const "amount";
        _9 = &_5;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _6, _7, move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn <impl at src/lib.rs:9:17: 9:33>::deserialize(_1: &mut &[u8]) -> Result<WalletInstruction, std::io::Error> {
    debug buf => _1;
    let mut _0: std::result::Result<WalletInstruction, std::io::Error>;
    let _2: u8;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u8>;
    let mut _4: std::result::Result<u8, std::io::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _7: u8;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _10: std::result::Result<u64, std::io::Error>;
    let mut _11: isize;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _15: std::result::Result<u64, std::io::Error>;
    let mut _16: isize;
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: [core::fmt::rt::Argument<'_>; 1];
    let mut _25: core::fmt::rt::Argument<'_>;
    let _26: &u8;
    let mut _27: std::io::Error;
    let mut _28: std::io::ErrorKind;
    let mut _29: WalletInstruction;
    scope 1 {
        debug variant_idx => _2;
        let _8: WalletInstruction;
        let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _13: u64;
        let _17: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _18: u64;
        let _19: std::string::String;
        let mut _30: &[&str; 1];
        scope 6 {
            debug return_value => _8;
        }
        scope 7 {
            debug residual => _12;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _13;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _17;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _18;
            scope 14 {
            }
        }
        scope 15 {
            debug msg => _19;
        }
        scope 16 {
            debug res => _19;
        }
    }
    scope 2 {
        debug residual => _6;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;
        scope 5 {
        }
    }

    bb0: {
        _4 = <u8 as BorshDeserialize>::deserialize(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<u8, std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = ((_3 as Continue).0: u8);
        _2 = _7;
        switchInt(_2) -> [0: bb7, 1: bb8, 2: bb13, otherwise: bb6];
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<WalletInstruction, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _6) -> [return: bb23, unwind continue];
    }

    bb6: {
        _30 = const <WalletInstruction as borsh::BorshDeserialize>::deserialize::promoted[0];
        _21 = _30 as &[&str] (PointerCoercion(Unsize));
        _26 = &_2;
        _25 = core::fmt::rt::Argument::<'_>::new_debug::<u8>(_26) -> [return: bb18, unwind continue];
    }

    bb7: {
        _8 = WalletInstruction::Initialize;
        goto -> bb22;
    }

    bb8: {
        _10 = <u64 as BorshDeserialize>::deserialize(_1) -> [return: bb9, unwind continue];
    }

    bb9: {
        _9 = <Result<u64, std::io::Error> as Try>::branch(move _10) -> [return: bb10, unwind continue];
    }

    bb10: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _13 = ((_9 as Continue).0: u64);
        _8 = WalletInstruction::Deposit { amount: _13 };
        goto -> bb22;
    }

    bb12: {
        _12 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<WalletInstruction, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb23, unwind continue];
    }

    bb13: {
        _15 = <u64 as BorshDeserialize>::deserialize(_1) -> [return: bb14, unwind continue];
    }

    bb14: {
        _14 = <Result<u64, std::io::Error> as Try>::branch(move _15) -> [return: bb15, unwind continue];
    }

    bb15: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb16, 1: bb17, otherwise: bb3];
    }

    bb16: {
        _18 = ((_14 as Continue).0: u64);
        _8 = WalletInstruction::Withdraw { amount: _18 };
        goto -> bb22;
    }

    bb17: {
        _17 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<WalletInstruction, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _17) -> [return: bb23, unwind continue];
    }

    bb18: {
        _24 = [move _25];
        _23 = &_24;
        _22 = _23 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _20 = Arguments::<'_>::new_v1(move _21, move _22) -> [return: bb19, unwind continue];
    }

    bb19: {
        _19 = format(move _20) -> [return: bb20, unwind continue];
    }

    bb20: {
        _28 = InvalidInput;
        _27 = std::io::Error::new::<String>(move _28, move _19) -> [return: bb21, unwind continue];
    }

    bb21: {
        _0 = Result::<WalletInstruction, std::io::Error>::Err(move _27);
        goto -> bb23;
    }

    bb22: {
        _29 = move _8;
        _0 = Result::<WalletInstruction, std::io::Error>::Ok(move _29);
        goto -> bb23;
    }

    bb23: {
        return;
    }
}

const <impl at src/lib.rs:9:17: 9:33>::deserialize::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Unexpected variant index: "];
        _0 = &_1;
        return;
    }
}

fn <impl at src/lib.rs:9:35: 9:49>::serialize(_1: &WalletInstruction, _2: &mut W) -> Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let _3: u8;
    let mut _4: isize;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _6: std::result::Result<(), std::io::Error>;
    let mut _7: &[u8];
    let _8: &[u8; 1];
    let _9: [u8; 1];
    let mut _10: u8;
    let mut _11: isize;
    let mut _13: isize;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _16: std::result::Result<(), std::io::Error>;
    let mut _17: isize;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _21: std::result::Result<(), std::io::Error>;
    let mut _22: isize;
    scope 1 {
        debug variant_idx => _3;
        let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _14: &u64;
        let _19: &u64;
        scope 2 {
            debug residual => _12;
            scope 3 {
            }
        }
        scope 4 {
            debug val => const ();
            scope 5 {
            }
        }
        scope 6 {
            debug amount => _14;
            let _18: std::result::Result<std::convert::Infallible, std::io::Error>;
            scope 7 {
                debug residual => _18;
                scope 8 {
                }
            }
            scope 9 {
                debug val => const ();
                scope 10 {
                }
            }
        }
        scope 11 {
            debug amount => _19;
            let _23: std::result::Result<std::convert::Infallible, std::io::Error>;
            scope 12 {
                debug residual => _23;
                scope 13 {
                }
            }
            scope 14 {
                debug val => const ();
                scope 15 {
                }
            }
        }
    }

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb2, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _3 = const 2_u8;
        goto -> bb5;
    }

    bb3: {
        _3 = const 0_u8;
        goto -> bb5;
    }

    bb4: {
        _3 = const 1_u8;
        goto -> bb5;
    }

    bb5: {
        _10 = _3;
        _9 = core::num::<impl u8>::to_le_bytes(move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        _8 = &_9;
        _7 = _8 as &[u8] (PointerCoercion(Unsize));
        _6 = <W as std::io::Write>::write_all(_2, move _7) -> [return: bb7, unwind continue];
    }

    bb7: {
        _5 = <Result<(), std::io::Error> as Try>::branch(move _6) -> [return: bb8, unwind continue];
    }

    bb8: {
        _11 = discriminant(_5);
        switchInt(move _11) -> [0: bb9, 1: bb10, otherwise: bb1];
    }

    bb9: {
        _13 = discriminant((*_1));
        switchInt(move _13) -> [0: bb19, 1: bb12, 2: bb11, otherwise: bb1];
    }

    bb10: {
        _12 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb20, unwind continue];
    }

    bb11: {
        _19 = &(((*_1) as Withdraw).0: u64);
        _21 = <u64 as BorshSerialize>::serialize::<W>(_19, _2) -> [return: bb16, unwind continue];
    }

    bb12: {
        _14 = &(((*_1) as Deposit).0: u64);
        _16 = <u64 as BorshSerialize>::serialize::<W>(_14, _2) -> [return: bb13, unwind continue];
    }

    bb13: {
        _15 = <Result<(), std::io::Error> as Try>::branch(move _16) -> [return: bb14, unwind continue];
    }

    bb14: {
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb19, 1: bb15, otherwise: bb1];
    }

    bb15: {
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _18) -> [return: bb20, unwind continue];
    }

    bb16: {
        _20 = <Result<(), std::io::Error> as Try>::branch(move _21) -> [return: bb17, unwind continue];
    }

    bb17: {
        _22 = discriminant(_20);
        switchInt(move _22) -> [0: bb19, 1: bb18, otherwise: bb1];
    }

    bb18: {
        _23 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _23) -> [return: bb20, unwind continue];
    }

    bb19: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        goto -> bb20;
    }

    bb20: {
        return;
    }
}

fn <impl at src/lib.rs:39:10: 39:15>::clone(_1: &Wallet) -> Wallet {
    debug self => _1;
    let mut _0: Wallet;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at src/lib.rs:39:23: 39:28>::fmt(_1: &Wallet, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&solana_program::pubkey::Pubkey;
    let _7: &solana_program::pubkey::Pubkey;

    bb0: {
        _3 = const "Wallet";
        _4 = const "authority";
        _7 = &((*_1).0: solana_program::pubkey::Pubkey);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/lib.rs:39:30: 39:37>::default() -> Wallet {
    let mut _0: Wallet;
    let mut _1: solana_program::pubkey::Pubkey;

    bb0: {
        _1 = <Pubkey as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Wallet { authority: move _1 };
        return;
    }
}

fn <impl at src/lib.rs:39:39: 39:48>::eq(_1: &Wallet, _2: &Wallet) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: &solana_program::pubkey::Pubkey;
    let mut _4: &solana_program::pubkey::Pubkey;

    bb0: {
        _3 = &((*_1).0: solana_program::pubkey::Pubkey);
        _4 = &((*_2).0: solana_program::pubkey::Pubkey);
        _0 = <Pubkey as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at src/lib.rs:39:50: 39:64>::serialize(_1: &Wallet, _2: &mut W) -> Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _4: std::result::Result<(), std::io::Error>;
    let _5: &solana_program::pubkey::Pubkey;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }

    bb0: {
        _5 = &((*_1).0: solana_program::pubkey::Pubkey);
        _4 = <Pubkey as BorshSerialize>::serialize::<W>(_5, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<(), std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        goto -> bb6;
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn <impl at src/lib.rs:39:66: 39:82>::deserialize(_1: &mut &[u8]) -> Result<Wallet, std::io::Error> {
    debug buf => _1;
    let mut _0: std::result::Result<Wallet, std::io::Error>;
    let mut _2: Wallet;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, solana_program::pubkey::Pubkey>;
    let mut _4: std::result::Result<solana_program::pubkey::Pubkey, std::io::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _7: solana_program::pubkey::Pubkey;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <Pubkey as BorshDeserialize>::deserialize(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<Pubkey, std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = ((_3 as Continue).0: solana_program::pubkey::Pubkey);
        _2 = Wallet { authority: _7 };
        _0 = Result::<Wallet, std::io::Error>::Ok(move _2);
        goto -> bb6;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<Wallet, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _6) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

const WALLET_LEN: u64 = {
    let mut _0: u64;

    bb0: {
        _0 = const 32_u64;
        return;
    }
}

fn process_instruction(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: &[u8]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug instruction_data => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, WalletInstruction>;
    let mut _5: std::result::Result<WalletInstruction, std::io::Error>;
    let mut _6: &mut &[u8];
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _9: WalletInstruction;
    let mut _10: isize;
    let _11: u64;
    let _12: u64;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _9;
        scope 4 {
        }
    }
    scope 5 {
        debug amount => _11;
    }
    scope 6 {
        debug amount => _12;
    }

    bb0: {
        _6 = &mut _3;
        _5 = <WalletInstruction as BorshDeserialize>::deserialize(_6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <Result<WalletInstruction, std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _9 = move ((_4 as Continue).0: WalletInstruction);
        _10 = discriminant(_9);
        switchInt(move _10) -> [0: bb7, 1: bb8, 2: bb6, otherwise: bb3];
    }

    bb5: {
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _8) -> [return: bb9, unwind continue];
    }

    bb6: {
        _12 = ((_9 as Withdraw).0: u64);
        _0 = processor::withdraw(_1, _2, _12) -> [return: bb9, unwind continue];
    }

    bb7: {
        _0 = processor::initialize(_1, _2) -> [return: bb9, unwind continue];
    }

    bb8: {
        _11 = ((_9 as Deposit).0: u64);
        _0 = processor::deposit(_1, _2, _11) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }
}

fn processor::initialize(_1: &Pubkey, _2: &[AccountInfo<'_>]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _3: ();
    let _4: &str;
    let _5: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _6: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _8: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _9: isize;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _13: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _14: isize;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _18: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _19: isize;
    let mut _24: (solana_program::pubkey::Pubkey, u8);
    let mut _25: &[&[u8]];
    let _26: &[&[u8]; 1];
    let _27: [&[u8]; 1];
    let mut _28: &[u8];
    let _29: &[u8; 32];
    let _30: [u8; 32];
    let mut _31: solana_program::pubkey::Pubkey;
    let mut _32: &solana_program::pubkey::Pubkey;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::rent::Rent>;
    let mut _35: std::result::Result<solana_program::rent::Rent, solana_program::program_error::ProgramError>;
    let mut _36: isize;
    let mut _39: (&solana_program::pubkey::Pubkey, &solana_program::pubkey::Pubkey);
    let mut _40: &solana_program::pubkey::Pubkey;
    let mut _43: bool;
    let _45: !;
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _47: bool;
    let mut _48: !;
    let mut _49: bool;
    let _50: !;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _52: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _53: &solana_program::instruction::Instruction;
    let _54: solana_program::instruction::Instruction;
    let _55: &&solana_program::pubkey::Pubkey;
    let _56: &solana_program::pubkey::Pubkey;
    let mut _57: u64;
    let mut _58: &solana_program::rent::Rent;
    let mut _59: usize;
    let _60: &&solana_program::pubkey::Pubkey;
    let mut _61: &[solana_program::account_info::AccountInfo<'_>];
    let _62: &[solana_program::account_info::AccountInfo<'_>; 2];
    let _63: [solana_program::account_info::AccountInfo<'_>; 2];
    let mut _64: solana_program::account_info::AccountInfo<'_>;
    let mut _65: solana_program::account_info::AccountInfo<'_>;
    let mut _66: &[&[&[u8]]];
    let _67: &[&[&[u8]]; 1];
    let _68: [&[&[u8]]; 1];
    let mut _69: &[&[u8]];
    let _70: &[&[u8]; 2];
    let _71: [&[u8]; 2];
    let mut _72: &[u8];
    let _73: &[u8; 32];
    let _74: [u8; 32];
    let mut _75: solana_program::pubkey::Pubkey;
    let mut _76: &[u8];
    let _77: &[u8; 1];
    let _78: [u8; 1];
    let mut _79: isize;
    let mut _82: solana_program::pubkey::Pubkey;
    let _83: ();
    let mut _84: std::result::Result<(), std::io::Error>;
    let mut _85: &Wallet;
    let mut _86: &mut &mut [u8];
    let mut _87: &mut [u8];
    let mut _88: &mut [u8];
    let mut _89: &mut &mut [u8];
    let mut _90: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _91: std::cell::RefMut<'_, &mut [u8]>;
    let _92: &std::cell::RefCell<&mut [u8]>;
    let mut _93: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _94: &solana_program::pubkey::Pubkey;
    let mut _95: &solana_program::pubkey::Pubkey;
    let mut _96: &solana_program::pubkey::Pubkey;
    let mut _97: &solana_program::pubkey::Pubkey;
    let mut _98: &solana_program::pubkey::Pubkey;
    let mut _99: &solana_program::pubkey::Pubkey;
    let mut _100: &mut [u8];
    scope 1 {
        debug account_info_iter => _5;
        let _10: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _11: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug wallet_info => _11;
            let _15: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _16: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug authority => _16;
                let _20: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _21: &solana_program::account_info::AccountInfo<'_>;
                scope 12 {
                    debug rent_info => _21;
                    let _22: solana_program::pubkey::Pubkey;
                    let _23: u8;
                    scope 17 {
                        debug wallet_address => _22;
                        debug wallet_seed => _23;
                        let _33: solana_program::rent::Rent;
                        let _37: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _38: solana_program::rent::Rent;
                        scope 18 {
                            debug rent => _33;
                            let _41: &solana_program::pubkey::Pubkey;
                            let _42: &solana_program::pubkey::Pubkey;
                            let _80: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _81: Wallet;
                            scope 23 {
                                debug left_val => _41;
                                debug right_val => _42;
                                let _44: core::panicking::AssertKind;
                                scope 24 {
                                    debug kind => _44;
                                }
                            }
                            scope 25 {
                                debug residual => _80;
                                scope 26 {
                                }
                            }
                            scope 27 {
                                debug val => const ();
                                scope 28 {
                                }
                            }
                            scope 29 {
                                debug wallet => _81;
                            }
                        }
                        scope 19 {
                            debug residual => _37;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => _38;
                            scope 22 {
                            }
                        }
                    }
                }
                scope 13 {
                    debug residual => _20;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _21;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _15;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _16;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _10;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _11;
            scope 6 {
            }
        }
    }

    bb0: {
        _4 = const "init";
        _3 = solana_program::log::sol_log(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = core::slice::<impl [AccountInfo<'_>]>::iter(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = &mut _6;
        _8 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb6, 1: bb7, otherwise: bb5];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _11 = ((_7 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _13 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_5) -> [return: bb8, unwind continue];
    }

    bb7: {
        _10 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _10) -> [return: bb50, unwind continue];
    }

    bb8: {
        _12 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _13) -> [return: bb9, unwind continue];
    }

    bb9: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        _16 = ((_12 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _18 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_5) -> [return: bb12, unwind continue];
    }

    bb11: {
        _15 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _15) -> [return: bb50, unwind continue];
    }

    bb12: {
        _17 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _18) -> [return: bb13, unwind continue];
    }

    bb13: {
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb14, 1: bb15, otherwise: bb5];
    }

    bb14: {
        _21 = ((_17 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _94 = deref_copy ((*_16).0: &solana_program::pubkey::Pubkey);
        _31 = (*_94);
        _30 = Pubkey::to_bytes(move _31) -> [return: bb16, unwind continue];
    }

    bb15: {
        _20 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _20) -> [return: bb50, unwind continue];
    }

    bb16: {
        _29 = &_30;
        _28 = _29 as &[u8] (PointerCoercion(Unsize));
        _27 = [move _28];
        _26 = &_27;
        _25 = _26 as &[&[u8]] (PointerCoercion(Unsize));
        _32 = _1;
        _24 = Pubkey::find_program_address(move _25, move _32) -> [return: bb17, unwind continue];
    }

    bb17: {
        _22 = (_24.0: solana_program::pubkey::Pubkey);
        _23 = (_24.1: u8);
        _35 = <Rent as Sysvar>::from_account_info(_21) -> [return: bb18, unwind continue];
    }

    bb18: {
        _34 = <Result<Rent, ProgramError> as Try>::branch(move _35) -> [return: bb19, unwind continue];
    }

    bb19: {
        _36 = discriminant(_34);
        switchInt(move _36) -> [0: bb20, 1: bb21, otherwise: bb5];
    }

    bb20: {
        _38 = move ((_34 as Continue).0: solana_program::rent::Rent);
        _33 = move _38;
        _95 = deref_copy ((*_11).0: &solana_program::pubkey::Pubkey);
        _40 = &_22;
        _39 = (_95, move _40);
        _41 = (_39.0: &solana_program::pubkey::Pubkey);
        _42 = (_39.1: &solana_program::pubkey::Pubkey);
        _43 = <Pubkey as PartialEq>::eq(_41, _42) -> [return: bb22, unwind continue];
    }

    bb21: {
        _37 = move ((_34 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _37) -> [return: bb50, unwind continue];
    }

    bb22: {
        switchInt(move _43) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _47 = AccountInfo::<'_>::data_is_empty(_11) -> [return: bb25, unwind continue];
    }

    bb24: {
        _44 = core::panicking::AssertKind::Eq;
        _46 = Option::<Arguments<'_>>::None;
        _45 = assert_failed::<Pubkey, Pubkey>(move _44, _41, _42, move _46) -> unwind continue;
    }

    bb25: {
        switchInt(move _47) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _49 = ((*_16).5: bool);
        switchInt(move _49) -> [0: bb29, otherwise: bb28];
    }

    bb27: {
        _48 = panic(const "assertion failed: wallet_info.data_is_empty()") -> unwind continue;
    }

    bb28: {
        _55 = &((*_16).0: &solana_program::pubkey::Pubkey);
        _96 = deref_copy (*_55);
        _56 = &_22;
        _58 = &_33;
        _59 = const WALLET_LEN as usize (IntToInt);
        _57 = Rent::minimum_balance(move _58, move _59) -> [return: bb30, unwind continue];
    }

    bb29: {
        _50 = begin_panic::<&str>(const "authority must sign!") -> unwind continue;
    }

    bb30: {
        _60 = &_1;
        _97 = deref_copy (*_60);
        _54 = solana_program::system_instruction::create_account(_96, _56, move _57, const WALLET_LEN, _97) -> [return: bb31, unwind continue];
    }

    bb31: {
        _53 = &_54;
        _64 = <AccountInfo<'_> as Clone>::clone(_16) -> [return: bb32, unwind: bb54];
    }

    bb32: {
        _65 = <AccountInfo<'_> as Clone>::clone(_11) -> [return: bb33, unwind: bb53];
    }

    bb33: {
        _63 = [move _64, move _65];
        _62 = &_63;
        _61 = _62 as &[solana_program::account_info::AccountInfo<'_>] (PointerCoercion(Unsize));
        _98 = deref_copy ((*_16).0: &solana_program::pubkey::Pubkey);
        _75 = (*_98);
        _74 = Pubkey::to_bytes(move _75) -> [return: bb34, unwind: bb52];
    }

    bb34: {
        _73 = &_74;
        _72 = _73 as &[u8] (PointerCoercion(Unsize));
        _78 = [_23];
        _77 = &_78;
        _76 = _77 as &[u8] (PointerCoercion(Unsize));
        _71 = [move _72, move _76];
        _70 = &_71;
        _69 = _70 as &[&[u8]] (PointerCoercion(Unsize));
        _68 = [move _69];
        _67 = &_68;
        _66 = _67 as &[&[&[u8]]] (PointerCoercion(Unsize));
        _52 = invoke_signed(_53, move _61, move _66) -> [return: bb35, unwind: bb52];
    }

    bb35: {
        _51 = <Result<(), ProgramError> as Try>::branch(move _52) -> [return: bb36, unwind: bb52];
    }

    bb36: {
        _79 = discriminant(_51);
        switchInt(move _79) -> [0: bb37, 1: bb38, otherwise: bb5];
    }

    bb37: {
        drop(_63) -> [return: bb40, unwind: bb54];
    }

    bb38: {
        _80 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _80) -> [return: bb39, unwind: bb52];
    }

    bb39: {
        drop(_63) -> [return: bb49, unwind: bb54];
    }

    bb40: {
        drop(_54) -> [return: bb41, unwind continue];
    }

    bb41: {
        _99 = deref_copy ((*_16).0: &solana_program::pubkey::Pubkey);
        _82 = (*_99);
        _81 = Wallet { authority: move _82 };
        _85 = &_81;
        _93 = &((*_11).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _92 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _93) -> [return: bb42, unwind continue];
    }

    bb42: {
        _91 = RefCell::<&mut [u8]>::borrow_mut(_92) -> [return: bb43, unwind continue];
    }

    bb43: {
        _90 = &mut _91;
        _89 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _90) -> [return: bb44, unwind: bb51];
    }

    bb44: {
        _100 = deref_copy (*_89);
        _88 = <[u8] as IndexMut<RangeFull>>::index_mut(_100, const RangeFull) -> [return: bb45, unwind: bb51];
    }

    bb45: {
        _87 = _88;
        _86 = &mut _87;
        _84 = <Wallet as BorshSerialize>::serialize::<&mut [u8]>(move _85, _86) -> [return: bb46, unwind: bb51];
    }

    bb46: {
        _83 = Result::<(), std::io::Error>::unwrap(move _84) -> [return: bb47, unwind: bb51];
    }

    bb47: {
        drop(_91) -> [return: bb48, unwind continue];
    }

    bb48: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        goto -> bb50;
    }

    bb49: {
        drop(_54) -> [return: bb50, unwind continue];
    }

    bb50: {
        return;
    }

    bb51 (cleanup): {
        drop(_91) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_63) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_64) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_54) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        resume;
    }
}

fn processor::deposit(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: u64) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug amount => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: ();
    let _5: &str;
    let _6: &std::string::String;
    let _7: std::string::String;
    let _8: std::string::String;
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &u64;
    let _16: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _17: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _19: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _20: isize;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _24: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _25: isize;
    let mut _28: (&&solana_program::pubkey::Pubkey, &&solana_program::pubkey::Pubkey);
    let mut _29: &&solana_program::pubkey::Pubkey;
    let mut _30: &&solana_program::pubkey::Pubkey;
    let mut _33: bool;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _38: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _39: &solana_program::instruction::Instruction;
    let _40: solana_program::instruction::Instruction;
    let _41: &&solana_program::pubkey::Pubkey;
    let _42: &&solana_program::pubkey::Pubkey;
    let mut _43: u64;
    let mut _44: &[solana_program::account_info::AccountInfo<'_>];
    let _45: &[solana_program::account_info::AccountInfo<'_>; 2];
    let _46: [solana_program::account_info::AccountInfo<'_>; 2];
    let mut _47: solana_program::account_info::AccountInfo<'_>;
    let mut _48: solana_program::account_info::AccountInfo<'_>;
    let mut _49: isize;
    let mut _51: &[&str; 1];
    let mut _52: &solana_program::pubkey::Pubkey;
    let mut _53: &solana_program::pubkey::Pubkey;
    scope 1 {
        debug res => _8;
    }
    scope 2 {
        debug account_info_iter => _16;
        let _21: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _22: &solana_program::account_info::AccountInfo<'_>;
        scope 3 {
            debug wallet_info => _22;
            let _26: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _27: &solana_program::account_info::AccountInfo<'_>;
            scope 8 {
                debug source_info => _27;
                let _31: &&solana_program::pubkey::Pubkey;
                let _32: &&solana_program::pubkey::Pubkey;
                let _50: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                scope 13 {
                    debug left_val => _31;
                    debug right_val => _32;
                    let _34: core::panicking::AssertKind;
                    scope 14 {
                        debug kind => _34;
                    }
                }
                scope 15 {
                    debug residual => _50;
                    scope 16 {
                    }
                }
                scope 17 {
                    debug val => const ();
                    scope 18 {
                    }
                }
            }
            scope 9 {
                debug residual => _26;
                scope 10 {
                }
            }
            scope 11 {
                debug val => _27;
                scope 12 {
                }
            }
        }
        scope 4 {
            debug residual => _21;
            scope 5 {
            }
        }
        scope 6 {
            debug val => _22;
            scope 7 {
            }
        }
    }

    bb0: {
        _51 = const processor::deposit::promoted[0];
        _10 = _51 as &[&str] (PointerCoercion(Unsize));
        _15 = &_3;
        _14 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_15) -> [return: bb1, unwind continue];
    }

    bb1: {
        _13 = [move _14];
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = format(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = move _8;
        _6 = &_7;
        _5 = <String as Deref>::deref(_6) -> [return: bb4, unwind: bb35];
    }

    bb4: {
        _4 = solana_program::log::sol_log(_5) -> [return: bb5, unwind: bb35];
    }

    bb5: {
        drop(_7) -> [return: bb6, unwind continue];
    }

    bb6: {
        _17 = core::slice::<impl [AccountInfo<'_>]>::iter(_2) -> [return: bb7, unwind continue];
    }

    bb7: {
        _16 = &mut _17;
        _19 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_16) -> [return: bb8, unwind continue];
    }

    bb8: {
        _18 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _19) -> [return: bb9, unwind continue];
    }

    bb9: {
        _20 = discriminant(_18);
        switchInt(move _20) -> [0: bb11, 1: bb12, otherwise: bb10];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _22 = ((_18 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _24 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_16) -> [return: bb13, unwind continue];
    }

    bb12: {
        _21 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _21) -> [return: bb31, unwind continue];
    }

    bb13: {
        _23 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _24) -> [return: bb14, unwind continue];
    }

    bb14: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb15, 1: bb16, otherwise: bb10];
    }

    bb15: {
        _27 = ((_23 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _29 = &((*_22).3: &solana_program::pubkey::Pubkey);
        _30 = &_1;
        _28 = (move _29, move _30);
        _31 = (_28.0: &&solana_program::pubkey::Pubkey);
        _32 = (_28.1: &&solana_program::pubkey::Pubkey);
        _33 = <&Pubkey as PartialEq>::eq(_31, _32) -> [return: bb17, unwind continue];
    }

    bb16: {
        _26 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _26) -> [return: bb31, unwind continue];
    }

    bb17: {
        switchInt(move _33) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _41 = &((*_27).0: &solana_program::pubkey::Pubkey);
        _52 = deref_copy (*_41);
        _42 = &((*_22).0: &solana_program::pubkey::Pubkey);
        _53 = deref_copy (*_42);
        _43 = _3;
        _40 = transfer(_52, _53, move _43) -> [return: bb20, unwind continue];
    }

    bb19: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = assert_failed::<&Pubkey, &Pubkey>(move _34, _31, _32, move _36) -> unwind continue;
    }

    bb20: {
        _39 = &_40;
        _47 = <AccountInfo<'_> as Clone>::clone(_22) -> [return: bb21, unwind: bb34];
    }

    bb21: {
        _48 = <AccountInfo<'_> as Clone>::clone(_27) -> [return: bb22, unwind: bb33];
    }

    bb22: {
        _46 = [move _47, move _48];
        _45 = &_46;
        _44 = _45 as &[solana_program::account_info::AccountInfo<'_>] (PointerCoercion(Unsize));
        _38 = invoke(_39, move _44) -> [return: bb23, unwind: bb32];
    }

    bb23: {
        _37 = <Result<(), ProgramError> as Try>::branch(move _38) -> [return: bb24, unwind: bb32];
    }

    bb24: {
        _49 = discriminant(_37);
        switchInt(move _49) -> [0: bb25, 1: bb26, otherwise: bb10];
    }

    bb25: {
        drop(_46) -> [return: bb28, unwind: bb34];
    }

    bb26: {
        _50 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _50) -> [return: bb27, unwind: bb32];
    }

    bb27: {
        drop(_46) -> [return: bb30, unwind: bb34];
    }

    bb28: {
        drop(_40) -> [return: bb29, unwind continue];
    }

    bb29: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        goto -> bb31;
    }

    bb30: {
        drop(_40) -> [return: bb31, unwind continue];
    }

    bb31: {
        return;
    }

    bb32 (cleanup): {
        drop(_46) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_47) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_40) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_7) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        resume;
    }
}

const processor::deposit::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "deposit "];
        _0 = &_1;
        return;
    }
}

fn processor::withdraw(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: u64) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug amount => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: ();
    let _5: &str;
    let _6: &std::string::String;
    let _7: std::string::String;
    let _8: std::string::String;
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &u64;
    let _16: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _17: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _19: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _20: isize;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _24: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _25: isize;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _29: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _30: isize;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, Wallet>;
    let mut _35: std::result::Result<Wallet, std::io::Error>;
    let mut _36: &mut &[u8];
    let mut _37: &[u8];
    let _38: &[u8];
    let mut _39: &[u8];
    let _40: &&mut [u8];
    let mut _41: &std::cell::RefMut<'_, &mut [u8]>;
    let _42: std::cell::RefMut<'_, &mut [u8]>;
    let _43: &std::cell::RefCell<&mut [u8]>;
    let mut _44: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _45: isize;
    let mut _48: (&&solana_program::pubkey::Pubkey, &&solana_program::pubkey::Pubkey);
    let mut _49: &&solana_program::pubkey::Pubkey;
    let mut _50: &&solana_program::pubkey::Pubkey;
    let mut _53: bool;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: (&solana_program::pubkey::Pubkey, &solana_program::pubkey::Pubkey);
    let mut _58: &solana_program::pubkey::Pubkey;
    let mut _61: bool;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: bool;
    let mut _66: u64;
    let mut _67: u64;
    let mut _68: &&mut u64;
    let mut _69: &std::cell::RefMut<'_, &mut u64>;
    let _70: std::cell::RefMut<'_, &mut u64>;
    let _71: &std::cell::RefCell<&mut u64>;
    let mut _72: &std::rc::Rc<std::cell::RefCell<&mut u64>>;
    let mut _73: solana_program::program_error::ProgramError;
    let mut _74: u64;
    let mut _75: &mut &mut u64;
    let mut _76: &mut std::cell::RefMut<'_, &mut u64>;
    let mut _77: std::cell::RefMut<'_, &mut u64>;
    let _78: &std::cell::RefCell<&mut u64>;
    let mut _79: &std::rc::Rc<std::cell::RefCell<&mut u64>>;
    let mut _80: u64;
    let mut _81: &mut &mut u64;
    let mut _82: &mut std::cell::RefMut<'_, &mut u64>;
    let mut _83: std::cell::RefMut<'_, &mut u64>;
    let _84: &std::cell::RefCell<&mut u64>;
    let mut _85: &std::rc::Rc<std::cell::RefCell<&mut u64>>;
    let _86: ();
    let mut _87: std::result::Result<(), std::io::Error>;
    let mut _88: &Wallet;
    let mut _89: &mut &mut [u8];
    let mut _90: &mut [u8];
    let mut _91: &mut [u8];
    let mut _92: &mut &mut [u8];
    let mut _93: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _94: std::cell::RefMut<'_, &mut [u8]>;
    let _95: &std::cell::RefCell<&mut [u8]>;
    let mut _96: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _97: &[&str; 1];
    let mut _98: &mut [u8];
    let mut _99: &solana_program::pubkey::Pubkey;
    let mut _100: &mut u64;
    let mut _101: &mut u64;
    let mut _102: &mut u64;
    let mut _103: &mut u64;
    let mut _104: &mut u64;
    let mut _105: &mut [u8];
    scope 1 {
        debug res => _8;
    }
    scope 2 {
        debug account_info_iter => _16;
        let _21: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _22: &solana_program::account_info::AccountInfo<'_>;
        scope 3 {
            debug wallet_info => _22;
            let _26: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _27: &solana_program::account_info::AccountInfo<'_>;
            scope 8 {
                debug authority_info => _27;
                let _31: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _32: &solana_program::account_info::AccountInfo<'_>;
                scope 13 {
                    debug destination_info => _32;
                    let _33: Wallet;
                    let _46: std::result::Result<std::convert::Infallible, std::io::Error>;
                    let _47: Wallet;
                    scope 18 {
                        debug wallet => _33;
                        let _51: &&solana_program::pubkey::Pubkey;
                        let _52: &&solana_program::pubkey::Pubkey;
                        let _59: &solana_program::pubkey::Pubkey;
                        let _60: &solana_program::pubkey::Pubkey;
                        scope 23 {
                            debug left_val => _51;
                            debug right_val => _52;
                            let _54: core::panicking::AssertKind;
                            scope 24 {
                                debug kind => _54;
                            }
                        }
                        scope 25 {
                            debug left_val => _59;
                            debug right_val => _60;
                            let _62: core::panicking::AssertKind;
                            scope 26 {
                                debug kind => _62;
                            }
                        }
                    }
                    scope 19 {
                        debug residual => _46;
                        scope 20 {
                        }
                    }
                    scope 21 {
                        debug val => _47;
                        scope 22 {
                        }
                    }
                }
                scope 14 {
                    debug residual => _31;
                    scope 15 {
                    }
                }
                scope 16 {
                    debug val => _32;
                    scope 17 {
                    }
                }
            }
            scope 9 {
                debug residual => _26;
                scope 10 {
                }
            }
            scope 11 {
                debug val => _27;
                scope 12 {
                }
            }
        }
        scope 4 {
            debug residual => _21;
            scope 5 {
            }
        }
        scope 6 {
            debug val => _22;
            scope 7 {
            }
        }
    }

    bb0: {
        _97 = const processor::withdraw::promoted[0];
        _10 = _97 as &[&str] (PointerCoercion(Unsize));
        _15 = &_3;
        _14 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_15) -> [return: bb1, unwind continue];
    }

    bb1: {
        _13 = [move _14];
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = format(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = move _8;
        _6 = &_7;
        _5 = <String as Deref>::deref(_6) -> [return: bb4, unwind: bb65];
    }

    bb4: {
        _4 = solana_program::log::sol_log(_5) -> [return: bb5, unwind: bb65];
    }

    bb5: {
        drop(_7) -> [return: bb6, unwind continue];
    }

    bb6: {
        _17 = core::slice::<impl [AccountInfo<'_>]>::iter(_2) -> [return: bb7, unwind continue];
    }

    bb7: {
        _16 = &mut _17;
        _19 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_16) -> [return: bb8, unwind continue];
    }

    bb8: {
        _18 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _19) -> [return: bb9, unwind continue];
    }

    bb9: {
        _20 = discriminant(_18);
        switchInt(move _20) -> [0: bb11, 1: bb12, otherwise: bb10];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _22 = ((_18 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _24 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_16) -> [return: bb13, unwind continue];
    }

    bb12: {
        _21 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _21) -> [return: bb59, unwind continue];
    }

    bb13: {
        _23 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _24) -> [return: bb14, unwind continue];
    }

    bb14: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb15, 1: bb16, otherwise: bb10];
    }

    bb15: {
        _27 = ((_23 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _29 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_16) -> [return: bb17, unwind continue];
    }

    bb16: {
        _26 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _26) -> [return: bb59, unwind continue];
    }

    bb17: {
        _28 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _29) -> [return: bb18, unwind continue];
    }

    bb18: {
        _30 = discriminant(_28);
        switchInt(move _30) -> [0: bb19, 1: bb20, otherwise: bb10];
    }

    bb19: {
        _32 = ((_28 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _44 = &((*_22).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _43 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _44) -> [return: bb21, unwind continue];
    }

    bb20: {
        _31 = move ((_28 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _31) -> [return: bb59, unwind continue];
    }

    bb21: {
        _42 = RefCell::<&mut [u8]>::borrow_mut(_43) -> [return: bb22, unwind continue];
    }

    bb22: {
        _41 = &_42;
        _40 = <RefMut<'_, &mut [u8]> as Deref>::deref(move _41) -> [return: bb23, unwind: bb64];
    }

    bb23: {
        _98 = deref_copy (*_40);
        _39 = &(*_98);
        _38 = <[u8] as Index<RangeFull>>::index(move _39, const RangeFull) -> [return: bb24, unwind: bb64];
    }

    bb24: {
        _37 = _38;
        _36 = &mut _37;
        _35 = <Wallet as BorshDeserialize>::deserialize(_36) -> [return: bb25, unwind: bb64];
    }

    bb25: {
        _34 = <Result<Wallet, std::io::Error> as Try>::branch(move _35) -> [return: bb26, unwind: bb64];
    }

    bb26: {
        _45 = discriminant(_34);
        switchInt(move _45) -> [0: bb27, 1: bb28, otherwise: bb10];
    }

    bb27: {
        _47 = ((_34 as Continue).0: Wallet);
        _33 = _47;
        drop(_42) -> [return: bb30, unwind continue];
    }

    bb28: {
        _46 = move ((_34 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _46) -> [return: bb29, unwind: bb64];
    }

    bb29: {
        drop(_42) -> [return: bb59, unwind continue];
    }

    bb30: {
        _49 = &((*_22).3: &solana_program::pubkey::Pubkey);
        _50 = &_1;
        _48 = (move _49, move _50);
        _51 = (_48.0: &&solana_program::pubkey::Pubkey);
        _52 = (_48.1: &&solana_program::pubkey::Pubkey);
        _53 = <&Pubkey as PartialEq>::eq(_51, _52) -> [return: bb31, unwind continue];
    }

    bb31: {
        switchInt(move _53) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _58 = &(_33.0: solana_program::pubkey::Pubkey);
        _99 = deref_copy ((*_27).0: &solana_program::pubkey::Pubkey);
        _57 = (move _58, _99);
        _59 = (_57.0: &solana_program::pubkey::Pubkey);
        _60 = (_57.1: &solana_program::pubkey::Pubkey);
        _61 = <Pubkey as PartialEq>::eq(_59, _60) -> [return: bb34, unwind continue];
    }

    bb33: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = assert_failed::<&Pubkey, &Pubkey>(move _54, _51, _52, move _56) -> unwind continue;
    }

    bb34: {
        switchInt(move _61) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _66 = _3;
        _72 = &((*_22).1: std::rc::Rc<std::cell::RefCell<&mut u64>>);
        _71 = <Rc<RefCell<&mut u64>> as Deref>::deref(move _72) -> [return: bb37, unwind continue];
    }

    bb36: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = assert_failed::<Pubkey, Pubkey>(move _62, _59, _60, move _64) -> unwind continue;
    }

    bb37: {
        _70 = RefCell::<&mut u64>::borrow_mut(_71) -> [return: bb38, unwind continue];
    }

    bb38: {
        _69 = &_70;
        _68 = <RefMut<'_, &mut u64> as Deref>::deref(move _69) -> [return: bb39, unwind: bb63];
    }

    bb39: {
        _100 = deref_copy (*_68);
        _67 = (*_100);
        _65 = Gt(move _66, move _67);
        switchInt(move _65) -> [0: bb42, otherwise: bb40];
    }

    bb40: {
        drop(_70) -> [return: bb41, unwind continue];
    }

    bb41: {
        _73 = solana_program::program_error::ProgramError::InsufficientFunds;
        _0 = Result::<(), ProgramError>::Err(move _73);
        goto -> bb59;
    }

    bb42: {
        drop(_70) -> [return: bb43, unwind continue];
    }

    bb43: {
        _74 = _3;
        _79 = &((*_22).1: std::rc::Rc<std::cell::RefCell<&mut u64>>);
        _78 = <Rc<RefCell<&mut u64>> as Deref>::deref(move _79) -> [return: bb44, unwind continue];
    }

    bb44: {
        _77 = RefCell::<&mut u64>::borrow_mut(_78) -> [return: bb45, unwind continue];
    }

    bb45: {
        _76 = &mut _77;
        _75 = <RefMut<'_, &mut u64> as DerefMut>::deref_mut(move _76) -> [return: bb46, unwind: bb62];
    }

    bb46: {
        _101 = deref_copy (*_75);
        _102 = deref_copy (*_75);
        (*_101) = Sub((*_102), move _74);
        drop(_77) -> [return: bb47, unwind continue];
    }

    bb47: {
        _80 = _3;
        _85 = &((*_32).1: std::rc::Rc<std::cell::RefCell<&mut u64>>);
        _84 = <Rc<RefCell<&mut u64>> as Deref>::deref(move _85) -> [return: bb48, unwind continue];
    }

    bb48: {
        _83 = RefCell::<&mut u64>::borrow_mut(_84) -> [return: bb49, unwind continue];
    }

    bb49: {
        _82 = &mut _83;
        _81 = <RefMut<'_, &mut u64> as DerefMut>::deref_mut(move _82) -> [return: bb50, unwind: bb61];
    }

    bb50: {
        _103 = deref_copy (*_81);
        _104 = deref_copy (*_81);
        (*_103) = Add((*_104), move _80);
        drop(_83) -> [return: bb51, unwind continue];
    }

    bb51: {
        _88 = &_33;
        _96 = &((*_22).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _95 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _96) -> [return: bb52, unwind continue];
    }

    bb52: {
        _94 = RefCell::<&mut [u8]>::borrow_mut(_95) -> [return: bb53, unwind continue];
    }

    bb53: {
        _93 = &mut _94;
        _92 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _93) -> [return: bb54, unwind: bb60];
    }

    bb54: {
        _105 = deref_copy (*_92);
        _91 = <[u8] as IndexMut<RangeFull>>::index_mut(_105, const RangeFull) -> [return: bb55, unwind: bb60];
    }

    bb55: {
        _90 = _91;
        _89 = &mut _90;
        _87 = <Wallet as BorshSerialize>::serialize::<&mut [u8]>(move _88, _89) -> [return: bb56, unwind: bb60];
    }

    bb56: {
        _86 = Result::<(), std::io::Error>::unwrap(move _87) -> [return: bb57, unwind: bb60];
    }

    bb57: {
        drop(_94) -> [return: bb58, unwind continue];
    }

    bb58: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        goto -> bb59;
    }

    bb59: {
        return;
    }

    bb60 (cleanup): {
        drop(_94) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_83) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_77) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_70) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_42) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_7) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        resume;
    }
}

const processor::withdraw::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "withdraw "];
        _0 = &_1;
        return;
    }
}

fn entrypoint(_1: *mut u8) -> u64 {
    debug input => _1;
    let mut _0: u64;
    let _2: &solana_program::pubkey::Pubkey;
    let _3: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _4: &[u8];
    let mut _5: (&solana_program::pubkey::Pubkey, std::vec::Vec<solana_program::account_info::AccountInfo<'_>>, &[u8]);
    let mut _6: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _7: &&solana_program::pubkey::Pubkey;
    let _8: &[solana_program::account_info::AccountInfo<'_>];
    let _9: &std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _10: &&[u8];
    let mut _11: isize;
    let mut _13: &solana_program::pubkey::Pubkey;
    let mut _14: &[u8];
    scope 1 {
        debug program_id => _2;
        debug accounts => _3;
        debug instruction_data => _4;
        let _12: solana_program::program_error::ProgramError;
        scope 3 {
            debug error => _12;
        }
    }
    scope 2 {
    }

    bb0: {
        _5 = solana_program::entrypoint::deserialize::<'_>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = (_5.0: &solana_program::pubkey::Pubkey);
        _3 = move (_5.1: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>);
        _4 = (_5.2: &[u8]);
        _7 = &_2;
        _13 = deref_copy (*_7);
        _9 = &_3;
        _8 = <Vec<AccountInfo<'_>> as Deref>::deref(_9) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _10 = &_4;
        _14 = deref_copy (*_10);
        _6 = process_instruction(_13, _8, _14) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb6, 1: bb5, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _12 = move ((_6 as Err).0: solana_program::program_error::ProgramError);
        _0 = <ProgramError as Into<u64>>::into(move _12) -> [return: bb12, unwind: bb9];
    }

    bb6: {
        _0 = const solana_program::entrypoint::SUCCESS;
        goto -> bb7;
    }

    bb7: {
        drop(_3) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        goto -> bb7;
    }
}

fn get_wallet_address(_1: Pubkey, _2: Pubkey) -> Pubkey {
    debug authority => _1;
    debug wallet_program => _2;
    let mut _0: solana_program::pubkey::Pubkey;
    let mut _3: (solana_program::pubkey::Pubkey, u8);
    let mut _4: &[&[u8]];
    let _5: &[&[u8]; 1];
    let _6: [&[u8]; 1];
    let mut _7: &[u8];
    let _8: &[u8; 32];
    let _9: [u8; 32];
    let _10: &solana_program::pubkey::Pubkey;
    scope 1 {
        debug wallet_address => _0;
    }

    bb0: {
        _9 = Pubkey::to_bytes(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &_9;
        _7 = _8 as &[u8] (PointerCoercion(Unsize));
        _6 = [move _7];
        _5 = &_6;
        _4 = _5 as &[&[u8]] (PointerCoercion(Unsize));
        _10 = &_2;
        _3 = Pubkey::find_program_address(move _4, _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = (_3.0: solana_program::pubkey::Pubkey);
        return;
    }
}

fn initialize(_1: Pubkey, _2: Pubkey) -> Instruction {
    debug wallet_program => _1;
    debug authority_address => _2;
    let mut _0: solana_program::instruction::Instruction;
    let _3: solana_program::pubkey::Pubkey;
    let mut _4: std::vec::Vec<solana_program::instruction::AccountMeta>;
    let mut _5: std::boxed::Box<[solana_program::instruction::AccountMeta]>;
    let mut _6: std::boxed::Box<[solana_program::instruction::AccountMeta; 4]>;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: *mut u8;
    let mut _10: std::boxed::Box<[solana_program::instruction::AccountMeta; 4]>;
    let mut _11: solana_program::instruction::AccountMeta;
    let mut _12: solana_program::instruction::AccountMeta;
    let mut _13: solana_program::instruction::AccountMeta;
    let mut _14: solana_program::pubkey::Pubkey;
    let mut _15: solana_program::instruction::AccountMeta;
    let mut _16: solana_program::pubkey::Pubkey;
    let mut _17: std::vec::Vec<u8>;
    let mut _18: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _20: *const [solana_program::instruction::AccountMeta; 4];
    scope 1 {
        debug wallet_address => _3;
        let mut _19: &WalletInstruction;
        scope 2 {
        }
    }

    bb0: {
        _3 = get_wallet_address(_2, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = SizeOf([solana_program::instruction::AccountMeta; 4]);
        _8 = AlignOf([solana_program::instruction::AccountMeta; 4]);
        _9 = alloc::alloc::exchange_malloc(move _7, move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = ShallowInitBox(move _9, [solana_program::instruction::AccountMeta; 4]);
        _11 = AccountMeta::new(_3, const false) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _12 = AccountMeta::new(_2, const true) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _14 = solana_program::sysvar::rent::id() -> [return: bb5, unwind: bb13];
    }

    bb5: {
        _13 = AccountMeta::new_readonly(move _14, const false) -> [return: bb6, unwind: bb13];
    }

    bb6: {
        _16 = solana_program::system_program::id() -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _15 = AccountMeta::new_readonly(move _16, const false) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _20 = (((_10.0: std::ptr::Unique<[solana_program::instruction::AccountMeta; 4]>).0: std::ptr::NonNull<[solana_program::instruction::AccountMeta; 4]>).0: *const [solana_program::instruction::AccountMeta; 4]);
        (*_20) = [move _11, move _12, move _13, move _15];
        _6 = move _10;
        _5 = move _6 as std::boxed::Box<[solana_program::instruction::AccountMeta]> (PointerCoercion(Unsize));
        _4 = std::slice::<impl [AccountMeta]>::into_vec::<std::alloc::Global>(move _5) -> [return: bb9, unwind continue];
    }

    bb9: {
        _19 = const initialize::promoted[0];
        _18 = <WalletInstruction as BorshSerialize>::try_to_vec(_19) -> [return: bb10, unwind: bb12];
    }

    bb10: {
        _17 = Result::<Vec<u8>, std::io::Error>::unwrap(move _18) -> [return: bb11, unwind: bb12];
    }

    bb11: {
        _0 = Instruction { program_id: _1, accounts: move _4, data: move _17 };
        return;
    }

    bb12 (cleanup): {
        drop(_4) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_10) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        resume;
    }
}

const initialize::promoted[0]: &WalletInstruction = {
    let mut _0: &WalletInstruction;
    let mut _1: WalletInstruction;

    bb0: {
        _1 = WalletInstruction::Initialize;
        _0 = &_1;
        return;
    }
}

fn deposit(_1: Pubkey, _2: Pubkey, _3: Pubkey, _4: u64) -> Instruction {
    debug wallet_program => _1;
    debug authority_address => _2;
    debug source => _3;
    debug amount => _4;
    let mut _0: solana_program::instruction::Instruction;
    let _5: solana_program::pubkey::Pubkey;
    let mut _6: std::vec::Vec<solana_program::instruction::AccountMeta>;
    let mut _7: std::boxed::Box<[solana_program::instruction::AccountMeta]>;
    let mut _8: std::boxed::Box<[solana_program::instruction::AccountMeta; 3]>;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: *mut u8;
    let mut _12: std::boxed::Box<[solana_program::instruction::AccountMeta; 3]>;
    let mut _13: solana_program::instruction::AccountMeta;
    let mut _14: solana_program::instruction::AccountMeta;
    let mut _15: solana_program::instruction::AccountMeta;
    let mut _16: solana_program::pubkey::Pubkey;
    let mut _17: std::vec::Vec<u8>;
    let mut _18: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _19: &WalletInstruction;
    let _20: WalletInstruction;
    let mut _21: *const [solana_program::instruction::AccountMeta; 3];
    scope 1 {
        debug wallet_address => _5;
        scope 2 {
        }
    }

    bb0: {
        _5 = get_wallet_address(_2, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = SizeOf([solana_program::instruction::AccountMeta; 3]);
        _10 = AlignOf([solana_program::instruction::AccountMeta; 3]);
        _11 = alloc::alloc::exchange_malloc(move _9, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        _12 = ShallowInitBox(move _11, [solana_program::instruction::AccountMeta; 3]);
        _13 = AccountMeta::new(_5, const false) -> [return: bb3, unwind: bb11];
    }

    bb3: {
        _14 = AccountMeta::new(_3, const true) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _16 = solana_program::system_program::id() -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _15 = AccountMeta::new_readonly(move _16, const false) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _21 = (((_12.0: std::ptr::Unique<[solana_program::instruction::AccountMeta; 3]>).0: std::ptr::NonNull<[solana_program::instruction::AccountMeta; 3]>).0: *const [solana_program::instruction::AccountMeta; 3]);
        (*_21) = [move _13, move _14, move _15];
        _8 = move _12;
        _7 = move _8 as std::boxed::Box<[solana_program::instruction::AccountMeta]> (PointerCoercion(Unsize));
        _6 = std::slice::<impl [AccountMeta]>::into_vec::<std::alloc::Global>(move _7) -> [return: bb7, unwind continue];
    }

    bb7: {
        _20 = WalletInstruction::Deposit { amount: _4 };
        _19 = &_20;
        _18 = <WalletInstruction as BorshSerialize>::try_to_vec(move _19) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        _17 = Result::<Vec<u8>, std::io::Error>::unwrap(move _18) -> [return: bb9, unwind: bb10];
    }

    bb9: {
        _0 = Instruction { program_id: _1, accounts: move _6, data: move _17 };
        return;
    }

    bb10 (cleanup): {
        drop(_6) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop(_12) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }
}

fn withdraw(_1: Pubkey, _2: Pubkey, _3: Pubkey, _4: u64) -> Instruction {
    debug wallet_program => _1;
    debug authority_address => _2;
    debug destination => _3;
    debug amount => _4;
    let mut _0: solana_program::instruction::Instruction;
    let _5: solana_program::pubkey::Pubkey;
    let mut _6: std::vec::Vec<solana_program::instruction::AccountMeta>;
    let mut _7: std::boxed::Box<[solana_program::instruction::AccountMeta]>;
    let mut _8: std::boxed::Box<[solana_program::instruction::AccountMeta; 4]>;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: *mut u8;
    let mut _12: std::boxed::Box<[solana_program::instruction::AccountMeta; 4]>;
    let mut _13: solana_program::instruction::AccountMeta;
    let mut _14: solana_program::instruction::AccountMeta;
    let mut _15: solana_program::instruction::AccountMeta;
    let mut _16: solana_program::instruction::AccountMeta;
    let mut _17: solana_program::pubkey::Pubkey;
    let mut _18: std::vec::Vec<u8>;
    let mut _19: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _20: &WalletInstruction;
    let _21: WalletInstruction;
    let mut _22: *const [solana_program::instruction::AccountMeta; 4];
    scope 1 {
        debug wallet_address => _5;
        scope 2 {
        }
    }

    bb0: {
        _5 = get_wallet_address(_2, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = SizeOf([solana_program::instruction::AccountMeta; 4]);
        _10 = AlignOf([solana_program::instruction::AccountMeta; 4]);
        _11 = alloc::alloc::exchange_malloc(move _9, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        _12 = ShallowInitBox(move _11, [solana_program::instruction::AccountMeta; 4]);
        _13 = AccountMeta::new(_5, const false) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _14 = AccountMeta::new(_2, const true) -> [return: bb4, unwind: bb12];
    }

    bb4: {
        _15 = AccountMeta::new(_3, const false) -> [return: bb5, unwind: bb12];
    }

    bb5: {
        _17 = solana_program::system_program::id() -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _16 = AccountMeta::new_readonly(move _17, const false) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _22 = (((_12.0: std::ptr::Unique<[solana_program::instruction::AccountMeta; 4]>).0: std::ptr::NonNull<[solana_program::instruction::AccountMeta; 4]>).0: *const [solana_program::instruction::AccountMeta; 4]);
        (*_22) = [move _13, move _14, move _15, move _16];
        _8 = move _12;
        _7 = move _8 as std::boxed::Box<[solana_program::instruction::AccountMeta]> (PointerCoercion(Unsize));
        _6 = std::slice::<impl [AccountMeta]>::into_vec::<std::alloc::Global>(move _7) -> [return: bb8, unwind continue];
    }

    bb8: {
        _21 = WalletInstruction::Withdraw { amount: _4 };
        _20 = &_21;
        _19 = <WalletInstruction as BorshSerialize>::try_to_vec(move _20) -> [return: bb9, unwind: bb11];
    }

    bb9: {
        _18 = Result::<Vec<u8>, std::io::Error>::unwrap(move _19) -> [return: bb10, unwind: bb11];
    }

    bb10: {
        _0 = Instruction { program_id: _1, accounts: move _6, data: move _18 };
        return;
    }

    bb11 (cleanup): {
        drop(_6) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        drop(_12) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        resume;
    }
}
