// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn create_page_visits(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: page_visits::PageVisits) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug page_visits => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _5: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _7: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _8: isize;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _12: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _13: isize;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _17: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _18: isize;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _22: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _23: isize;
    let mut _27: &std::vec::Vec<u8>;
    let _28: std::vec::Vec<u8>;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::vec::Vec<u8>>;
    let mut _30: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _31: &state::page_visits::PageVisits;
    let mut _32: isize;
    let mut _36: &solana_program::rent::Rent;
    let _37: solana_program::rent::Rent;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::rent::Rent>;
    let mut _39: std::result::Result<solana_program::rent::Rent, solana_program::program_error::ProgramError>;
    let mut _40: isize;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _44: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _45: &solana_program::instruction::Instruction;
    let _46: solana_program::instruction::Instruction;
    let mut _47: u64;
    let mut _48: &[solana_program::account_info::AccountInfo<'_>];
    let _49: &[solana_program::account_info::AccountInfo<'_>; 3];
    let _50: [solana_program::account_info::AccountInfo<'_>; 3];
    let mut _51: solana_program::account_info::AccountInfo<'_>;
    let mut _52: solana_program::account_info::AccountInfo<'_>;
    let mut _53: solana_program::account_info::AccountInfo<'_>;
    let mut _54: &[&[&[u8]]];
    let _55: &[&[&[u8]]; 1];
    let _56: [&[&[u8]]; 1];
    let mut _57: &[&[u8]];
    let _58: &[&[u8]; 3];
    let _59: [&[u8]; 3];
    let _60: &[u8];
    let _61: &str;
    let _62: &[u8];
    let mut _63: &[u8];
    let _64: &[u8; 1];
    let _65: [u8; 1];
    let mut _66: u8;
    let mut _67: isize;
    let mut _69: &solana_program::pubkey::Pubkey;
    let mut _70: &solana_program::pubkey::Pubkey;
    let mut _71: &solana_program::pubkey::Pubkey;
    scope 1 {
        debug accounts_iter => _4;
        let _9: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _10: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug page_visits_account => _10;
            let _14: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _15: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug user => _15;
                let _19: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _20: &solana_program::account_info::AccountInfo<'_>;
                scope 12 {
                    debug payer => _20;
                    let _24: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _25: &solana_program::account_info::AccountInfo<'_>;
                    scope 17 {
                        debug system_program => _25;
                        let _26: usize;
                        let _33: std::result::Result<std::convert::Infallible, std::io::Error>;
                        let _34: std::vec::Vec<u8>;
                        scope 22 {
                            debug account_span => _26;
                            let _35: u64;
                            let _41: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _42: solana_program::rent::Rent;
                            scope 27 {
                                debug lamports_required => _35;
                                let _68: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                scope 32 {
                                    debug residual => _68;
                                    scope 33 {
                                    }
                                }
                                scope 34 {
                                    debug val => const ();
                                    scope 35 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _41;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _42;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _33;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _34;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _24;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _25;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _19;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _20;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _14;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _15;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _9;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _10;
            scope 6 {
            }
        }
    }

    bb0: {
        _5 = core::slice::<impl [AccountInfo<'_>]>::iter(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _7 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _10 = ((_6 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _12 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb7, unwind continue];
    }

    bb6: {
        _9 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _9) -> [return: bb43, unwind continue];
    }

    bb7: {
        _11 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _12) -> [return: bb8, unwind continue];
    }

    bb8: {
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _15 = ((_11 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _17 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb11, unwind continue];
    }

    bb10: {
        _14 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _14) -> [return: bb43, unwind continue];
    }

    bb11: {
        _16 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _17) -> [return: bb12, unwind continue];
    }

    bb12: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        _20 = ((_16 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _22 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_4) -> [return: bb15, unwind continue];
    }

    bb14: {
        _19 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _19) -> [return: bb43, unwind continue];
    }

    bb15: {
        _21 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _22) -> [return: bb16, unwind continue];
    }

    bb16: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        _25 = ((_21 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _31 = &_3;
        _30 = <page_visits::PageVisits as BorshSerialize>::try_to_vec(move _31) -> [return: bb19, unwind continue];
    }

    bb18: {
        _24 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _24) -> [return: bb43, unwind continue];
    }

    bb19: {
        _29 = <Result<Vec<u8>, std::io::Error> as Try>::branch(move _30) -> [return: bb20, unwind continue];
    }

    bb20: {
        _32 = discriminant(_29);
        switchInt(move _32) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        _34 = move ((_29 as Continue).0: std::vec::Vec<u8>);
        _28 = move _34;
        _27 = &_28;
        _26 = Vec::<u8>::len(move _27) -> [return: bb23, unwind: bb48];
    }

    bb22: {
        _33 = move ((_29 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _33) -> [return: bb43, unwind continue];
    }

    bb23: {
        drop(_28) -> [return: bb50, unwind continue];
    }

    bb24: {
        _38 = <Result<Rent, ProgramError> as Try>::branch(move _39) -> [return: bb25, unwind continue];
    }

    bb25: {
        _40 = discriminant(_38);
        switchInt(move _40) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        _42 = move ((_38 as Continue).0: solana_program::rent::Rent);
        _37 = move _42;
        _36 = &_37;
        _35 = Rent::minimum_balance(move _36, _26) -> [return: bb28, unwind continue];
    }

    bb27: {
        _41 = move ((_38 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _41) -> [return: bb43, unwind continue];
    }

    bb28: {
        _69 = deref_copy ((*_20).0: &solana_program::pubkey::Pubkey);
        _70 = deref_copy ((*_10).0: &solana_program::pubkey::Pubkey);
        _47 = _26 as u64 (IntToInt);
        _46 = solana_program::system_instruction::create_account(_69, _70, _35, move _47, _1) -> [return: bb29, unwind continue];
    }

    bb29: {
        _45 = &_46;
        _51 = <AccountInfo<'_> as Clone>::clone(_20) -> [return: bb30, unwind: bb47];
    }

    bb30: {
        _52 = <AccountInfo<'_> as Clone>::clone(_10) -> [return: bb31, unwind: bb46];
    }

    bb31: {
        _53 = <AccountInfo<'_> as Clone>::clone(_25) -> [return: bb32, unwind: bb45];
    }

    bb32: {
        _50 = [move _51, move _52, move _53];
        _49 = &_50;
        _48 = _49 as &[solana_program::account_info::AccountInfo<'_>] (PointerCoercion(Unsize));
        _61 = const state::page_visits::PageVisits::SEED_PREFIX;
        _60 = core::str::<impl str>::as_bytes(_61) -> [return: bb33, unwind: bb44];
    }

    bb33: {
        _71 = deref_copy ((*_15).0: &solana_program::pubkey::Pubkey);
        _62 = <Pubkey as AsRef<[u8]>>::as_ref(_71) -> [return: bb34, unwind: bb44];
    }

    bb34: {
        _66 = (_3.1: u8);
        _65 = [move _66];
        _64 = &_65;
        _63 = _64 as &[u8] (PointerCoercion(Unsize));
        _59 = [_60, _62, move _63];
        _58 = &_59;
        _57 = _58 as &[&[u8]] (PointerCoercion(Unsize));
        _56 = [move _57];
        _55 = &_56;
        _54 = _55 as &[&[&[u8]]] (PointerCoercion(Unsize));
        _44 = invoke_signed(_45, move _48, move _54) -> [return: bb35, unwind: bb44];
    }

    bb35: {
        _43 = <Result<(), ProgramError> as Try>::branch(move _44) -> [return: bb36, unwind: bb44];
    }

    bb36: {
        _67 = discriminant(_43);
        switchInt(move _67) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        drop(_50) -> [return: bb40, unwind: bb47];
    }

    bb38: {
        _68 = move ((_43 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _68) -> [return: bb39, unwind: bb44];
    }

    bb39: {
        drop(_50) -> [return: bb42, unwind: bb47];
    }

    bb40: {
        drop(_46) -> [return: bb41, unwind continue];
    }

    bb41: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        goto -> bb43;
    }

    bb42: {
        drop(_46) -> [return: bb43, unwind continue];
    }

    bb43: {
        return;
    }

    bb44 (cleanup): {
        drop(_50) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_52) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_51) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_46) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_28) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        resume;
    }

    bb50: {
        _39 = <Rent as Sysvar>::get() -> [return: bb24, unwind continue];
    }
}

fn increment_page_visits(_1: &[AccountInfo<'_>]) -> Result<(), ProgramError> {
    debug accounts => _1;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _2: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _3: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _5: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _6: isize;
    let mut _10: state::page_visits::PageVisits;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, state::page_visits::PageVisits>;
    let mut _12: std::result::Result<state::page_visits::PageVisits, std::io::Error>;
    let mut _13: &[u8];
    let _14: &&mut [u8];
    let _15: &std::cell::Ref<'_, &mut [u8]>;
    let _16: std::cell::Ref<'_, &mut [u8]>;
    let _17: &std::cell::RefCell<&mut [u8]>;
    let mut _18: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _19: isize;
    let _22: ();
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _24: std::result::Result<(), std::io::Error>;
    let mut _25: &state::page_visits::PageVisits;
    let mut _26: &mut &mut [u8];
    let mut _27: &mut [u8];
    let mut _28: &mut [u8];
    let mut _29: &mut &mut [u8];
    let mut _30: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _31: std::cell::RefMut<'_, &mut [u8]>;
    let _32: &std::cell::RefCell<&mut [u8]>;
    let mut _33: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _34: isize;
    let mut _36: &mut [u8];
    let mut _37: &mut [u8];
    scope 1 {
        debug accounts_iter => _2;
        let _7: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _8: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug page_visits_account => _8;
            let _9: &mut state::page_visits::PageVisits;
            let _20: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _21: state::page_visits::PageVisits;
            scope 7 {
                debug page_visits => _9;
                let _35: std::result::Result<std::convert::Infallible, std::io::Error>;
                scope 12 {
                    debug residual => _35;
                    scope 13 {
                    }
                }
                scope 14 {
                    debug val => const ();
                    scope 15 {
                    }
                }
            }
            scope 8 {
                debug residual => _20;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _21;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _7;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _8;
            scope 6 {
            }
        }
    }

    bb0: {
        _3 = core::slice::<impl [AccountInfo<'_>]>::iter(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &mut _3;
        _5 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb6, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = ((_4 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _18 = &((*_8).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _17 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _18) -> [return: bb7, unwind continue];
    }

    bb6: {
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _7) -> [return: bb27, unwind continue];
    }

    bb7: {
        _16 = RefCell::<&mut [u8]>::borrow(_17) -> [return: bb8, unwind continue];
    }

    bb8: {
        _15 = &_16;
        _14 = <Ref<'_, &mut [u8]> as Deref>::deref(_15) -> [return: bb9, unwind: bb29];
    }

    bb9: {
        _36 = deref_copy (*_14);
        _13 = &(*_36);
        _12 = <page_visits::PageVisits as BorshDeserialize>::try_from_slice(move _13) -> [return: bb10, unwind: bb29];
    }

    bb10: {
        _11 = <Result<page_visits::PageVisits, std::io::Error> as Try>::branch(move _12) -> [return: bb11, unwind: bb29];
    }

    bb11: {
        _19 = discriminant(_11);
        switchInt(move _19) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb12: {
        _21 = move ((_11 as Continue).0: state::page_visits::PageVisits);
        _10 = move _21;
        _9 = &mut _10;
        drop(_16) -> [return: bb15, unwind continue];
    }

    bb13: {
        _20 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _20) -> [return: bb14, unwind: bb29];
    }

    bb14: {
        drop(_16) -> [return: bb27, unwind continue];
    }

    bb15: {
        _22 = page_visits::PageVisits::increment(_9) -> [return: bb16, unwind continue];
    }

    bb16: {
        _25 = &(*_9);
        _33 = &((*_8).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _32 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _33) -> [return: bb17, unwind continue];
    }

    bb17: {
        _31 = RefCell::<&mut [u8]>::borrow_mut(_32) -> [return: bb18, unwind continue];
    }

    bb18: {
        _30 = &mut _31;
        _29 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _30) -> [return: bb19, unwind: bb28];
    }

    bb19: {
        _37 = deref_copy (*_29);
        _28 = <[u8] as IndexMut<RangeFull>>::index_mut(_37, const RangeFull) -> [return: bb20, unwind: bb28];
    }

    bb20: {
        _27 = _28;
        _26 = &mut _27;
        _24 = <page_visits::PageVisits as BorshSerialize>::serialize::<&mut [u8]>(move _25, _26) -> [return: bb21, unwind: bb28];
    }

    bb21: {
        _23 = <Result<(), std::io::Error> as Try>::branch(move _24) -> [return: bb22, unwind: bb28];
    }

    bb22: {
        _34 = discriminant(_23);
        switchInt(move _34) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        drop(_31) -> [return: bb26, unwind continue];
    }

    bb24: {
        _35 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _35) -> [return: bb25, unwind: bb28];
    }

    bb25: {
        drop(_31) -> [return: bb27, unwind continue];
    }

    bb26: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        goto -> bb27;
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_31) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_16) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        resume;
    }
}

fn process_instruction(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: &[u8]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug instruction_data => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _4: std::result::Result<state::page_visits::PageVisits, std::io::Error>;
    let mut _5: isize;
    let mut _7: bool;
    let mut _8: &std::result::Result<state::page_visits::IncrementPageVisits, std::io::Error>;
    let _9: std::result::Result<state::page_visits::IncrementPageVisits, std::io::Error>;
    let mut _10: solana_program::program_error::ProgramError;
    scope 1 {
        debug page_visits => _6;
        let _6: state::page_visits::PageVisits;
    }

    bb0: {
        _4 = <page_visits::PageVisits as BorshDeserialize>::try_from_slice(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = discriminant(_4);
        switchInt(move _5) -> [0: bb2, 1: bb4, otherwise: bb16];
    }

    bb2: {
        _6 = move ((_4 as Ok).0: state::page_visits::PageVisits);
        _0 = create_page_visits(_1, _2, move _6) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        drop(_4) -> [return: bb12, unwind continue];
    }

    bb4: {
        drop(_4) -> [return: bb5, unwind continue];
    }

    bb5: {
        _9 = <page_visits::IncrementPageVisits as BorshDeserialize>::try_from_slice(_3) -> [return: bb6, unwind continue];
    }

    bb6: {
        _8 = &_9;
        _7 = Result::<page_visits::IncrementPageVisits, std::io::Error>::is_ok(move _8) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        switchInt(move _7) -> [0: bb10, otherwise: bb8];
    }

    bb8: {
        drop(_9) -> [return: bb9, unwind continue];
    }

    bb9: {
        _0 = increment_page_visits(_2) -> [return: bb12, unwind continue];
    }

    bb10: {
        drop(_9) -> [return: bb11, unwind continue];
    }

    bb11: {
        _10 = solana_program::program_error::ProgramError::InvalidInstructionData;
        _0 = Result::<(), ProgramError>::Err(move _10);
        goto -> bb12;
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_9) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_4) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        resume;
    }

    bb16: {
        unreachable;
    }
}

fn page_visits::<impl at src/state/page_visits.rs:3:10: 3:26>::deserialize(_1: &mut &[u8]) -> Result<page_visits::IncrementPageVisits, std::io::Error> {
    debug buf => _1;
    let mut _0: std::result::Result<state::page_visits::IncrementPageVisits, std::io::Error>;

    bb0: {
        _0 = Result::<page_visits::IncrementPageVisits, std::io::Error>::Ok(const page_visits::IncrementPageVisits {{  }});
        return;
    }
}

fn page_visits::<impl at src/state/page_visits.rs:3:28: 3:42>::serialize(_1: &page_visits::IncrementPageVisits, _2: &mut W) -> Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;

    bb0: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        return;
    }
}

fn page_visits::<impl at src/state/page_visits.rs:3:44: 3:49>::fmt(_1: &page_visits::IncrementPageVisits, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "IncrementPageVisits";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn page_visits::<impl at src/state/page_visits.rs:6:10: 6:26>::deserialize(_1: &mut &[u8]) -> Result<page_visits::PageVisits, std::io::Error> {
    debug buf => _1;
    let mut _0: std::result::Result<state::page_visits::PageVisits, std::io::Error>;
    let mut _2: state::page_visits::PageVisits;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u32>;
    let mut _4: std::result::Result<u32, std::io::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _7: u32;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u8>;
    let mut _9: std::result::Result<u8, std::io::Error>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _12: u8;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _11;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _12;
        scope 8 {
        }
    }

    bb0: {
        _4 = <u32 as BorshDeserialize>::deserialize(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<u32, std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = ((_3 as Continue).0: u32);
        _9 = <u8 as BorshDeserialize>::deserialize(_1) -> [return: bb6, unwind continue];
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<page_visits::PageVisits, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _6) -> [return: bb10, unwind continue];
    }

    bb6: {
        _8 = <Result<u8, std::io::Error> as Try>::branch(move _9) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb8, 1: bb9, otherwise: bb3];
    }

    bb8: {
        _12 = ((_8 as Continue).0: u8);
        _2 = page_visits::PageVisits { page_visits: _7, bump: _12 };
        _0 = Result::<page_visits::PageVisits, std::io::Error>::Ok(move _2);
        goto -> bb10;
    }

    bb9: {
        _11 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<page_visits::PageVisits, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _11) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }
}

fn page_visits::<impl at src/state/page_visits.rs:6:28: 6:42>::serialize(_1: &page_visits::PageVisits, _2: &mut W) -> Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _4: std::result::Result<(), std::io::Error>;
    let _5: &u32;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _9: std::result::Result<(), std::io::Error>;
    let _10: &u8;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _12;
        scope 6 {
        }
    }
    scope 7 {
        debug val => const ();
        scope 8 {
        }
    }

    bb0: {
        _5 = &((*_1).0: u32);
        _4 = <u32 as BorshSerialize>::serialize::<W>(_5, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<(), std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _10 = &((*_1).1: u8);
        _9 = <u8 as BorshSerialize>::serialize::<W>(_10, _2) -> [return: bb6, unwind continue];
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> [return: bb10, unwind continue];
    }

    bb6: {
        _8 = <Result<(), std::io::Error> as Try>::branch(move _9) -> [return: bb7, unwind continue];
    }

    bb7: {
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb8, 1: bb9, otherwise: bb3];
    }

    bb8: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        goto -> bb10;
    }

    bb9: {
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }
}

fn page_visits::<impl at src/state/page_visits.rs:6:44: 6:49>::fmt(_1: &page_visits::PageVisits, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &u32;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&u8;
    let _10: &u8;

    bb0: {
        _3 = const "PageVisits";
        _4 = const "page_visits";
        _6 = &((*_1).0: u32);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "bump";
        _10 = &((*_1).1: u8);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const page_visits::<impl at src/state/page_visits.rs:12:1: 12:16>::ACCOUNT_SPACE: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const 8_usize, const 32_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 8_usize, const 32_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

const page_visits::<impl at src/state/page_visits.rs:12:1: 12:16>::SEED_PREFIX: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "page_visits";
        return;
    }
}

fn page_visits::<impl at src/state/page_visits.rs:12:1: 12:16>::new(_1: u32, _2: u8) -> page_visits::PageVisits {
    debug page_visits => _1;
    debug bump => _2;
    let mut _0: state::page_visits::PageVisits;

    bb0: {
        _0 = page_visits::PageVisits { page_visits: _1, bump: _2 };
        return;
    }
}

fn page_visits::<impl at src/state/page_visits.rs:12:1: 12:16>::increment(_1: &mut page_visits::PageVisits) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        ((*_1).0: u32) = Add(((*_1).0: u32), const 1_u32);
        return;
    }
}

fn entrypoint(_1: *mut u8) -> u64 {
    debug input => _1;
    let mut _0: u64;
    let _2: &solana_program::pubkey::Pubkey;
    let _3: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _4: &[u8];
    let mut _5: (&solana_program::pubkey::Pubkey, std::vec::Vec<solana_program::account_info::AccountInfo<'_>>, &[u8]);
    let mut _6: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _7: &&solana_program::pubkey::Pubkey;
    let _8: &[solana_program::account_info::AccountInfo<'_>];
    let _9: &std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _10: &&[u8];
    let mut _11: isize;
    let mut _13: &solana_program::pubkey::Pubkey;
    let mut _14: &[u8];
    scope 1 {
        debug program_id => _2;
        debug accounts => _3;
        debug instruction_data => _4;
        let _12: solana_program::program_error::ProgramError;
        scope 3 {
            debug error => _12;
        }
    }
    scope 2 {
    }

    bb0: {
        _5 = solana_program::entrypoint::deserialize::<'_>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = (_5.0: &solana_program::pubkey::Pubkey);
        _3 = move (_5.1: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>);
        _4 = (_5.2: &[u8]);
        _7 = &_2;
        _13 = deref_copy (*_7);
        _9 = &_3;
        _8 = <Vec<AccountInfo<'_>> as Deref>::deref(_9) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _10 = &_4;
        _14 = deref_copy (*_10);
        _6 = process_instruction(_13, _8, _14) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb6, 1: bb5, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _12 = move ((_6 as Err).0: solana_program::program_error::ProgramError);
        _0 = <ProgramError as Into<u64>>::into(move _12) -> [return: bb12, unwind: bb9];
    }

    bb6: {
        _0 = const solana_program::entrypoint::SUCCESS;
        goto -> bb7;
    }

    bb7: {
        drop(_3) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        goto -> bb7;
    }
}
