#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
use solana_program::entrypoint;

use processor::process_instruction;

mod instructions {

    mod create {
        use borsh::BorshSerialize;
        use ::{};
        use ::{};
        use solana_program::account_info::next_account_info;
        use solana_program::account_info::AccountInfo;
        use solana_program::entrypoint::ProgramResult;
        use solana_program::program::invoke_signed;
        use solana_program::pubkey::Pubkey;
        use solana_program::rent::Rent;
        use solana_program::system_instruction;
        use solana_program::sysvar::Sysvar;
        use crate::state::PageVisits;
        fn create_page_visits<'_, '_,
            '_>(program_id: &'_ Pubkey, accounts: &'_ [AccountInfo<>],
            page_visits: PageVisits)
            ->
                ProgramResult {
                let accounts_iter = &mut accounts.iter();
                let page_visits_account =
                    match #[lang = "branch"](next_account_info(accounts_iter)) {
                            #[lang = "Break"] {  0: residual } =>
                                #[allow(unreachable_code)]
                                return #[lang = "from_residual"](residual),
                            #[lang = "Continue"] {  0: val } =>
                                #[allow(unreachable_code)]
                                val,
                        };
                let user =
                    match #[lang = "branch"](next_account_info(accounts_iter)) {
                            #[lang = "Break"] {  0: residual } =>
                                #[allow(unreachable_code)]
                                return #[lang = "from_residual"](residual),
                            #[lang = "Continue"] {  0: val } =>
                                #[allow(unreachable_code)]
                                val,
                        };
                let payer =
                    match #[lang = "branch"](next_account_info(accounts_iter)) {
                            #[lang = "Break"] {  0: residual } =>
                                #[allow(unreachable_code)]
                                return #[lang = "from_residual"](residual),
                            #[lang = "Continue"] {  0: val } =>
                                #[allow(unreachable_code)]
                                val,
                        };
                let system_program =
                    match #[lang = "branch"](next_account_info(accounts_iter)) {
                            #[lang = "Break"] {  0: residual } =>
                                #[allow(unreachable_code)]
                                return #[lang = "from_residual"](residual),
                            #[lang = "Continue"] {  0: val } =>
                                #[allow(unreachable_code)]
                                val,
                        };
                let account_span =
                    match #[lang = "branch"](page_visits.try_to_vec()) {
                                #[lang = "Break"] {  0: residual } =>
                                    #[allow(unreachable_code)]
                                    return #[lang = "from_residual"](residual),
                                #[lang = "Continue"] {  0: val } =>
                                    #[allow(unreachable_code)]
                                    val,
                            }.len();
                let lamports_required =
                    match #[lang = "branch"](Rent::get()) {
                                #[lang = "Break"] {  0: residual } =>
                                    #[allow(unreachable_code)]
                                    return #[lang = "from_residual"](residual),
                                #[lang = "Continue"] {  0: val } =>
                                    #[allow(unreachable_code)]
                                    val,
                            }.minimum_balance(account_span);
                match #[lang = "branch"](invoke_signed(&system_instruction::create_account(payer.key,
                                            page_visits_account.key, lamports_required,
                                            account_span as u64, program_id),
                                    &[payer.clone(), page_visits_account.clone(),
                                                system_program.clone()],
                                    &[&[PageVisits::SEED_PREFIX.as_bytes(), user.key.as_ref(),
                                                            &[page_visits.bump]]])) {
                        #[lang = "Break"] {  0: residual } =>
                            #[allow(unreachable_code)]
                            return #[lang = "from_residual"](residual),
                        #[lang = "Continue"] {  0: val } =>
                            #[allow(unreachable_code)]
                            val,
                    };
                Ok(())
            }
    }
    mod increment {
        use ::{};
        use borsh::BorshDeserialize;
        use borsh::BorshSerialize;
        use ::{};
        use ::{};
        use solana_program::account_info::next_account_info;
        use solana_program::account_info::AccountInfo;
        use solana_program::entrypoint::ProgramResult;
        use crate::state::PageVisits;
        fn increment_page_visits<'_, '_>(accounts: &'_ [AccountInfo<>])
            ->
                ProgramResult {
                let accounts_iter = &mut accounts.iter();
                let page_visits_account =
                    match #[lang = "branch"](next_account_info(accounts_iter)) {
                            #[lang = "Break"] {  0: residual } =>
                                #[allow(unreachable_code)]
                                return #[lang = "from_residual"](residual),
                            #[lang = "Continue"] {  0: val } =>
                                #[allow(unreachable_code)]
                                val,
                        };
                let page_visits =
                    &mut match #[lang = "branch"](PageVisits::try_from_slice(&page_visits_account.data.borrow()))
                                    {
                                #[lang = "Break"] {  0: residual } =>
                                    #[allow(unreachable_code)]
                                    return #[lang = "from_residual"](residual),
                                #[lang = "Continue"] {  0: val } =>
                                    #[allow(unreachable_code)]
                                    val,
                            };
                page_visits.increment();
                match #[lang = "branch"](page_visits.serialize(&mut &mut page_visits_account.data.borrow_mut()[#[lang = "RangeFull"]{}]))
                            {
                        #[lang = "Break"] {  0: residual } =>
                            #[allow(unreachable_code)]
                            return #[lang = "from_residual"](residual),
                        #[lang = "Continue"] {  0: val } =>
                            #[allow(unreachable_code)]
                            val,
                    };
                Ok(())
            }
    }
    use create::*;
    use increment::*;
}
mod processor {
    use borsh::BorshDeserialize;
    use ::{};
    use solana_program::account_info::AccountInfo;
    use solana_program::entrypoint::ProgramResult;
    use solana_program::program_error::ProgramError;
    use solana_program::pubkey::Pubkey;
    use crate::instructions;
    use crate::state::IncrementPageVisits;
    use crate::state::PageVisits;
    fn process_instruction<'_, '_, '_,
        '_>(program_id: &'_ Pubkey, accounts: &'_ [AccountInfo<>],
        instruction_data: &'_ [u8])
        ->
            ProgramResult {
            if let Ok(page_visits) =
                        PageVisits::try_from_slice(instruction_data)
                    {
                            return instructions::create::create_page_visits(program_id,
                                    accounts, page_visits);
                        };
                    if IncrementPageVisits::try_from_slice(instruction_data).is_ok()
                            {
                                    return instructions::increment::increment_page_visits(accounts);
                                }
                            Err(ProgramError::InvalidInstructionData)
                        }
                }
                mod state {
                    mod page_visits {
                        use ::{};
                        use borsh::BorshDeserialize;
                        use borsh::BorshSerialize;
                        struct IncrementPageVisits {
                        }
                        impl borsh::de::BorshDeserialize for IncrementPageVisits {
                            fn deserialize<'_, '_>(buf: &'_ mut &'_ [u8])
                                ->
                                    ::core::result::Result<Self,
                                    borsh::maybestd::io::Error> { Ok(Self{}) }
                        }
                        impl borsh::ser::BorshSerialize for IncrementPageVisits {
                            fn serialize<W, '_, '_>(self: &'_ Self, writer: &'_ mut W)
                                -> ::core::result::Result<(), borsh::maybestd::io::Error>
                                where W: borsh::maybestd::io::Write { Ok(()) }
                        }
                        #[automatically_derived]
                        impl ::core::fmt::Debug for IncrementPageVisits {
                            #[inline]
                            fn fmt<'_, '_,
                                '_>(self: &'_ Self, f: &'_ mut ::core::fmt::Formatter<>)
                                ->
                                    ::core::fmt::Result {
                                    ::core::fmt::Formatter::write_str(f, "IncrementPageVisits")
                                }
                        }
                        struct PageVisits {
                            page_visits: u32,
                            bump: u8,
                        }
                        impl borsh::de::BorshDeserialize for PageVisits where
                            u32: borsh::BorshDeserialize, u8: borsh::BorshDeserialize {
                            fn deserialize<'_, '_>(buf: &'_ mut &'_ [u8])
                                ->
                                    ::core::result::Result<Self,
                                    borsh::maybestd::io::Error> {
                                    Ok(Self{
                                            page_visits:
                                                match #[lang = "branch"](borsh::BorshDeserialize::deserialize(buf))
                                                            {
                                                        #[lang = "Break"] {  0: residual } =>
                                                            #[allow(unreachable_code)]
                                                            return #[lang = "from_residual"](residual),
                                                        #[lang = "Continue"] {  0: val } =>
                                                            #[allow(unreachable_code)]
                                                            val,
                                                    },

                                            bump:
                                                match #[lang = "branch"](borsh::BorshDeserialize::deserialize(buf))
                                                            {
                                                        #[lang = "Break"] {  0: residual } =>
                                                            #[allow(unreachable_code)]
                                                            return #[lang = "from_residual"](residual),
                                                        #[lang = "Continue"] {  0: val } =>
                                                            #[allow(unreachable_code)]
                                                            val,
                                                    },})
                                }
                        }
                        impl borsh::ser::BorshSerialize for PageVisits where
                            u32: borsh::ser::BorshSerialize,
                            u8: borsh::ser::BorshSerialize {
                            fn serialize<W, '_, '_>(self: &'_ Self, writer: &'_ mut W)
                                -> ::core::result::Result<(), borsh::maybestd::io::Error>
                                where
                                W: borsh::maybestd::io::Write {
                                    match #[lang = "branch"](borsh::BorshSerialize::serialize(&self.page_visits,
                                                        writer)) {
                                            #[lang = "Break"] {  0: residual } =>
                                                #[allow(unreachable_code)]
                                                return #[lang = "from_residual"](residual),
                                            #[lang = "Continue"] {  0: val } =>
                                                #[allow(unreachable_code)]
                                                val,
                                        };
                                    match #[lang = "branch"](borsh::BorshSerialize::serialize(&self.bump,
                                                        writer)) {
                                            #[lang = "Break"] {  0: residual } =>
                                                #[allow(unreachable_code)]
                                                return #[lang = "from_residual"](residual),
                                            #[lang = "Continue"] {  0: val } =>
                                                #[allow(unreachable_code)]
                                                val,
                                        };
                                    Ok(())
                                }
                        }
                        #[automatically_derived]
                        impl ::core::fmt::Debug for PageVisits {
                            #[inline]
                            fn fmt<'_, '_,
                                '_>(self: &'_ Self, f: &'_ mut ::core::fmt::Formatter<>)
                                ->
                                    ::core::fmt::Result {
                                    ::core::fmt::Formatter::debug_struct_field2_finish(f,
                                        "PageVisits", "page_visits", &self.page_visits, "bump",
                                        &&self.bump)
                                }
                        }
                        impl PageVisits {
                            const
                            ACCOUNT_SPACE:
                            usize
                            =
                            8 + 32;
                            const
                            SEED_PREFIX:
                            &'static str
                            =
                            "page_visits";
                            fn new(page_visits: u32, bump: u8)
                                -> Self { PageVisits{ page_visits,  bump,} }
                            fn increment<'_>(self:
                                    &'_ mut Self) { self.page_visits += 1; }
                        }
                    }
                    use page_visits::*;
                }
                /// # Safety
                #[no_mangle]
                unsafe extern "C" fn entrypoint(input: *mut u8)
                    ->
                        u64 {
                        let (program_id, accounts, instruction_data) =
                            unsafe { ::solana_program::entrypoint::deserialize(input) };
                        match process_instruction(&program_id, &accounts,
                                        &instruction_data) {
                                Ok(()) => ::solana_program::entrypoint::SUCCESS,
                                Err(error) => error.into(),
                            }
                    }
