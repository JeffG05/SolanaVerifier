// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn eat_food(_1: EatFoodInstructionData) -> Result<(), ProgramError> {
    debug ix => _1;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _2: std::vec::Vec<state::food::FoodStand>;
    let mut _3: std::slice::Iter<'_, state::food::FoodStand>;
    let mut _4: std::slice::Iter<'_, state::food::FoodStand>;
    let _5: &[state::food::FoodStand];
    let mut _6: &std::vec::Vec<state::food::FoodStand>;
    let mut _8: std::option::Option<&state::food::FoodStand>;
    let mut _9: &mut std::slice::Iter<'_, state::food::FoodStand>;
    let mut _10: isize;
    let mut _12: bool;
    let mut _13: &std::string::String;
    let _14: &std::string::String;
    let _15: ();
    let _16: &str;
    let _17: &std::string::String;
    let _18: std::string::String;
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: [core::fmt::rt::Argument<'_>; 1];
    let mut _25: core::fmt::rt::Argument<'_>;
    let _26: &std::string::String;
    let mut _27: bool;
    let mut _28: u32;
    let mut _29: u32;
    let _30: ();
    let _31: &str;
    let _32: &std::string::String;
    let _33: std::string::String;
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let mut _37: &[core::fmt::rt::Argument<'_>];
    let _38: &[core::fmt::rt::Argument<'_>; 3];
    let _39: [core::fmt::rt::Argument<'_>; 3];
    let mut _40: core::fmt::rt::Argument<'_>;
    let _41: &std::string::String;
    let mut _42: core::fmt::rt::Argument<'_>;
    let _43: &std::string::String;
    let mut _44: core::fmt::rt::Argument<'_>;
    let _45: &u32;
    let _46: ();
    let _47: &str;
    let _48: &std::string::String;
    let _49: std::string::String;
    let mut _51: std::fmt::Arguments<'_>;
    let mut _52: &[&str];
    let mut _53: &[core::fmt::rt::Argument<'_>];
    let _54: &[core::fmt::rt::Argument<'_>; 1];
    let _55: [core::fmt::rt::Argument<'_>; 1];
    let mut _56: core::fmt::rt::Argument<'_>;
    let _57: &std::string::String;
    let mut _58: solana_program::program_error::ProgramError;
    scope 1 {
        debug food_stands_list => _2;
        let mut _7: std::slice::Iter<'_, state::food::FoodStand>;
        scope 2 {
            debug iter => _7;
            let _11: &state::food::FoodStand;
            scope 3 {
                debug food_stand => _11;
                let _19: std::string::String;
                let _34: std::string::String;
                let _50: std::string::String;
                let mut _59: &[&str; 4];
                let mut _60: &[&str; 2];
                let mut _61: &[&str; 2];
                scope 4 {
                    debug res => _19;
                }
                scope 5 {
                    debug res => _34;
                }
                scope 6 {
                    debug res => _50;
                }
            }
        }
    }

    bb0: {
        _2 = get_food_stands() -> [return: bb1, unwind: bb40];
    }

    bb1: {
        _6 = &_2;
        _5 = <Vec<FoodStand> as Deref>::deref(move _6) -> [return: bb2, unwind: bb39];
    }

    bb2: {
        _4 = core::slice::<impl [FoodStand]>::iter(_5) -> [return: bb3, unwind: bb39];
    }

    bb3: {
        _3 = <std::slice::Iter<'_, FoodStand> as IntoIterator>::into_iter(move _4) -> [return: bb4, unwind: bb39];
    }

    bb4: {
        _7 = move _3;
        goto -> bb5;
    }

    bb5: {
        _9 = &mut _7;
        _8 = <std::slice::Iter<'_, FoodStand> as Iterator>::next(_9) -> [return: bb6, unwind: bb39];
    }

    bb6: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb9, 1: bb8, otherwise: bb7];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _11 = ((_8 as Some).0: &state::food::FoodStand);
        _13 = &(_1.2: std::string::String);
        _14 = &((*_11).0: std::string::String);
        _12 = <String as PartialEq>::eq(move _13, _14) -> [return: bb10, unwind: bb39];
    }

    bb9: {
        _58 = solana_program::program_error::ProgramError::InvalidInstructionData;
        _0 = Result::<(), ProgramError>::Err(move _58);
        drop(_2) -> [return: bb33, unwind: bb40];
    }

    bb10: {
        switchInt(move _12) -> [0: bb5, otherwise: bb11];
    }

    bb11: {
        _61 = const instructions::eat_food::eat_food::promoted[2];
        _21 = _61 as &[&str] (PointerCoercion(Unsize));
        _26 = &((*_11).0: std::string::String);
        _25 = core::fmt::rt::Argument::<'_>::new_display::<String>(_26) -> [return: bb12, unwind: bb39];
    }

    bb12: {
        _24 = [move _25];
        _23 = &_24;
        _22 = _23 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _20 = Arguments::<'_>::new_v1(move _21, move _22) -> [return: bb13, unwind: bb39];
    }

    bb13: {
        _19 = format(move _20) -> [return: bb14, unwind: bb39];
    }

    bb14: {
        _18 = move _19;
        _17 = &_18;
        _16 = <String as Deref>::deref(_17) -> [return: bb15, unwind: bb38];
    }

    bb15: {
        _15 = solana_program::log::sol_log(_16) -> [return: bb16, unwind: bb38];
    }

    bb16: {
        drop(_18) -> [return: bb17, unwind: bb39];
    }

    bb17: {
        _28 = (_1.1: u32);
        _29 = ((*_11).2: u32);
        _27 = Lt(move _28, move _29);
        switchInt(move _27) -> [0: bb26, otherwise: bb18];
    }

    bb18: {
        _59 = const instructions::eat_food::eat_food::promoted[0];
        _36 = _59 as &[&str] (PointerCoercion(Unsize));
        _41 = &(_1.0: std::string::String);
        _40 = core::fmt::rt::Argument::<'_>::new_display::<String>(_41) -> [return: bb19, unwind: bb39];
    }

    bb19: {
        _43 = &((*_11).1: std::string::String);
        _42 = core::fmt::rt::Argument::<'_>::new_display::<String>(_43) -> [return: bb20, unwind: bb39];
    }

    bb20: {
        _45 = &((*_11).2: u32);
        _44 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_45) -> [return: bb21, unwind: bb39];
    }

    bb21: {
        _39 = [move _40, move _42, move _44];
        _38 = &_39;
        _37 = _38 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _35 = Arguments::<'_>::new_v1(move _36, move _37) -> [return: bb22, unwind: bb39];
    }

    bb22: {
        _34 = format(move _35) -> [return: bb23, unwind: bb39];
    }

    bb23: {
        _33 = move _34;
        _32 = &_33;
        _31 = <String as Deref>::deref(_32) -> [return: bb24, unwind: bb37];
    }

    bb24: {
        _30 = solana_program::log::sol_log(_31) -> [return: bb25, unwind: bb37];
    }

    bb25: {
        drop(_33) -> [return: bb32, unwind: bb39];
    }

    bb26: {
        _60 = const instructions::eat_food::eat_food::promoted[1];
        _52 = _60 as &[&str] (PointerCoercion(Unsize));
        _57 = &((*_11).1: std::string::String);
        _56 = core::fmt::rt::Argument::<'_>::new_display::<String>(_57) -> [return: bb27, unwind: bb39];
    }

    bb27: {
        _55 = [move _56];
        _54 = &_55;
        _53 = _54 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _51 = Arguments::<'_>::new_v1(move _52, move _53) -> [return: bb28, unwind: bb39];
    }

    bb28: {
        _50 = format(move _51) -> [return: bb29, unwind: bb39];
    }

    bb29: {
        _49 = move _50;
        _48 = &_49;
        _47 = <String as Deref>::deref(_48) -> [return: bb30, unwind: bb36];
    }

    bb30: {
        _46 = solana_program::log::sol_log(_47) -> [return: bb31, unwind: bb36];
    }

    bb31: {
        drop(_49) -> [return: bb32, unwind: bb39];
    }

    bb32: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        drop(_2) -> [return: bb34, unwind: bb40];
    }

    bb33: {
        drop(_1) -> [return: bb35, unwind continue];
    }

    bb34: {
        drop(_1) -> [return: bb35, unwind continue];
    }

    bb35: {
        return;
    }

    bb36 (cleanup): {
        drop(_49) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_33) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_18) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_2) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_1) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        resume;
    }
}

const eat_food::promoted[0]: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "  Sorry ", const ", our ", const " is ", const " tickets!"];
        _0 = &_1;
        return;
    }
}

const eat_food::promoted[1]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "  Enjoy your ", const "!"];
        _0 = &_1;
        return;
    }
}

const eat_food::promoted[2]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Welcome to ", const "! What can I get you?"];
        _0 = &_1;
        return;
    }
}

fn get_on_ride(_1: GetOnRideInstructionData) -> Result<(), ProgramError> {
    debug ix => _1;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _2: std::vec::Vec<state::ride::Ride>;
    let mut _3: std::slice::Iter<'_, state::ride::Ride>;
    let mut _4: std::slice::Iter<'_, state::ride::Ride>;
    let _5: &[state::ride::Ride];
    let mut _6: &std::vec::Vec<state::ride::Ride>;
    let mut _8: std::option::Option<&state::ride::Ride>;
    let mut _9: &mut std::slice::Iter<'_, state::ride::Ride>;
    let mut _10: isize;
    let mut _12: bool;
    let mut _13: &std::string::String;
    let _14: &std::string::String;
    let _15: ();
    let _16: &str;
    let _17: &std::string::String;
    let _18: std::string::String;
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: [core::fmt::rt::Argument<'_>; 1];
    let mut _25: core::fmt::rt::Argument<'_>;
    let _26: &std::string::String;
    let mut _27: bool;
    let mut _28: u32;
    let mut _29: u32;
    let _30: ();
    let _31: &str;
    let _32: &std::string::String;
    let _33: std::string::String;
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let mut _37: &[core::fmt::rt::Argument<'_>];
    let _38: &[core::fmt::rt::Argument<'_>; 3];
    let _39: [core::fmt::rt::Argument<'_>; 3];
    let mut _40: core::fmt::rt::Argument<'_>;
    let _41: &std::string::String;
    let mut _42: core::fmt::rt::Argument<'_>;
    let _43: &u32;
    let mut _44: core::fmt::rt::Argument<'_>;
    let _45: &std::string::String;
    let mut _46: bool;
    let mut _47: u32;
    let mut _48: u32;
    let _49: ();
    let _50: &str;
    let _51: &std::string::String;
    let _52: std::string::String;
    let mut _54: std::fmt::Arguments<'_>;
    let mut _55: &[&str];
    let mut _56: &[core::fmt::rt::Argument<'_>];
    let _57: &[core::fmt::rt::Argument<'_>; 3];
    let _58: [core::fmt::rt::Argument<'_>; 3];
    let mut _59: core::fmt::rt::Argument<'_>;
    let _60: &std::string::String;
    let mut _61: core::fmt::rt::Argument<'_>;
    let _62: &u32;
    let mut _63: core::fmt::rt::Argument<'_>;
    let _64: &std::string::String;
    let _65: ();
    let _66: &str;
    let _67: &std::string::String;
    let _68: std::string::String;
    let mut _70: std::fmt::Arguments<'_>;
    let mut _71: &[&str];
    let mut _72: &[core::fmt::rt::Argument<'_>];
    let _73: &[core::fmt::rt::Argument<'_>; 1];
    let _74: [core::fmt::rt::Argument<'_>; 1];
    let mut _75: core::fmt::rt::Argument<'_>;
    let _76: &std::string::String;
    let mut _77: bool;
    let _78: ();
    let _79: &str;
    let mut _80: solana_program::program_error::ProgramError;
    scope 1 {
        debug rides_list => _2;
        let mut _7: std::slice::Iter<'_, state::ride::Ride>;
        scope 2 {
            debug iter => _7;
            let _11: &state::ride::Ride;
            scope 3 {
                debug ride => _11;
                let _19: std::string::String;
                let _34: std::string::String;
                let _53: std::string::String;
                let _69: std::string::String;
                let mut _81: &[&str; 4];
                let mut _82: &[&str; 4];
                let mut _83: &[&str; 2];
                let mut _84: &[&str; 2];
                scope 4 {
                    debug res => _19;
                }
                scope 5 {
                    debug res => _34;
                }
                scope 6 {
                    debug res => _53;
                }
                scope 7 {
                    debug res => _69;
                }
            }
        }
    }

    bb0: {
        _2 = get_rides() -> [return: bb1, unwind: bb55];
    }

    bb1: {
        _6 = &_2;
        _5 = <Vec<Ride> as Deref>::deref(move _6) -> [return: bb2, unwind: bb54];
    }

    bb2: {
        _4 = core::slice::<impl [Ride]>::iter(_5) -> [return: bb3, unwind: bb54];
    }

    bb3: {
        _3 = <std::slice::Iter<'_, Ride> as IntoIterator>::into_iter(move _4) -> [return: bb4, unwind: bb54];
    }

    bb4: {
        _7 = move _3;
        goto -> bb5;
    }

    bb5: {
        _9 = &mut _7;
        _8 = <std::slice::Iter<'_, Ride> as Iterator>::next(_9) -> [return: bb6, unwind: bb54];
    }

    bb6: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb9, 1: bb8, otherwise: bb7];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _11 = ((_8 as Some).0: &state::ride::Ride);
        _13 = &(_1.3: std::string::String);
        _14 = &((*_11).0: std::string::String);
        _12 = <String as PartialEq>::eq(move _13, _14) -> [return: bb10, unwind: bb54];
    }

    bb9: {
        _80 = solana_program::program_error::ProgramError::InvalidInstructionData;
        _0 = Result::<(), ProgramError>::Err(move _80);
        drop(_2) -> [return: bb46, unwind: bb55];
    }

    bb10: {
        switchInt(move _12) -> [0: bb5, otherwise: bb11];
    }

    bb11: {
        _84 = const instructions::get_on_ride::get_on_ride::promoted[3];
        _21 = _84 as &[&str] (PointerCoercion(Unsize));
        _26 = &((*_11).0: std::string::String);
        _25 = core::fmt::rt::Argument::<'_>::new_display::<String>(_26) -> [return: bb12, unwind: bb54];
    }

    bb12: {
        _24 = [move _25];
        _23 = &_24;
        _22 = _23 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _20 = Arguments::<'_>::new_v1(move _21, move _22) -> [return: bb13, unwind: bb54];
    }

    bb13: {
        _19 = format(move _20) -> [return: bb14, unwind: bb54];
    }

    bb14: {
        _18 = move _19;
        _17 = &_18;
        _16 = <String as Deref>::deref(_17) -> [return: bb15, unwind: bb53];
    }

    bb15: {
        _15 = solana_program::log::sol_log(_16) -> [return: bb16, unwind: bb53];
    }

    bb16: {
        drop(_18) -> [return: bb17, unwind: bb54];
    }

    bb17: {
        _28 = (_1.2: u32);
        _29 = ((*_11).2: u32);
        _27 = Lt(move _28, move _29);
        switchInt(move _27) -> [0: bb27, otherwise: bb18];
    }

    bb18: {
        _81 = const instructions::get_on_ride::get_on_ride::promoted[0];
        _36 = _81 as &[&str] (PointerCoercion(Unsize));
        _41 = &(_1.0: std::string::String);
        _40 = core::fmt::rt::Argument::<'_>::new_display::<String>(_41) -> [return: bb19, unwind: bb54];
    }

    bb19: {
        _43 = &((*_11).2: u32);
        _42 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_43) -> [return: bb20, unwind: bb54];
    }

    bb20: {
        _45 = &((*_11).0: std::string::String);
        _44 = core::fmt::rt::Argument::<'_>::new_display::<String>(_45) -> [return: bb21, unwind: bb54];
    }

    bb21: {
        _39 = [move _40, move _42, move _44];
        _38 = &_39;
        _37 = _38 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _35 = Arguments::<'_>::new_v1(move _36, move _37) -> [return: bb22, unwind: bb54];
    }

    bb22: {
        _34 = format(move _35) -> [return: bb23, unwind: bb54];
    }

    bb23: {
        _33 = move _34;
        _32 = &_33;
        _31 = <String as Deref>::deref(_32) -> [return: bb24, unwind: bb52];
    }

    bb24: {
        _30 = solana_program::log::sol_log(_31) -> [return: bb25, unwind: bb52];
    }

    bb25: {
        drop(_33) -> [return: bb26, unwind: bb54];
    }

    bb26: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        goto -> bb47;
    }

    bb27: {
        _47 = (_1.1: u32);
        _48 = ((*_11).3: u32);
        _46 = Lt(move _47, move _48);
        switchInt(move _46) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _82 = const instructions::get_on_ride::get_on_ride::promoted[1];
        _55 = _82 as &[&str] (PointerCoercion(Unsize));
        _60 = &(_1.0: std::string::String);
        _59 = core::fmt::rt::Argument::<'_>::new_display::<String>(_60) -> [return: bb30, unwind: bb54];
    }

    bb29: {
        _83 = const instructions::get_on_ride::get_on_ride::promoted[2];
        _71 = _83 as &[&str] (PointerCoercion(Unsize));
        _76 = &((*_11).0: std::string::String);
        _75 = core::fmt::rt::Argument::<'_>::new_display::<String>(_76) -> [return: bb38, unwind: bb54];
    }

    bb30: {
        _62 = &((*_11).3: u32);
        _61 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_62) -> [return: bb31, unwind: bb54];
    }

    bb31: {
        _64 = &((*_11).0: std::string::String);
        _63 = core::fmt::rt::Argument::<'_>::new_display::<String>(_64) -> [return: bb32, unwind: bb54];
    }

    bb32: {
        _58 = [move _59, move _61, move _63];
        _57 = &_58;
        _56 = _57 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _54 = Arguments::<'_>::new_v1(move _55, move _56) -> [return: bb33, unwind: bb54];
    }

    bb33: {
        _53 = format(move _54) -> [return: bb34, unwind: bb54];
    }

    bb34: {
        _52 = move _53;
        _51 = &_52;
        _50 = <String as Deref>::deref(_51) -> [return: bb35, unwind: bb51];
    }

    bb35: {
        _49 = solana_program::log::sol_log(_50) -> [return: bb36, unwind: bb51];
    }

    bb36: {
        drop(_52) -> [return: bb37, unwind: bb54];
    }

    bb37: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        goto -> bb47;
    }

    bb38: {
        _74 = [move _75];
        _73 = &_74;
        _72 = _73 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _70 = Arguments::<'_>::new_v1(move _71, move _72) -> [return: bb39, unwind: bb54];
    }

    bb39: {
        _69 = format(move _70) -> [return: bb40, unwind: bb54];
    }

    bb40: {
        _68 = move _69;
        _67 = &_68;
        _66 = <String as Deref>::deref(_67) -> [return: bb41, unwind: bb50];
    }

    bb41: {
        _65 = solana_program::log::sol_log(_66) -> [return: bb42, unwind: bb50];
    }

    bb42: {
        drop(_68) -> [return: bb43, unwind: bb54];
    }

    bb43: {
        _77 = ((*_11).1: bool);
        switchInt(move _77) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _79 = const "  Btw, this ride goes upside down. Hold on tight!";
        _78 = solana_program::log::sol_log(_79) -> [return: bb57, unwind: bb54];
    }

    bb45: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        goto -> bb47;
    }

    bb46: {
        drop(_1) -> [return: bb49, unwind continue];
    }

    bb47: {
        drop(_2) -> [return: bb48, unwind: bb55];
    }

    bb48: {
        drop(_1) -> [return: bb49, unwind continue];
    }

    bb49: {
        return;
    }

    bb50 (cleanup): {
        drop(_68) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_52) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_33) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_18) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_2) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_1) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        resume;
    }

    bb57: {
        goto -> bb45;
    }
}

const get_on_ride::promoted[0]: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "  Sorry ", const ", you need ", const " tickets to ride the ", const "!"];
        _0 = &_1;
        return;
    }
}

const get_on_ride::promoted[1]: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "  Sorry ", const ", you need to be ", const "\" tall to ride the ", const "!"];
        _0 = &_1;
        return;
    }
}

const get_on_ride::promoted[2]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "  Welcome aboard the ", const "!"];
        _0 = &_1;
        return;
    }
}

const get_on_ride::promoted[3]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "You're about to ride the ", const "!"];
        _0 = &_1;
        return;
    }
}

fn play_game(_1: PlayGameInstructionData) -> Result<(), ProgramError> {
    debug ix => _1;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _2: std::vec::Vec<state::game::Game>;
    let mut _3: std::slice::Iter<'_, state::game::Game>;
    let mut _4: std::slice::Iter<'_, state::game::Game>;
    let _5: &[state::game::Game];
    let mut _6: &std::vec::Vec<state::game::Game>;
    let mut _8: std::option::Option<&state::game::Game>;
    let mut _9: &mut std::slice::Iter<'_, state::game::Game>;
    let mut _10: isize;
    let mut _12: bool;
    let mut _13: &std::string::String;
    let _14: &std::string::String;
    let _15: ();
    let _16: &str;
    let _17: &std::string::String;
    let _18: std::string::String;
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: [core::fmt::rt::Argument<'_>; 1];
    let mut _25: core::fmt::rt::Argument<'_>;
    let _26: &std::string::String;
    let mut _27: bool;
    let mut _28: u32;
    let mut _29: u32;
    let _30: ();
    let _31: &str;
    let _32: &std::string::String;
    let _33: std::string::String;
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let mut _37: &[core::fmt::rt::Argument<'_>];
    let _38: &[core::fmt::rt::Argument<'_>; 3];
    let _39: [core::fmt::rt::Argument<'_>; 3];
    let mut _40: core::fmt::rt::Argument<'_>;
    let _41: &std::string::String;
    let mut _42: core::fmt::rt::Argument<'_>;
    let _43: &u32;
    let mut _44: core::fmt::rt::Argument<'_>;
    let _45: &std::string::String;
    let _46: ();
    let _47: &str;
    let _48: ();
    let _49: &str;
    let _50: &std::string::String;
    let _51: std::string::String;
    let mut _53: std::fmt::Arguments<'_>;
    let mut _54: &[&str];
    let mut _55: &[core::fmt::rt::Argument<'_>];
    let _56: &[core::fmt::rt::Argument<'_>; 2];
    let _57: [core::fmt::rt::Argument<'_>; 2];
    let mut _58: core::fmt::rt::Argument<'_>;
    let _59: &u32;
    let mut _60: core::fmt::rt::Argument<'_>;
    let _61: &std::string::String;
    let mut _62: solana_program::program_error::ProgramError;
    scope 1 {
        debug games_list => _2;
        let mut _7: std::slice::Iter<'_, state::game::Game>;
        scope 2 {
            debug iter => _7;
            let _11: &state::game::Game;
            scope 3 {
                debug game => _11;
                let _19: std::string::String;
                let _34: std::string::String;
                let _52: std::string::String;
                let mut _63: &[&str; 4];
                let mut _64: &[&str; 3];
                let mut _65: &[&str; 2];
                scope 4 {
                    debug res => _19;
                }
                scope 5 {
                    debug res => _34;
                }
                scope 6 {
                    debug res => _52;
                }
            }
        }
    }

    bb0: {
        _2 = get_games() -> [return: bb1, unwind: bb42];
    }

    bb1: {
        _6 = &_2;
        _5 = <Vec<Game> as Deref>::deref(move _6) -> [return: bb2, unwind: bb41];
    }

    bb2: {
        _4 = core::slice::<impl [Game]>::iter(_5) -> [return: bb3, unwind: bb41];
    }

    bb3: {
        _3 = <std::slice::Iter<'_, Game> as IntoIterator>::into_iter(move _4) -> [return: bb4, unwind: bb41];
    }

    bb4: {
        _7 = move _3;
        goto -> bb5;
    }

    bb5: {
        _9 = &mut _7;
        _8 = <std::slice::Iter<'_, Game> as Iterator>::next(_9) -> [return: bb6, unwind: bb41];
    }

    bb6: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb9, 1: bb8, otherwise: bb7];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _11 = ((_8 as Some).0: &state::game::Game);
        _13 = &(_1.2: std::string::String);
        _14 = &((*_11).0: std::string::String);
        _12 = <String as PartialEq>::eq(move _13, _14) -> [return: bb10, unwind: bb41];
    }

    bb9: {
        _62 = solana_program::program_error::ProgramError::InvalidInstructionData;
        _0 = Result::<(), ProgramError>::Err(move _62);
        drop(_2) -> [return: bb35, unwind: bb42];
    }

    bb10: {
        switchInt(move _12) -> [0: bb5, otherwise: bb11];
    }

    bb11: {
        _65 = const instructions::play_game::play_game::promoted[2];
        _21 = _65 as &[&str] (PointerCoercion(Unsize));
        _26 = &((*_11).0: std::string::String);
        _25 = core::fmt::rt::Argument::<'_>::new_display::<String>(_26) -> [return: bb12, unwind: bb41];
    }

    bb12: {
        _24 = [move _25];
        _23 = &_24;
        _22 = _23 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _20 = Arguments::<'_>::new_v1(move _21, move _22) -> [return: bb13, unwind: bb41];
    }

    bb13: {
        _19 = format(move _20) -> [return: bb14, unwind: bb41];
    }

    bb14: {
        _18 = move _19;
        _17 = &_18;
        _16 = <String as Deref>::deref(_17) -> [return: bb15, unwind: bb40];
    }

    bb15: {
        _15 = solana_program::log::sol_log(_16) -> [return: bb16, unwind: bb40];
    }

    bb16: {
        drop(_18) -> [return: bb17, unwind: bb41];
    }

    bb17: {
        _28 = (_1.1: u32);
        _29 = ((*_11).1: u32);
        _27 = Lt(move _28, move _29);
        switchInt(move _27) -> [0: bb26, otherwise: bb18];
    }

    bb18: {
        _63 = const instructions::play_game::play_game::promoted[0];
        _36 = _63 as &[&str] (PointerCoercion(Unsize));
        _41 = &(_1.0: std::string::String);
        _40 = core::fmt::rt::Argument::<'_>::new_display::<String>(_41) -> [return: bb19, unwind: bb41];
    }

    bb19: {
        _43 = &((*_11).1: u32);
        _42 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_43) -> [return: bb20, unwind: bb41];
    }

    bb20: {
        _45 = &((*_11).0: std::string::String);
        _44 = core::fmt::rt::Argument::<'_>::new_display::<String>(_45) -> [return: bb21, unwind: bb41];
    }

    bb21: {
        _39 = [move _40, move _42, move _44];
        _38 = &_39;
        _37 = _38 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _35 = Arguments::<'_>::new_v1(move _36, move _37) -> [return: bb22, unwind: bb41];
    }

    bb22: {
        _34 = format(move _35) -> [return: bb23, unwind: bb41];
    }

    bb23: {
        _33 = move _34;
        _32 = &_33;
        _31 = <String as Deref>::deref(_32) -> [return: bb24, unwind: bb39];
    }

    bb24: {
        _30 = solana_program::log::sol_log(_31) -> [return: bb25, unwind: bb39];
    }

    bb25: {
        drop(_33) -> [return: bb34, unwind: bb41];
    }

    bb26: {
        _47 = const "  Let's see what you got!";
        _46 = solana_program::log::sol_log(_47) -> [return: bb27, unwind: bb41];
    }

    bb27: {
        _64 = const instructions::play_game::play_game::promoted[1];
        _54 = _64 as &[&str] (PointerCoercion(Unsize));
        _59 = &((*_11).2: u32);
        _58 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_59) -> [return: bb28, unwind: bb41];
    }

    bb28: {
        _61 = &((*_11).3: std::string::String);
        _60 = core::fmt::rt::Argument::<'_>::new_display::<String>(_61) -> [return: bb29, unwind: bb41];
    }

    bb29: {
        _57 = [move _58, move _60];
        _56 = &_57;
        _55 = _56 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _53 = Arguments::<'_>::new_v1(move _54, move _55) -> [return: bb30, unwind: bb41];
    }

    bb30: {
        _52 = format(move _53) -> [return: bb31, unwind: bb41];
    }

    bb31: {
        _51 = move _52;
        _50 = &_51;
        _49 = <String as Deref>::deref(_50) -> [return: bb32, unwind: bb38];
    }

    bb32: {
        _48 = solana_program::log::sol_log(_49) -> [return: bb33, unwind: bb38];
    }

    bb33: {
        drop(_51) -> [return: bb34, unwind: bb41];
    }

    bb34: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        drop(_2) -> [return: bb36, unwind: bb42];
    }

    bb35: {
        drop(_1) -> [return: bb37, unwind continue];
    }

    bb36: {
        drop(_1) -> [return: bb37, unwind continue];
    }

    bb37: {
        return;
    }

    bb38 (cleanup): {
        drop(_51) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_33) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_18) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_2) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_1) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        resume;
    }
}

const play_game::promoted[0]: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "  Sorry ", const ", you need ", const " tickets to play ", const "!"];
        _0 = &_1;
        return;
    }
}

const play_game::promoted[1]: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "  You get ", const " attempts and the prize is a ", const "!"];
        _0 = &_1;
        return;
    }
}

const play_game::promoted[2]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "You're about to play ", const "!"];
        _0 = &_1;
        return;
    }
}

fn entrypoint(_1: *mut u8) -> u64 {
    debug input => _1;
    let mut _0: u64;
    let _2: &solana_program::pubkey::Pubkey;
    let _3: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _4: &[u8];
    let mut _5: (&solana_program::pubkey::Pubkey, std::vec::Vec<solana_program::account_info::AccountInfo<'_>>, &[u8]);
    let mut _6: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _7: &&solana_program::pubkey::Pubkey;
    let _8: &[solana_program::account_info::AccountInfo<'_>];
    let _9: &std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _10: &&[u8];
    let mut _11: isize;
    let mut _13: &solana_program::pubkey::Pubkey;
    let mut _14: &[u8];
    scope 1 {
        debug program_id => _2;
        debug accounts => _3;
        debug instruction_data => _4;
        let _12: solana_program::program_error::ProgramError;
        scope 3 {
            debug error => _12;
        }
    }
    scope 2 {
    }

    bb0: {
        _5 = solana_program::entrypoint::deserialize::<'_>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = (_5.0: &solana_program::pubkey::Pubkey);
        _3 = move (_5.1: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>);
        _4 = (_5.2: &[u8]);
        _7 = &_2;
        _13 = deref_copy (*_7);
        _9 = &_3;
        _8 = <Vec<AccountInfo<'_>> as Deref>::deref(_9) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _10 = &_4;
        _14 = deref_copy (*_10);
        _6 = process_instruction(_13, _8, _14) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb6, 1: bb5, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _12 = move ((_6 as Err).0: solana_program::program_error::ProgramError);
        _0 = <ProgramError as Into<u64>>::into(move _12) -> [return: bb12, unwind: bb9];
    }

    bb6: {
        _0 = const solana_program::entrypoint::SUCCESS;
        goto -> bb7;
    }

    bb7: {
        drop(_3) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        goto -> bb7;
    }
}

fn processor::<impl at src/processor.rs:13:10: 13:24>::serialize(_1: &CarnivalInstructionData, _2: &mut W) -> Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _4: std::result::Result<(), std::io::Error>;
    let _5: &std::string::String;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _9: std::result::Result<(), std::io::Error>;
    let _10: &u32;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _14: std::result::Result<(), std::io::Error>;
    let _15: &u32;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _19: std::result::Result<(), std::io::Error>;
    let _20: &std::string::String;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _24: std::result::Result<(), std::io::Error>;
    let _25: &std::string::String;
    let mut _26: isize;
    let _27: std::result::Result<std::convert::Infallible, std::io::Error>;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _12;
        scope 6 {
        }
    }
    scope 7 {
        debug val => const ();
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _17;
        scope 10 {
        }
    }
    scope 11 {
        debug val => const ();
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _22;
        scope 14 {
        }
    }
    scope 15 {
        debug val => const ();
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _27;
        scope 18 {
        }
    }
    scope 19 {
        debug val => const ();
        scope 20 {
        }
    }

    bb0: {
        _5 = &((*_1).0: std::string::String);
        _4 = <String as BorshSerialize>::serialize::<W>(_5, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<(), std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _10 = &((*_1).1: u32);
        _9 = <u32 as BorshSerialize>::serialize::<W>(_10, _2) -> [return: bb6, unwind continue];
    }

    bb5: {
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> [return: bb22, unwind continue];
    }

    bb6: {
        _8 = <Result<(), std::io::Error> as Try>::branch(move _9) -> [return: bb7, unwind continue];
    }

    bb7: {
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb8, 1: bb9, otherwise: bb3];
    }

    bb8: {
        _15 = &((*_1).2: u32);
        _14 = <u32 as BorshSerialize>::serialize::<W>(_15, _2) -> [return: bb10, unwind continue];
    }

    bb9: {
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb22, unwind continue];
    }

    bb10: {
        _13 = <Result<(), std::io::Error> as Try>::branch(move _14) -> [return: bb11, unwind continue];
    }

    bb11: {
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb12, 1: bb13, otherwise: bb3];
    }

    bb12: {
        _20 = &((*_1).3: std::string::String);
        _19 = <String as BorshSerialize>::serialize::<W>(_20, _2) -> [return: bb14, unwind continue];
    }

    bb13: {
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _17) -> [return: bb22, unwind continue];
    }

    bb14: {
        _18 = <Result<(), std::io::Error> as Try>::branch(move _19) -> [return: bb15, unwind continue];
    }

    bb15: {
        _21 = discriminant(_18);
        switchInt(move _21) -> [0: bb16, 1: bb17, otherwise: bb3];
    }

    bb16: {
        _25 = &((*_1).4: std::string::String);
        _24 = <String as BorshSerialize>::serialize::<W>(_25, _2) -> [return: bb18, unwind continue];
    }

    bb17: {
        _22 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _22) -> [return: bb22, unwind continue];
    }

    bb18: {
        _23 = <Result<(), std::io::Error> as Try>::branch(move _24) -> [return: bb19, unwind continue];
    }

    bb19: {
        _26 = discriminant(_23);
        switchInt(move _26) -> [0: bb20, 1: bb21, otherwise: bb3];
    }

    bb20: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        goto -> bb22;
    }

    bb21: {
        _27 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _27) -> [return: bb22, unwind continue];
    }

    bb22: {
        return;
    }
}

fn processor::<impl at src/processor.rs:13:26: 13:42>::deserialize(_1: &mut &[u8]) -> Result<CarnivalInstructionData, std::io::Error> {
    debug buf => _1;
    let mut _0: std::result::Result<processor::CarnivalInstructionData, std::io::Error>;
    let mut _2: processor::CarnivalInstructionData;
    let mut _3: std::string::String;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::string::String>;
    let mut _5: std::result::Result<std::string::String, std::io::Error>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _8: std::string::String;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u32>;
    let mut _10: std::result::Result<u32, std::io::Error>;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _13: u32;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u32>;
    let mut _15: std::result::Result<u32, std::io::Error>;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _18: u32;
    let mut _19: std::string::String;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::string::String>;
    let mut _21: std::result::Result<std::string::String, std::io::Error>;
    let mut _22: isize;
    let _23: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _24: std::string::String;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::string::String>;
    let mut _26: std::result::Result<std::string::String, std::io::Error>;
    let mut _27: isize;
    let _28: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _29: std::string::String;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _8;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _12;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _13;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _17;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _18;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _23;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _24;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _28;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _29;
        scope 20 {
        }
    }

    bb0: {
        _5 = <String as BorshDeserialize>::deserialize(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <Result<String, std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _8 = move ((_4 as Continue).0: std::string::String);
        _3 = move _8;
        _10 = <u32 as BorshDeserialize>::deserialize(_1) -> [return: bb6, unwind: bb34];
    }

    bb5: {
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<CarnivalInstructionData, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> [return: bb27, unwind continue];
    }

    bb6: {
        _9 = <Result<u32, std::io::Error> as Try>::branch(move _10) -> [return: bb7, unwind: bb34];
    }

    bb7: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb8, 1: bb9, otherwise: bb3];
    }

    bb8: {
        _13 = ((_9 as Continue).0: u32);
        _15 = <u32 as BorshDeserialize>::deserialize(_1) -> [return: bb11, unwind: bb33];
    }

    bb9: {
        _12 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<CarnivalInstructionData, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb10, unwind: bb33];
    }

    bb10: {
        drop(_3) -> [return: bb27, unwind continue];
    }

    bb11: {
        _14 = <Result<u32, std::io::Error> as Try>::branch(move _15) -> [return: bb12, unwind: bb33];
    }

    bb12: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb13, 1: bb14, otherwise: bb3];
    }

    bb13: {
        _18 = ((_14 as Continue).0: u32);
        _21 = <String as BorshDeserialize>::deserialize(_1) -> [return: bb16, unwind: bb32];
    }

    bb14: {
        _17 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<CarnivalInstructionData, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _17) -> [return: bb15, unwind: bb32];
    }

    bb15: {
        drop(_3) -> [return: bb27, unwind continue];
    }

    bb16: {
        _20 = <Result<String, std::io::Error> as Try>::branch(move _21) -> [return: bb17, unwind: bb32];
    }

    bb17: {
        _22 = discriminant(_20);
        switchInt(move _22) -> [0: bb18, 1: bb19, otherwise: bb3];
    }

    bb18: {
        _24 = move ((_20 as Continue).0: std::string::String);
        _19 = move _24;
        _26 = <String as BorshDeserialize>::deserialize(_1) -> [return: bb21, unwind: bb30];
    }

    bb19: {
        _23 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<CarnivalInstructionData, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _23) -> [return: bb20, unwind: bb31];
    }

    bb20: {
        drop(_3) -> [return: bb27, unwind continue];
    }

    bb21: {
        _25 = <Result<String, std::io::Error> as Try>::branch(move _26) -> [return: bb22, unwind: bb30];
    }

    bb22: {
        _27 = discriminant(_25);
        switchInt(move _27) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _29 = move ((_25 as Continue).0: std::string::String);
        _2 = CarnivalInstructionData { name: move _3, height: _13, ticket_count: _18, attraction: move _19, attraction_name: move _29 };
        _0 = Result::<CarnivalInstructionData, std::io::Error>::Ok(move _2);
        goto -> bb27;
    }

    bb24: {
        _28 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<CarnivalInstructionData, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _28) -> [return: bb25, unwind: bb28];
    }

    bb25: {
        drop(_19) -> [return: bb26, unwind: bb29];
    }

    bb26: {
        drop(_3) -> [return: bb27, unwind continue];
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_19) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_3) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_19) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_3) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_3) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_3) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_3) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        resume;
    }
}

fn processor::<impl at src/processor.rs:13:44: 13:49>::fmt(_1: &CarnivalInstructionData, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::string::String;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &u32;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &u32;
    let _13: &str;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &std::string::String;
    let _16: &str;
    let mut _17: &dyn std::fmt::Debug;
    let _18: &&std::string::String;
    let _19: &std::string::String;

    bb0: {
        _3 = const "CarnivalInstructionData";
        _4 = const "name";
        _6 = &((*_1).0: std::string::String);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "height";
        _9 = &((*_1).1: u32);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "ticket_count";
        _12 = &((*_1).2: u32);
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = const "attraction";
        _15 = &((*_1).3: std::string::String);
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _16 = const "attraction_name";
        _19 = &((*_1).4: std::string::String);
        _18 = &_19;
        _17 = _18 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field5_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11, _13, move _14, _16, move _17) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn process_instruction(_1: &Pubkey, _2: &[AccountInfo<'_>], _3: &[u8]) -> Result<(), ProgramError> {
    debug _program_id => _1;
    debug _accounts => _2;
    debug instruction_data => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: processor::CarnivalInstructionData;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, processor::CarnivalInstructionData>;
    let mut _6: std::result::Result<processor::CarnivalInstructionData, std::io::Error>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _9: processor::CarnivalInstructionData;
    let mut _10: &str;
    let mut _11: &std::string::String;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: instructions::get_on_ride::GetOnRideInstructionData;
    let mut _16: std::string::String;
    let mut _17: u32;
    let mut _18: u32;
    let mut _19: std::string::String;
    let mut _20: instructions::play_game::PlayGameInstructionData;
    let mut _21: std::string::String;
    let mut _22: u32;
    let mut _23: std::string::String;
    let mut _24: instructions::eat_food::EatFoodInstructionData;
    let mut _25: std::string::String;
    let mut _26: u32;
    let mut _27: std::string::String;
    let mut _28: solana_program::program_error::ProgramError;
    let mut _29: bool;
    let mut _30: bool;
    scope 1 {
        debug ix_data_object => _4;
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _9;
        scope 5 {
        }
    }

    bb0: {
        _30 = const false;
        _29 = const false;
        _6 = <CarnivalInstructionData as BorshDeserialize>::try_from_slice(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = <Result<CarnivalInstructionData, std::io::Error> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _9 = move ((_5 as Continue).0: processor::CarnivalInstructionData);
        _29 = const true;
        _30 = const true;
        _4 = move _9;
        _11 = &(_4.3: std::string::String);
        _10 = String::as_str(move _11) -> [return: bb7, unwind: bb32];
    }

    bb5: {
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _8) -> [return: bb6, unwind continue];
    }

    bb6: {
        _29 = const false;
        _30 = const false;
        goto -> bb17;
    }

    bb7: {
        _14 = <str as PartialEq>::eq(_10, const "ride") -> [return: bb16, unwind: bb32];
    }

    bb8: {
        _13 = <str as PartialEq>::eq(_10, const "game") -> [return: bb14, unwind: bb32];
    }

    bb9: {
        _12 = <str as PartialEq>::eq(_10, const "food") -> [return: bb12, unwind: bb32];
    }

    bb10: {
        _28 = solana_program::program_error::ProgramError::InvalidInstructionData;
        _0 = Result::<(), ProgramError>::Err(move _28);
        goto -> bb27;
    }

    bb11: {
        _30 = const false;
        _25 = move (_4.0: std::string::String);
        _26 = (_4.2: u32);
        _29 = const false;
        _27 = move (_4.4: std::string::String);
        _24 = EatFoodInstructionData { eater_name: move _25, eater_ticket_count: move _26, food_stand: move _27 };
        _0 = eat_food(move _24) -> [return: bb33, unwind: bb32];
    }

    bb12: {
        switchInt(move _12) -> [0: bb10, otherwise: bb11];
    }

    bb13: {
        _30 = const false;
        _21 = move (_4.0: std::string::String);
        _22 = (_4.2: u32);
        _29 = const false;
        _23 = move (_4.4: std::string::String);
        _20 = PlayGameInstructionData { gamer_name: move _21, gamer_ticket_count: move _22, game: move _23 };
        _0 = play_game(move _20) -> [return: bb34, unwind: bb32];
    }

    bb14: {
        switchInt(move _13) -> [0: bb9, otherwise: bb13];
    }

    bb15: {
        _30 = const false;
        _16 = move (_4.0: std::string::String);
        _17 = (_4.1: u32);
        _18 = (_4.2: u32);
        _29 = const false;
        _19 = move (_4.4: std::string::String);
        _15 = GetOnRideInstructionData { rider_name: move _16, rider_height: move _17, rider_ticket_count: move _18, ride: move _19 };
        _0 = get_on_ride(move _15) -> [return: bb35, unwind: bb32];
    }

    bb16: {
        switchInt(move _14) -> [0: bb8, otherwise: bb15];
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        resume;
    }

    bb19: {
        _29 = const false;
        _30 = const false;
        goto -> bb17;
    }

    bb20 (cleanup): {
        switchInt(_29) -> [0: bb18, otherwise: bb21];
    }

    bb21 (cleanup): {
        drop((_4.4: std::string::String)) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop((_4.3: std::string::String)) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb23: {
        switchInt(_29) -> [0: bb19, otherwise: bb24];
    }

    bb24: {
        drop((_4.4: std::string::String)) -> [return: bb19, unwind continue];
    }

    bb25: {
        drop((_4.3: std::string::String)) -> [return: bb23, unwind: bb20];
    }

    bb26: {
        drop((_4.0: std::string::String)) -> [return: bb25, unwind: bb22];
    }

    bb27: {
        switchInt(_30) -> [0: bb25, otherwise: bb26];
    }

    bb28 (cleanup): {
        switchInt(_29) -> [0: bb18, otherwise: bb29];
    }

    bb29 (cleanup): {
        drop((_4.4: std::string::String)) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop((_4.3: std::string::String)) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop((_4.0: std::string::String)) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_30) -> [0: bb30, otherwise: bb31];
    }

    bb33: {
        goto -> bb27;
    }

    bb34: {
        goto -> bb27;
    }

    bb35: {
        goto -> bb27;
    }
}

fn food::<impl at src/state/food.rs:9:1: 9:15>::new(_1: String, _2: String, _3: u32) -> FoodStand {
    debug name => _1;
    debug food_type => _2;
    debug tickets => _3;
    let mut _0: state::food::FoodStand;

    bb0: {
        _0 = FoodStand { name: move _1, food_type: move _2, tickets: _3 };
        return;
    }
}

fn get_food_stands() -> Vec<FoodStand> {
    let mut _0: std::vec::Vec<state::food::FoodStand>;
    let mut _1: std::boxed::Box<[state::food::FoodStand]>;
    let mut _2: std::boxed::Box<[state::food::FoodStand; 3]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[state::food::FoodStand; 3]>;
    let mut _7: state::food::FoodStand;
    let mut _8: std::string::String;
    let _9: &str;
    let mut _10: std::string::String;
    let _11: &str;
    let mut _12: state::food::FoodStand;
    let mut _13: std::string::String;
    let _14: &str;
    let mut _15: std::string::String;
    let _16: &str;
    let mut _17: state::food::FoodStand;
    let mut _18: std::string::String;
    let _19: &str;
    let mut _20: std::string::String;
    let _21: &str;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: &mut std::boxed::Box<[state::food::FoodStand; 3]>;
    let mut _26: ();
    let mut _27: *const [state::food::FoodStand; 3];
    scope 1 {
    }

    bb0: {
        _24 = const false;
        _23 = const false;
        _22 = const false;
        _3 = SizeOf([state::food::FoodStand; 3]);
        _4 = AlignOf([state::food::FoodStand; 3]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [state::food::FoodStand; 3]);
        _9 = const "Larry's Pizza";
        _8 = <str as ToString>::to_string(_9) -> [return: bb2, unwind: bb21];
    }

    bb2: {
        _24 = const true;
        _11 = const "pizza";
        _10 = <str as ToString>::to_string(_11) -> [return: bb3, unwind: bb20];
    }

    bb3: {
        _24 = const false;
        _7 = FoodStand::new(move _8, move _10, const 3_u32) -> [return: bb4, unwind: bb20];
    }

    bb4: {
        _24 = const false;
        _14 = const "Taco Shack";
        _13 = <str as ToString>::to_string(_14) -> [return: bb5, unwind: bb13];
    }

    bb5: {
        _23 = const true;
        _16 = const "taco";
        _15 = <str as ToString>::to_string(_16) -> [return: bb6, unwind: bb18];
    }

    bb6: {
        _23 = const false;
        _12 = FoodStand::new(move _13, move _15, const 2_u32) -> [return: bb7, unwind: bb18];
    }

    bb7: {
        _23 = const false;
        _19 = const "Dough Boy's";
        _18 = <str as ToString>::to_string(_19) -> [return: bb8, unwind: bb12];
    }

    bb8: {
        _22 = const true;
        _21 = const "fried dough";
        _20 = <str as ToString>::to_string(_21) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        _22 = const false;
        _17 = FoodStand::new(move _18, move _20, const 1_u32) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        _22 = const false;
        _27 = (((_6.0: std::ptr::Unique<[state::food::FoodStand; 3]>).0: std::ptr::NonNull<[state::food::FoodStand; 3]>).0: *const [state::food::FoodStand; 3]);
        (*_27) = [move _7, move _12, move _17];
        _2 = move _6;
        _1 = move _2 as std::boxed::Box<[state::food::FoodStand]> (PointerCoercion(Unsize));
        _0 = std::slice::<impl [FoodStand]>::into_vec::<std::alloc::Global>(move _1) -> [return: bb11, unwind continue];
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_12) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_7) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        resume;
    }

    bb15 (cleanup): {
        drop(_18) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_22) -> [0: bb12, otherwise: bb15];
    }

    bb17 (cleanup): {
        drop(_13) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        switchInt(_23) -> [0: bb13, otherwise: bb17];
    }

    bb19 (cleanup): {
        drop(_8) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        switchInt(_24) -> [0: bb21, otherwise: bb19];
    }

    bb21 (cleanup): {
        _25 = &mut _6;
        _26 = <Box<[FoodStand; 3]> as Drop>::drop(move _25) -> [return: bb14, unwind terminate(cleanup)];
    }
}

const DEFAULT_TICKETS_TO_PLAY: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 3_u32;
        return;
    }
}

fn game::<impl at src/state/game.rs:12:1: 12:10>::new(_1: String, _2: u32, _3: String) -> Game {
    debug name => _1;
    debug tries => _2;
    debug prize => _3;
    let mut _0: state::game::Game;

    bb0: {
        _0 = Game { name: move _1, tickets: const state::game::DEFAULT_TICKETS_TO_PLAY, tries: _2, prize: move _3 };
        return;
    }
}

fn get_games() -> Vec<Game> {
    let mut _0: std::vec::Vec<state::game::Game>;
    let mut _1: std::boxed::Box<[state::game::Game]>;
    let mut _2: std::boxed::Box<[state::game::Game; 3]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[state::game::Game; 3]>;
    let mut _7: state::game::Game;
    let mut _8: std::string::String;
    let _9: &str;
    let mut _10: std::string::String;
    let _11: &str;
    let mut _12: state::game::Game;
    let mut _13: std::string::String;
    let _14: &str;
    let mut _15: std::string::String;
    let _16: &str;
    let mut _17: state::game::Game;
    let mut _18: std::string::String;
    let _19: &str;
    let mut _20: std::string::String;
    let _21: &str;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: &mut std::boxed::Box<[state::game::Game; 3]>;
    let mut _26: ();
    let mut _27: *const [state::game::Game; 3];
    scope 1 {
    }

    bb0: {
        _24 = const false;
        _23 = const false;
        _22 = const false;
        _3 = SizeOf([state::game::Game; 3]);
        _4 = AlignOf([state::game::Game; 3]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [state::game::Game; 3]);
        _9 = const "Ring Toss";
        _8 = <str as ToString>::to_string(_9) -> [return: bb2, unwind: bb21];
    }

    bb2: {
        _24 = const true;
        _11 = const "teddy bear";
        _10 = <str as ToString>::to_string(_11) -> [return: bb3, unwind: bb20];
    }

    bb3: {
        _24 = const false;
        _7 = Game::new(move _8, const 5_u32, move _10) -> [return: bb4, unwind: bb20];
    }

    bb4: {
        _24 = const false;
        _14 = const "I Got It!";
        _13 = <str as ToString>::to_string(_14) -> [return: bb5, unwind: bb13];
    }

    bb5: {
        _23 = const true;
        _16 = const "goldfish";
        _15 = <str as ToString>::to_string(_16) -> [return: bb6, unwind: bb18];
    }

    bb6: {
        _23 = const false;
        _12 = Game::new(move _13, const 12_u32, move _15) -> [return: bb7, unwind: bb18];
    }

    bb7: {
        _23 = const false;
        _19 = const "Ladder Climb";
        _18 = <str as ToString>::to_string(_19) -> [return: bb8, unwind: bb12];
    }

    bb8: {
        _22 = const true;
        _21 = const "popcorn bucket";
        _20 = <str as ToString>::to_string(_21) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        _22 = const false;
        _17 = Game::new(move _18, const 1_u32, move _20) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        _22 = const false;
        _27 = (((_6.0: std::ptr::Unique<[state::game::Game; 3]>).0: std::ptr::NonNull<[state::game::Game; 3]>).0: *const [state::game::Game; 3]);
        (*_27) = [move _7, move _12, move _17];
        _2 = move _6;
        _1 = move _2 as std::boxed::Box<[state::game::Game]> (PointerCoercion(Unsize));
        _0 = std::slice::<impl [Game]>::into_vec::<std::alloc::Global>(move _1) -> [return: bb11, unwind continue];
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_12) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_7) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        resume;
    }

    bb15 (cleanup): {
        drop(_18) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_22) -> [0: bb12, otherwise: bb15];
    }

    bb17 (cleanup): {
        drop(_13) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        switchInt(_23) -> [0: bb13, otherwise: bb17];
    }

    bb19 (cleanup): {
        drop(_8) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        switchInt(_24) -> [0: bb21, otherwise: bb19];
    }

    bb21 (cleanup): {
        _25 = &mut _6;
        _26 = <Box<[Game; 3]> as Drop>::drop(move _25) -> [return: bb14, unwind terminate(cleanup)];
    }
}

fn ride::<impl at src/state/ride.rs:10:1: 10:10>::new(_1: String, _2: bool, _3: u32, _4: u32) -> Ride {
    debug name => _1;
    debug upside_down => _2;
    debug tickets => _3;
    debug min_height => _4;
    let mut _0: state::ride::Ride;

    bb0: {
        _0 = Ride { name: move _1, upside_down: _2, tickets: _3, min_height: _4 };
        return;
    }
}

fn get_rides() -> Vec<Ride> {
    let mut _0: std::vec::Vec<state::ride::Ride>;
    let mut _1: std::boxed::Box<[state::ride::Ride]>;
    let mut _2: std::boxed::Box<[state::ride::Ride; 4]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[state::ride::Ride; 4]>;
    let mut _7: state::ride::Ride;
    let mut _8: std::string::String;
    let _9: &str;
    let mut _10: state::ride::Ride;
    let mut _11: std::string::String;
    let _12: &str;
    let mut _13: state::ride::Ride;
    let mut _14: std::string::String;
    let _15: &str;
    let mut _16: state::ride::Ride;
    let mut _17: std::string::String;
    let _18: &str;
    let mut _19: &mut std::boxed::Box<[state::ride::Ride; 4]>;
    let mut _20: ();
    let mut _21: *const [state::ride::Ride; 4];
    scope 1 {
    }

    bb0: {
        _3 = SizeOf([state::ride::Ride; 4]);
        _4 = AlignOf([state::ride::Ride; 4]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [state::ride::Ride; 4]);
        _9 = const "Tilt-a-Whirl";
        _8 = <str as ToString>::to_string(_9) -> [return: bb2, unwind: bb15];
    }

    bb2: {
        _7 = Ride::new(move _8, const false, const 3_u32, const 48_u32) -> [return: bb3, unwind: bb15];
    }

    bb3: {
        _12 = const "Scrambler";
        _11 = <str as ToString>::to_string(_12) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _10 = Ride::new(move _11, const false, const 3_u32, const 48_u32) -> [return: bb5, unwind: bb13];
    }

    bb5: {
        _15 = const "Ferris Wheel";
        _14 = <str as ToString>::to_string(_15) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _13 = Ride::new(move _14, const false, const 5_u32, const 55_u32) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _18 = const "Zero Gravity";
        _17 = <str as ToString>::to_string(_18) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        _16 = Ride::new(move _17, const true, const 5_u32, const 60_u32) -> [return: bb9, unwind: bb11];
    }

    bb9: {
        _21 = (((_6.0: std::ptr::Unique<[state::ride::Ride; 4]>).0: std::ptr::NonNull<[state::ride::Ride; 4]>).0: *const [state::ride::Ride; 4]);
        (*_21) = [move _7, move _10, move _13, move _16];
        _2 = move _6;
        _1 = move _2 as std::boxed::Box<[state::ride::Ride]> (PointerCoercion(Unsize));
        _0 = std::slice::<impl [Ride]>::into_vec::<std::alloc::Global>(move _1) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_13) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        drop(_10) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_7) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        resume;
    }

    bb15 (cleanup): {
        _19 = &mut _6;
        _20 = <Box<[Ride; 4]> as Drop>::drop(move _19) -> [return: bb14, unwind terminate(cleanup)];
    }
}
