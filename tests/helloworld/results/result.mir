// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn entrypoint(_1: *mut u8) -> u64 {
    debug input => _1;
    let mut _0: u64;
    let _2: &solana_program::pubkey::Pubkey;
    let _3: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _4: &[u8];
    let mut _5: (&solana_program::pubkey::Pubkey, std::vec::Vec<solana_program::account_info::AccountInfo<'_>>, &[u8]);
    let mut _6: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _7: &&solana_program::pubkey::Pubkey;
    let mut _8: &[solana_program::account_info::AccountInfo<'_>];
    let _9: &[solana_program::account_info::AccountInfo<'_>];
    let _10: &std::vec::Vec<solana_program::account_info::AccountInfo<'_>>;
    let _11: &&[u8];
    let mut _12: isize;
    let mut _14: &solana_program::pubkey::Pubkey;
    let mut _15: &[u8];
    scope 1 {
        debug program_id => _2;
        debug accounts => _3;
        debug instruction_data => _4;
        let _13: solana_program::program_error::ProgramError;
        scope 3 {
            debug error => _13;
        }
    }
    scope 2 {
    }

    bb0: {
        _5 = solana_program::entrypoint::deserialize::<'_>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = (_5.0: &solana_program::pubkey::Pubkey);
        _3 = move (_5.1: std::vec::Vec<solana_program::account_info::AccountInfo<'_>>);
        _4 = (_5.2: &[u8]);
        _7 = &_2;
        _14 = deref_copy (*_7);
        _10 = &_3;
        _9 = <Vec<AccountInfo<'_>> as Deref>::deref(_10) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _8 = _9;
        _11 = &_4;
        _15 = deref_copy (*_11);
        _6 = process_instruction(_14, move _8, _15) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _12 = discriminant(_6);
        switchInt(move _12) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _13 = move ((_6 as Err).0: solana_program::program_error::ProgramError);
        _0 = <ProgramError as Into<u64>>::into(move _13) -> [return: bb12, unwind: bb9];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _0 = const _;
        goto -> bb7;
    }

    bb7: {
        drop(_3) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        goto -> bb7;
    }
}

fn process_instruction(_1: `&Pubkey`, _2: &[AccountInfo<'_>], _3: &[u8]) -> Result<(), ProgramError> {
    debug _program_id => _1;
    debug _accounts => _2;
    debug _instruction_data => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: ();
    let _5: &str;

    bb0: {
        _5 = const "Hello, world!";
        _4 = solana_program::log::sol_log(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<(), ProgramError>::Ok(const ());
        return;
    }
}
