#ifndef VULNERABILITY_H
#define VULNERABILITY_H
#include <optional>
#include <string>

enum class vulnerability_type {
    addition_overflow,          // 0
    addition_underflow,         // 1
    subtraction_overflow,       // 2
    subtraction_underflow,      // 3
    multiplication_overflow,    // 4
    multiplication_underflow,   // 5
    division_overflow,          // 6
    division_by_zero,           // 7
    negation_overflow,          // 8
    missing_ownership_check,    // 9
    missing_signer_check,       // 10
    failed_assertion,           // 11
    negation_underflow,         // 12
};

class vulnerability {
public:
    explicit vulnerability(vulnerability_type type, const std::optional<std::string> &reason, const std::optional<std::string> &solution);

    [[nodiscard]] std::optional<std::string> get_reason() const;
    [[nodiscard]] std::optional<std::string> get_solution() const;
    [[nodiscard]] std::tuple<std::string, std::string> get_details() const;
private:
    vulnerability_type _type;
    std::optional<std::string> _reason;
    std::optional<std::string> _solution;

    static std::tuple<std::string, std::string> get_details(vulnerability_type t);
};

#endif //VULNERABILITY_H
