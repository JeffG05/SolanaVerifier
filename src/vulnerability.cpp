#include "vulnerability.h"

vulnerability::vulnerability(const vulnerability_type type, const std::optional<std::string> &reason, const std::optional<std::string> &solution) {
    _type = type;
    _reason = reason;
    _solution = solution;
}

std::optional<std::string> vulnerability::get_reason() const {
    return _reason;
}

std::optional<std::string> vulnerability::get_solution() const {
    return _solution;
}

std::tuple<std::string, std::string> vulnerability::get_details(const vulnerability_type t) {
    switch (t) {
        case vulnerability_type::addition_overflow:
            return std::make_tuple("Addition Overflow", "Addition overflow occurs when an addition results in a value that exceeds the maximum representable value in a computer's memory, leading to unexpected and potentially erroneous behavior");
        case vulnerability_type::addition_underflow:
            return std::make_tuple("Addition Underflow", "Addition underflow occurs when an addition results in a value smaller than the minimum representable value in a computer's memory, leading to unexpected and potentially erroneous behavior");
        case vulnerability_type::subtraction_overflow:
            return std::make_tuple("Subtraction Overflow", "Subtraction overflow occurs when a subtraction results in a value that exceeds the maximum representable value in a computer's memory, leading to unexpected and potentially erroneous behavior");
        case vulnerability_type::subtraction_underflow:
            return std::make_tuple("Subtraction Underflow", "Subtraction underflow occurs when a subtraction results in a value smaller than the minimum representable value in a computer's memory, leading to unexpected and potentially erroneous behavior");
        case vulnerability_type::multiplication_overflow:
            return std::make_tuple("Multiplication Overflow", "Multiplication overflow occurs when a multiplication results in a value that exceeds the maximum representable value in a computer's memory, leading to unexpected and potentially erroneous behavior");
        case vulnerability_type::multiplication_underflow:
            return std::make_tuple("Multiplication Underflow", "Multiplication underflow occurs when a multiplication results in a value smaller than the minimum representable value in a computer's memory, leading to unexpected and potentially erroneous behavior");
        case vulnerability_type::division_overflow:
            return std::make_tuple("Division Overflow", "Division overflow occurs when a division results in a value that exceeds the maximum representable value in a computer's memory, leading to unexpected and potentially erroneous behavior");
        case vulnerability_type::division_by_zero:
            return std::make_tuple("Division by Zero", "Division by zero is an undefined mathematical operation where an attempt to divide a number by zero results in an error or undefined outcome");
        case vulnerability_type::negation_overflow:
            return std::make_tuple("Negation Overflow", "Negation overflow occurs when a negation results in a value that exceeds the maximum representable value in a computer's memory, leading to unexpected and potentially erroneous behavior");
        case vulnerability_type::missing_ownership_check:
            return std::make_tuple("Missing Ownership Check", "Ownership checks are required to prevent unauthorised accounts from running protected functions");
        case vulnerability_type::missing_signer_check:
            return std::make_tuple("Missing Signer Check", "Signer checks are required to ensure protected functions have been signed by the authorised accounts");
        case vulnerability_type::failed_assertion:
            return std::make_tuple("Failed Assertion", "Program fails an assertion");
        case vulnerability_type::negation_underflow:
            return std::make_tuple("Negation Underflow", "Negation underflow occurs when a negation results in a value that exceeds the minimum representable value in a computer's memory, leading to unexpected and potentially erroneous behavior");
    }
    std::throw_with_nested(std::runtime_error("Vulnerability details missing"));
}

std::tuple<std::string, std::string> vulnerability::get_details() const {
    return get_details(_type);
}
