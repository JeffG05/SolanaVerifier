#include <stdbool.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>

// UNSIGNED INTEGERS
typedef unsigned long long int u64;
u64 MAX_U64 = 18446744073709551615uLL;
u64 nondet_u64() {
    u64 x;
    __ESBMC_assume(x <= MAX_U64);
    return x;
}

typedef unsigned long long int u32;
u32 MAX_U32 = 4294967295uLL;
u32 nondet_u32() {
    u32 x;
    __ESBMC_assume(x <= MAX_U32);
    return x;
}

typedef unsigned long long int u16;
u16 MAX_U16 = 65535uLL;
u16 nondet_u16() {
    u16 x;
    __ESBMC_assume(x <= MAX_U16);
    return x;
}

typedef unsigned long long int u8;
u8 MAX_U8 = 255uLL;
u8 nondet_u8() {
    u8 x;
    __ESBMC_assume(x <= MAX_U8);
    return x;
}

typedef u64 usize;
usize MAX_USIZE = 18446744073709551615uLL;
usize nondet_usize() {
    usize x;
    __ESBMC_assume(x <= MAX_USIZE);
    return x;
}

// SIGNED INTEGERS
typedef signed long long int i64;
i64 MIN_I64 = -9223372036854775807LL - 1;
i64 MAX_I64 = 9223372036854775807LL;
i64 nondet_i64() {
    i64 x;
    __ESBMC_assume(x >= MIN_I64);
    __ESBMC_assume(x <= MAX_I64);
    return x;
}

typedef signed long long int i32;
i32 MIN_I32 = -2147483648LL;
i32 MAX_I32 = 2147483647LL;
i32 nondet_i32() {
    i32 x;
    __ESBMC_assume(x >= MIN_I32);
    __ESBMC_assume(x <= MAX_I32);
    return x;
}

typedef signed long long int i16;
i16 MIN_I16 = -32768LL;
i16 MAX_I16 = 32767LL;
i16 nondet_i16() {
    i16 x;
    __ESBMC_assume(x >= MIN_I16);
    __ESBMC_assume(x <= MAX_I16);
    return x;
}

typedef signed long long int i8;
i8 MIN_I8 = -128LL;
i8 MAX_I8 = 127LL;
i8 nondet_i8() {
    i8 x;
    __ESBMC_assume(x >= MIN_I8);
    __ESBMC_assume(x <= MAX_I8);
    return x;
}

typedef i64 isize;
isize MIN_ISIZE = -9223372036854775807LL - 1;
isize MAX_ISIZE = 9223372036854775807LL;
isize nondet_isize() {
    isize x;
    __ESBMC_assume(x >= MIN_ISIZE);
    __ESBMC_assume(x <= MAX_ISIZE);
    return x;
}

// FLOATING NUMBERS
typedef double f64;
f64 MIN_F64 = -1.7976931348623157E+308;
f64 MAX_F64 = 1.7976931348623157E+308;
f64 nondet_f64() {
    f64 x;
    __ESBMC_assume(x >= MIN_F64);
    __ESBMC_assume(x <= MAX_F64);
    return x;
}

typedef double f32;
f32 MIN_F32 = -3.40282347E+38;
f32 MAX_F32 = 3.40282347E+38;
f32 nondet_f32() {
    f32 x;
    __ESBMC_assume(x >= MIN_F32);
    __ESBMC_assume(x <= MAX_F32);
    return x;
}

// MATH OPERATORS
typedef struct unsigned_math_result_struct {
    unsigned long long int value;
    bool errors;
} unsigned_math_result;

typedef struct signed_math_result_struct {
    signed long long int value;
    bool errors;
} signed_math_result;

typedef struct float_math_result_struct {
    double value;
    bool errors;
} float_math_result;

unsigned_math_result u_negation(unsigned long long int a, unsigned long long int max) {
    unsigned_math_result result;
    result.value = -a;
    result.errors = true;
    __ESBMC_assert(!result.errors, "Vulnerability Found: 12");
    return result;
}

// STRING
typedef char* string;
string nondet_string() {
    char* str;
    return str;
}
void print(string s) {
    printf("%s\n", s);
}
u8 get_str_len(string s) {
    return strlen(s);
}
bool is_equal_string(string lhs, string rhs) {
    return strcmp(lhs, rhs) == 0;
}
void str_as_bytes(string in, u8* out) {
    out[0] = (u8) in % 256;
}

// PUBKEY
typedef u8 pubkey;
pubkey nondet_pubkey() {
    return nondet_u8();
}
void pubkey_as_bytes(pubkey in, u8* out) {
    *out = in;
}

// PROGRAM ADDRESS
typedef struct solana_c_program_address_struct {
    pubkey get0;
    u8 get1;
} solana_c_program_address;
solana_c_program_address sol_find_program_address(u8 seeds[{{ARRAY_SIZE}}][{{ARRAY_SIZE}}], pubkey program_id) {
    solana_c_program_address x;
    x.get0 = program_id;
    x.get1 = seeds[0][0];
    return x;
}

pubkey sol_create_program_address(u8 seeds[{{ARRAY_SIZE}}][{{ARRAY_SIZE}}], pubkey program_id) {
    return program_id;
}

// ACCOUNT INFO
typedef struct account_info_struct {
    pubkey get0;
    u64 get1;
    u8 get2[{{ARRAY_SIZE}}];
    pubkey get3;
    u64 get4;
    bool get5;
    bool get6;
    bool get7;
    bool data_is_empty;
} account_info;
account_info nondet_account_info() {
    account_info info;
    info.get0 = nondet_pubkey();
    info.get1 = nondet_u64();
    for (int i = 0; i < {{ARRAY_SIZE}}; i++) {
        info.get2[i] = nondet_u8();
    }
    info.get3 = nondet_pubkey();
    info.get4 = nondet_u64();
    info.get5 = nondet_bool();
    info.get6 = nondet_bool();
    info.get7 = nondet_bool();
    info.data_is_empty = nondet_bool();
    return info;
}

// ACCOUNT META
typedef struct account_meta_struct {
    pubkey get0;
    bool get1;
    bool get2;
} account_meta;
account_meta nondet_account_meta() {
    account_meta meta;
    meta.get0 = nondet_pubkey();
    meta.get1 = nondet_bool();
    meta.get2 = nondet_bool();
    return meta;
}

// INSTRUCTION
typedef struct solana_instruction_struct {
    pubkey get0;
    account_meta get1[{{ARRAY_SIZE}}];
    u8 get2[{{ARRAY_SIZE}}];
} solana_instruction;
solana_instruction nondet_solana_instruction() {
    solana_instruction instruction;
    instruction.get0 = nondet_pubkey();
    for (int i = 0; i < {{ARRAY_SIZE}}; i++) {
        instruction.get1[i] = nondet_account_meta();
    }
    for (int i = 0; i < {{ARRAY_SIZE}}; i++) {
        instruction.get2[i] = nondet_u8();
    }
    return instruction;
}
solana_instruction sol_transfer(pubkey from_pubkey, pubkey to_pubkey, u64 lamports, pubkey system_program_id) {
    account_meta from_meta;
    from_meta.get0 = from_pubkey;
    from_meta.get1 = true;
    from_meta.get2 = true;

    account_meta to_meta;
    to_meta.get0 = to_pubkey;
    to_meta.get1 = false;
    to_meta.get2 = true;

    solana_instruction x;
    x.get0 = system_program_id;
    x.get1[0] = from_meta;
    x.get1[1] = to_meta;

    int counter = 0;
    int b = 0;
    while (counter < {{ARRAY_SIZE}} && counter < 4) {
        x.get2[counter] = 2 >> b & 0xFF;
        b += 8;
        counter += 1;
    }
    b = 0;
    while (counter < {{ARRAY_SIZE}} && counter < 12) {
        x.get2[counter] = lamports >> b & 0xFF;
        b += 8;
        counter += 1;
    }

    return x;
}
solana_instruction sol_create_account(pubkey from_pubkey, pubkey to_pubkey, u64 lamports, u64 space, pubkey owner, pubkey system_program_id) {
    account_meta from_meta;
    from_meta.get0 = from_pubkey;
    from_meta.get1 = true;
    from_meta.get2 = true;

    account_meta to_meta;
    to_meta.get0 = to_pubkey;
    to_meta.get1 = true;
    to_meta.get2 = true;

    solana_instruction x;
    x.get0 = system_program_id;
    x.get1[0] = from_meta;
    x.get1[1] = to_meta;

    int counter = 0;
    int b = 0;
    while (counter < {{ARRAY_SIZE}} && counter < 4) {
        x.get2[counter] = 0 >> b & 0xFF;
        b += 8;
        counter += 1;
    }
    b = 0;
    while (counter < {{ARRAY_SIZE}} && counter < 12) {
        x.get2[counter] = lamports >> b & 0xFF;
        b += 8;
        counter += 1;
    }
    b = 0;
    while (counter < {{ARRAY_SIZE}} && counter < 20) {
        x.get2[counter] = space >> b & 0xFF;
        b += 8;
        counter += 1;
    }
    u8 pubkey_data[1];
    pubkey_as_bytes(owner, pubkey_data);
    b = 0;
    while (counter < {{ARRAY_SIZE}} && counter < 21) {
        x.get2[counter] = pubkey_data[b];
        b += 1;
        counter += 1;
    }

    return x;
}

// INFALLIBLE
typedef enum { unreachable } infallible;
infallible nondet_infallible() {
    infallible i;
    return i;
}

// CONTROL FLOW
typedef enum { _continue, _break } controlflow;
controlflow nondet_controlflow() {
    controlflow c;
    return c;
}

// PANIC ASSERT KIND
typedef enum { _panic_assert_kind_eq, _panic_assert_kind_ne, _panic_assert_kind_match } panic_assert_kind;
panic_assert_kind nondet_panic_assert_kind() {
    panic_assert_kind x;
    return x;
}

// ALIGNMENT
typedef enum { _alignment_left, _alignment_right, _alignment_center, _alignment_unknown } alignment;
alignment nondet_alignment() {
    alignment x;
    return x;
}

// COUNT
typedef enum { _count_is, _count_param, _count_implied } count;
count nondet_count() {
    count x;
    return x;
}

// PLACEHOLDER
typedef struct placeholder_struct {
    usize get0;
    char get1;
    alignment get2;
    u32 get3;
    count get4;
    count get5;
} placeholder;
placeholder nondet_placeholder() {
    placeholder x;
    x.get0 = nondet_usize();
    x.get1 = nondet_char();
    x.get2 = nondet_alignment();
    x.get3 = nondet_u32();
    x.get4 = nondet_count();
    x.get5 = nondet_count();
    return x;
}

typedef struct solana_asset_placeholder_array_optional_struct {
    bool is_none;
    placeholder value[{{ARRAY_SIZE}}];
} solana_asset_placeholder_array_optional;
solana_asset_placeholder_array_optional nondet_solana_asset_placeholder_array_optional() {
    solana_asset_placeholder_array_optional x;
    x.is_none = nondet_bool();
    for (int i = 0; i < {{ARRAY_SIZE}}; i++) {
        x.value[i] = nondet_placeholder();
    }
    return x;
}

// ARGUMENT
typedef struct argument_struct {
    string get0;
} argument;
argument nondet_argument() {
    argument x;
    x.get0 = nondet_string();
    return x;
}

// ARGUMENTS
typedef struct arguments_struct {
    string get0[{{ARRAY_SIZE}}];
    solana_asset_placeholder_array_optional get1;
    argument get2[{{ARRAY_SIZE}}];
} arguments;
arguments nondet_arguments() {
    arguments x;
    for (int i = 0; i < {{ARRAY_SIZE}}; i++) {
        x.get0[i] = nondet_string();
    }
    x.get1 = nondet_solana_asset_placeholder_array_optional();
    for (int i = 0; i < {{ARRAY_SIZE}}; i++) {
        x.get2[i] = nondet_argument();
    }
    return x;
}

// RENT
typedef struct rent_struct {
    u64 get0;
    f64 get1;
    u8 get2;
} rent;
rent nondet_rent() {
    rent x;
    x.get0 = nondet_u64();
    x.get1 = nondet_f64();
    x.get2 = nondet_u8();
    return x;
}
u64 sol_minimum_balance(rent x, usize data_len) {
    u64 bytes = data_len;
    f64 lamports = (128 + bytes) * x.get0;
    return lamports * x.get1;
}
rent sol_from_account_info(account_info x) {
    rent y;

    int counter = 0;
    int b = 0;

    y.get0 = 0;
    y.get1 = 0;
    y.get2 = 0;

    while (counter < {{ARRAY_SIZE}} && counter < 8) {
        y.get0 = y.get0 | x.get2[counter] << b;
        b += 8;
        counter += 1;
    }

    u64 float_as_int = 0;
    b = 0;
    while (counter < {{ARRAY_SIZE}} && counter < 16) {
        float_as_int = float_as_int | x.get2[counter] << b;
        b += 8;
        counter += 1;
    }
    f64* int_as_float_ptr = (f64*) &float_as_int;
    y.get1 = *int_as_float_ptr;

    b = 0;
    while (counter < {{ARRAY_SIZE}} && counter < 17) {
        y.get2 = y.get2 | x.get2[counter] << b;
        b += 8;
        counter += 1;
    }

    return y;
}