#include <stdbool.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>

// UNSIGNED INTEGERS
typedef unsigned long long int u64;
u64 MAX_U64 = 18446744073709551615uLL;
u64 nondet_u64() {
    u64 x;
    __ESBMC_assume(x <= MAX_U64);
    return x;
}

typedef unsigned long long int u32;
u32 MAX_U32 = 4294967295uLL;
u32 nondet_u32() {
    u32 x;
    __ESBMC_assume(x <= MAX_U32);
    return x;
}

typedef unsigned long long int u16;
u16 MAX_U16 = 65535uLL;
u16 nondet_u16() {
    u16 x;
    __ESBMC_assume(x <= MAX_U16);
    return x;
}

typedef unsigned long long int u8;
u8 MAX_U8 = 255uLL;
u8 nondet_u8() {
    u8 x;
    __ESBMC_assume(x <= MAX_U8);
    return x;
}

typedef u64 usize;
usize MAX_USIZE = 18446744073709551615uLL;
usize nondet_usize() {
    usize x;
    __ESBMC_assume(x <= MAX_USIZE);
    return x;
}

// SIGNED INTEGERS
typedef signed long long int i64;
i64 MIN_I64 = -9223372036854775807LL;
i64 MAX_I64 = 9223372036854775807LL;
i64 nondet_i64() {
    i64 x;
    __ESBMC_assume(x >= MIN_I64);
    __ESBMC_assume(x <= MAX_I64);
    return x;
}

typedef signed long long int i32;
i32 MIN_I32 = -2147483647LL;
i32 MAX_I32 = 2147483647LL;
i32 nondet_i32() {
    i32 x;
    __ESBMC_assume(x >= MIN_I32);
    __ESBMC_assume(x <= MAX_I32);
    return x;
}

typedef signed long long int i16;
i16 MIN_I16 = -32767LL;
i16 MAX_I16 = 32767LL;
i16 nondet_i16() {
    i16 x;
    __ESBMC_assume(x >= MIN_I16);
    __ESBMC_assume(x <= MAX_I16);
    return x;
}

typedef signed long long int i8;
i8 MIN_I8 = -127LL;
i8 MAX_I8 = 127LL;
i8 nondet_i8() {
    i8 x;
    __ESBMC_assume(x >= MIN_I8);
    __ESBMC_assume(x <= MAX_I8);
    return x;
}

typedef i64 isize;
isize MIN_ISIZE = -9223372036854775807LL;
isize MAX_ISIZE = 9223372036854775807LL;
isize nondet_isize() {
    isize x;
    __ESBMC_assume(x >= MIN_ISIZE);
    __ESBMC_assume(x <= MAX_ISIZE);
    return x;
}

// MATH OPERATORS
typedef struct unsigned_math_result_struct {
    unsigned long long int value;
    bool errors;
} unsigned_math_result;

typedef struct signed_math_result_struct {
    signed long long int value;
    bool errors;
} signed_math_result;

unsigned_math_result u_addition(unsigned long long int a, unsigned long long int b, unsigned long long int max) {
    unsigned_math_result result;
    result.value = a + b;
    result.errors = a > max - b;
    __ESBMC_assert(!result.errors, "Vulnerability Found: Addition Overflow");
    return result;
}

signed_math_result i_addition(signed long long int a, signed long long int b, signed long long int max, signed long long int min) {
    signed_math_result result;
    result.value = a + b;
    if (b < 0) {
        result.errors = a < min - b;
        __ESBMC_assert(!result.errors, "Vulnerability Found: Addition Underflow");
    } else {
        result.errors = a > max - b;
        __ESBMC_assert(!result.errors, "Vulnerability Found: Addition Overflow");
    }
    return result;
}

unsigned_math_result u_multiplication(unsigned long long int a, unsigned long long int b, unsigned long long int max) {
    unsigned_math_result result;
    result.value = a * b;
    if (b == 0) {
        result.errors = false;
    } else {
        result.errors = a > max / b;
        __ESBMC_assert(!result.errors, "Vulnerability Found: Multiplication Overflow");
    }
    return result;
}

signed_math_result i_multiplication(signed long long int a, signed long long int b, signed long long int max, signed long long int min) {
    signed_math_result result;
    result.value = a * b;
    if (b == 0) {
        result.errors = false;
    } else if ((b > 0) && (a > 0)) {
        result.errors = a > max / b;
        __ESBMC_assert(!result.errors, "Vulnerability Found: Multiplication Overflow");
    } else if ((b < 0) && (a < 0)) {
        result.errors = a < max / b;
        __ESBMC_assert(!result.errors, "Vulnerability Found: Multiplication Overflow");
    } else if ((b > 0) && (a < 0)) {
        result.errors = a < min / b;
        __ESBMC_assert(!result.errors, "Vulnerability Found: Multiplication Underflow");
    } else if ((b < 0) && (a > 0)) {
        result.errors = a > min / b;
        __ESBMC_assert(!result.errors, "Vulnerability Found: Multiplication Underflow");
    }
    return result;
}

// STRING
typedef char* string;
unsigned int MAX_STRING_LEN = 1024;
string nondet_string() {
    char* str;
    return str;
}
void print(string s) {
    printf("%s\n", s);
}

// PUBKEY
typedef struct pubkey_struct {
    u8 p0;
    u8 p1;
    u8 p2;
    u8 p3;
    u8 p4;
    u8 p5;
    u8 p6;
    u8 p7;
    u8 p8;
    u8 p9;
    u8 p10;
    u8 p11;
    u8 p12;
    u8 p13;
    u8 p14;
    u8 p15;
    u8 p16;
    u8 p17;
    u8 p18;
    u8 p19;
    u8 p20;
    u8 p21;
    u8 p22;
    u8 p23;
    u8 p24;
    u8 p25;
    u8 p26;
    u8 p27;
    u8 p28;
    u8 p29;
    u8 p30;
    u8 p31;
} pubkey;
pubkey nondet_pubkey() {
    pubkey p;
    return p;
}
bool is_equal(pubkey lhs, pubkey rhs) {
    return lhs.p0 == rhs.p0 && lhs.p1 == rhs.p1 && lhs.p2 == rhs.p2 &&
        lhs.p3 == rhs.p3 && lhs.p4 == rhs.p4 && lhs.p5 == rhs.p5 &&
        lhs.p6 == rhs.p6 && lhs.p7 == rhs.p7 && lhs.p8 == rhs.p8 &&
        lhs.p9 == rhs.p9 && lhs.p10 == rhs.p10 && lhs.p11 == rhs.p11 &&
        lhs.p12 == rhs.p12 && lhs.p13 == rhs.p13 && lhs.p14 == rhs.p14 &&
        lhs.p15 == rhs.p15 && lhs.p16 == rhs.p16 && lhs.p17 == rhs.p17 &&
        lhs.p18 == rhs.p18 && lhs.p19 == rhs.p19 && lhs.p20 == rhs.p20 &&
        lhs.p21 == rhs.p21 && lhs.p22 == rhs.p22 && lhs.p23 == rhs.p23 &&
        lhs.p24 == rhs.p24 && lhs.p25 == rhs.p25 && lhs.p26 == rhs.p26 &&
        lhs.p27 == rhs.p27 && lhs.p28 == rhs.p28 && lhs.p29 == rhs.p29 &&
        lhs.p30 == rhs.p30 && lhs.p31 == rhs.p31;
}

// ACCOUNT INFO
typedef struct account_info_struct {
    pubkey get0;
    u64 get1;
    u8 get2[{{ARRAY_SIZE}}];
    pubkey get3;
    u64 get4;
    bool get5;
    bool get6;
    bool get7;
} account_info;
account_info nondet_account_info() {
    account_info info;
    return info;
}

// INFALLIBLE
typedef enum { unreachable } infallible;
infallible nondet_infallible() {
    infallible i;
    return i;
}

// CONTROL FLOW
typedef enum { _continue, _break } controlflow;
controlflow nondet_controlflow() {
    controlflow c;
    return c;
}